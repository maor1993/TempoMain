
tempo_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004280  08004280  00014280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004284  08004284  00014284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000190  20000000  08004288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000d80  20000190  08004418  00020190  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000f10  08004418  00020f10  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  9 .debug_line   00007b4e  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000269d9  00000000  00000000  00027d06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051da  00000000  00000000  0004e6df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b28  00000000  00000000  000538c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011d0  00000000  00000000  000543e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008528  00000000  00000000  000555b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004817  00000000  00000000  0005dae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000622f7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d00  00000000  00000000  00062374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800403c 	.word	0x0800403c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	0800403c 	.word	0x0800403c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	4813      	ldr	r0, [pc, #76]	; (8000280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000234:	2004      	movs	r0, #4
    LDR R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000238:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800023a:	221f      	movs	r2, #31
    CMP R1, R2
 800023c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800023e:	d105      	bne.n	800024c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000240:	4810      	ldr	r0, [pc, #64]	; (8000284 <LoopForever+0x6>)
    LDR R1,=0x00000001
 8000242:	2101      	movs	r1, #1
    STR R1, [R0]
 8000244:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000246:	4810      	ldr	r0, [pc, #64]	; (8000288 <LoopForever+0xa>)
    LDR R1,=0x00000000
 8000248:	2100      	movs	r1, #0
    STR R1, [R0]
 800024a:	6001      	str	r1, [r0, #0]

0800024c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800024c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800024e:	e003      	b.n	8000258 <LoopCopyDataInit>

08000250 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000250:	4b0e      	ldr	r3, [pc, #56]	; (800028c <LoopForever+0xe>)
  ldr r3, [r3, r1]
 8000252:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000254:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000256:	3104      	adds	r1, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x12>)
  ldr r3, =_edata
 800025a:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <LoopForever+0x16>)
  adds r2, r0, r1
 800025c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800025e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000260:	d3f6      	bcc.n	8000250 <CopyDataInit>
  ldr r2, =_sbss
 8000262:	4a0d      	ldr	r2, [pc, #52]	; (8000298 <LoopForever+0x1a>)
  b LoopFillZerobss
 8000264:	e002      	b.n	800026c <LoopFillZerobss>

08000266 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  str  r3, [r2]
 8000268:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026a:	3204      	adds	r2, #4

0800026c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <LoopForever+0x1e>)
  cmp r2, r3
 800026e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000270:	d3f9      	bcc.n	8000266 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000272:	f003 f86d 	bl	8003350 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000276:	f003 fe55 	bl	8003f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027a:	f002 fdaf 	bl	8002ddc <main>

0800027e <LoopForever>:

LoopForever:
    b LoopForever
 800027e:	e7fe      	b.n	800027e <LoopForever>
  ldr   r0, =_estack
 8000280:	20001800 	.word	0x20001800
    LDR R0,=0x40021018
 8000284:	40021018 	.word	0x40021018
    LDR R0,=0x40010000
 8000288:	40010000 	.word	0x40010000
  ldr r3, =_sidata
 800028c:	08004288 	.word	0x08004288
  ldr r0, =_sdata
 8000290:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000294:	20000190 	.word	0x20000190
  ldr r2, =_sbss
 8000298:	20000190 	.word	0x20000190
  ldr r3, = _ebss
 800029c:	20000f10 	.word	0x20000f10

080002a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a0:	e7fe      	b.n	80002a0 <ADC1_IRQHandler>
	...

080002a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a4:	b510      	push	{r4, lr}
 80002a6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80002a8:	f001 fa40 	bl	800172c <HAL_RCC_GetHCLKFreq>
 80002ac:	21fa      	movs	r1, #250	; 0xfa
 80002ae:	0089      	lsls	r1, r1, #2
 80002b0:	f7ff ff32 	bl	8000118 <__udivsi3>
 80002b4:	f000 f872 	bl	800039c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002b8:	2001      	movs	r0, #1
 80002ba:	2200      	movs	r2, #0
 80002bc:	0021      	movs	r1, r4
 80002be:	4240      	negs	r0, r0
 80002c0:	f000 f82e 	bl	8000320 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd10      	pop	{r4, pc}

080002c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002c8:	2110      	movs	r1, #16
 80002ca:	4a06      	ldr	r2, [pc, #24]	; (80002e4 <HAL_Init+0x1c>)
{
 80002cc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002ce:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002d0:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002d2:	430b      	orrs	r3, r1
 80002d4:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80002d6:	f7ff ffe5 	bl	80002a4 <HAL_InitTick>
  HAL_MspInit();
 80002da:	f003 f801 	bl	80032e0 <HAL_MspInit>
}
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	46c0      	nop			; (mov r8, r8)
 80002e4:	40022000 	.word	0x40022000

080002e8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80002e8:	4a02      	ldr	r2, [pc, #8]	; (80002f4 <HAL_IncTick+0xc>)
 80002ea:	6813      	ldr	r3, [r2, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	4770      	bx	lr
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	200009dc 	.word	0x200009dc

080002f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002f8:	4b01      	ldr	r3, [pc, #4]	; (8000300 <HAL_GetTick+0x8>)
 80002fa:	6818      	ldr	r0, [r3, #0]
}
 80002fc:	4770      	bx	lr
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	200009dc 	.word	0x200009dc

08000304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000304:	b510      	push	{r4, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 800030a:	f7ff fff5 	bl	80002f8 <HAL_GetTick>
 800030e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000310:	f7ff fff2 	bl	80002f8 <HAL_GetTick>
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	1b00      	subs	r0, r0, r4
 8000318:	4298      	cmp	r0, r3
 800031a:	d3f9      	bcc.n	8000310 <HAL_Delay+0xc>
  {
  }
}
 800031c:	b002      	add	sp, #8
 800031e:	bd10      	pop	{r4, pc}

08000320 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000320:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000322:	2800      	cmp	r0, #0
 8000324:	db14      	blt.n	8000350 <HAL_NVIC_SetPriority+0x30>
 8000326:	4a16      	ldr	r2, [pc, #88]	; (8000380 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	2403      	movs	r4, #3
 800032a:	4694      	mov	ip, r2
 800032c:	22ff      	movs	r2, #255	; 0xff
 800032e:	0883      	lsrs	r3, r0, #2
 8000330:	4020      	ands	r0, r4
 8000332:	0014      	movs	r4, r2
 8000334:	26c0      	movs	r6, #192	; 0xc0
 8000336:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000338:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033a:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800033c:	400a      	ands	r2, r1
 800033e:	4082      	lsls	r2, r0
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000344:	00b6      	lsls	r6, r6, #2
 8000346:	599d      	ldr	r5, [r3, r6]
 8000348:	43a5      	bics	r5, r4
 800034a:	432a      	orrs	r2, r5
 800034c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000352:	24ff      	movs	r4, #255	; 0xff
 8000354:	4694      	mov	ip, r2
 8000356:	230f      	movs	r3, #15
 8000358:	2203      	movs	r2, #3
 800035a:	b2c0      	uxtb	r0, r0
 800035c:	4003      	ands	r3, r0
 800035e:	4010      	ands	r0, r2
 8000360:	0022      	movs	r2, r4
 8000362:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000364:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000366:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000368:	400c      	ands	r4, r1
 800036a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800036c:	3b08      	subs	r3, #8
 800036e:	089b      	lsrs	r3, r3, #2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4463      	add	r3, ip
 8000374:	69dd      	ldr	r5, [r3, #28]
 8000376:	4395      	bics	r5, r2
 8000378:	432c      	orrs	r4, r5
 800037a:	61dc      	str	r4, [r3, #28]
 800037c:	e7e7      	b.n	800034e <HAL_NVIC_SetPriority+0x2e>
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	e000e100 	.word	0xe000e100
 8000384:	e000ed00 	.word	0xe000ed00

08000388 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000388:	231f      	movs	r3, #31
 800038a:	4018      	ands	r0, r3
 800038c:	3b1e      	subs	r3, #30
 800038e:	4083      	lsls	r3, r0
 8000390:	4a01      	ldr	r2, [pc, #4]	; (8000398 <HAL_NVIC_EnableIRQ+0x10>)
 8000392:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000394:	4770      	bx	lr
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	e000e100 	.word	0xe000e100

0800039c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800039c:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <HAL_SYSTICK_Config+0x2c>)
 800039e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80003a0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d80e      	bhi.n	80003c4 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a6:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ac:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ae:	6a03      	ldr	r3, [r0, #32]
 80003b0:	0609      	lsls	r1, r1, #24
 80003b2:	021b      	lsls	r3, r3, #8
 80003b4:	0a1b      	lsrs	r3, r3, #8
 80003b6:	430b      	orrs	r3, r1
 80003b8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ba:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003bc:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003be:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003c0:	3307      	adds	r3, #7
 80003c2:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003c4:	4770      	bx	lr
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	00ffffff 	.word	0x00ffffff
 80003cc:	e000e010 	.word	0xe000e010
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003d4:	231f      	movs	r3, #31
 80003d6:	22c0      	movs	r2, #192	; 0xc0
 80003d8:	4018      	ands	r0, r3
 80003da:	3b1e      	subs	r3, #30
 80003dc:	4083      	lsls	r3, r0
 80003de:	4902      	ldr	r1, [pc, #8]	; (80003e8 <HAL_NVIC_ClearPendingIRQ+0x14>)
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 80003e4:	4770      	bx	lr
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	e000e100 	.word	0xe000e100

080003ec <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 80003ee:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003f0:	2804      	cmp	r0, #4
 80003f2:	d003      	beq.n	80003fc <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003f4:	2104      	movs	r1, #4
 80003f6:	438b      	bics	r3, r1
 80003f8:	6013      	str	r3, [r2, #0]
  }
}
 80003fa:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003fc:	4318      	orrs	r0, r3
 80003fe:	6010      	str	r0, [r2, #0]
 8000400:	e7fb      	b.n	80003fa <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	e000e010 	.word	0xe000e010

08000408 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <HAL_SYSTICK_IRQHandler>:
{
 800040c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800040e:	f7ff fffb 	bl	8000408 <HAL_SYSTICK_Callback>
}
 8000412:	bd10      	pop	{r4, pc}

08000414 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000414:	2200      	movs	r2, #0

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000416:	2102      	movs	r1, #2
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <FLASH_PageErase+0x1c>)
 800041a:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <FLASH_PageErase+0x20>)
 800041e:	691a      	ldr	r2, [r3, #16]
 8000420:	430a      	orrs	r2, r1
 8000422:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000424:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000426:	691a      	ldr	r2, [r3, #16]
 8000428:	313e      	adds	r1, #62	; 0x3e
 800042a:	430a      	orrs	r2, r1
 800042c:	611a      	str	r2, [r3, #16]
}
 800042e:	4770      	bx	lr
 8000430:	200009f0 	.word	0x200009f0
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000438:	b570      	push	{r4, r5, r6, lr}
 800043a:	1e04      	subs	r4, r0, #0
  uint32_t i = 0U;

  uint32_t wInterrupt_Mask = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800043c:	d045      	beq.n	80004ca <HAL_PCD_Init+0x92>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800043e:	23ea      	movs	r3, #234	; 0xea
 8000440:	33ff      	adds	r3, #255	; 0xff
 8000442:	5cc3      	ldrb	r3, [r0, r3]
 8000444:	b2db      	uxtb	r3, r3
 8000446:	2b00      	cmp	r3, #0
 8000448:	d039      	beq.n	80004be <HAL_PCD_Init+0x86>
  
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800044a:	23ea      	movs	r3, #234	; 0xea
 800044c:	2203      	movs	r2, #3
 800044e:	33ff      	adds	r3, #255	; 0xff
 8000450:	54e2      	strb	r2, [r4, r3]
 8000452:	0023      	movs	r3, r4
 
 /* Init endpoints structures */
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000454:	6860      	ldr	r0, [r4, #4]
 8000456:	3328      	adds	r3, #40	; 0x28
 8000458:	2200      	movs	r2, #0
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 800045a:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 800045c:	2100      	movs	r1, #0
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 800045e:	2800      	cmp	r0, #0
 8000460:	d018      	beq.n	8000494 <HAL_PCD_Init+0x5c>
   hpcd->IN_ep[i].num = i;
 8000462:	701a      	strb	r2, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000464:	3201      	adds	r2, #1
   hpcd->IN_ep[i].is_in = 1U;
 8000466:	705d      	strb	r5, [r3, #1]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8000468:	70d9      	strb	r1, [r3, #3]
   hpcd->IN_ep[i].maxpacket =  0U;
 800046a:	60d9      	str	r1, [r3, #12]
   hpcd->IN_ep[i].xfer_buff = 0U;
 800046c:	6119      	str	r1, [r3, #16]
   hpcd->IN_ep[i].xfer_len = 0U;
 800046e:	6159      	str	r1, [r3, #20]
 8000470:	331c      	adds	r3, #28
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000472:	4282      	cmp	r2, r0
 8000474:	d1f5      	bne.n	8000462 <HAL_PCD_Init+0x2a>
 8000476:	0023      	movs	r3, r4
 8000478:	2000      	movs	r0, #0
 }
 
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0U;
 800047a:	2100      	movs	r1, #0
 800047c:	3309      	adds	r3, #9
 800047e:	33ff      	adds	r3, #255	; 0xff
   hpcd->OUT_ep[i].num = i;
 8000480:	7018      	strb	r0, [r3, #0]
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000482:	3001      	adds	r0, #1
   hpcd->OUT_ep[i].is_in = 0U;
 8000484:	7059      	strb	r1, [r3, #1]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8000486:	70d9      	strb	r1, [r3, #3]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000488:	60d9      	str	r1, [r3, #12]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 800048a:	6119      	str	r1, [r3, #16]
   hpcd->OUT_ep[i].xfer_len = 0U;
 800048c:	6159      	str	r1, [r3, #20]
 800048e:	331c      	adds	r3, #28
 for (i = 0U; i < hpcd->Init.dev_endpoints ; i++)
 8000490:	4282      	cmp	r2, r0
 8000492:	d1f5      	bne.n	8000480 <HAL_PCD_Init+0x48>
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8000494:	2240      	movs	r2, #64	; 0x40
 8000496:	2101      	movs	r1, #1
 8000498:	6823      	ldr	r3, [r4, #0]
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 800049a:	2044      	movs	r0, #68	; 0x44
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800049c:	5299      	strh	r1, [r3, r2]
 hpcd->Instance->CNTR = 0;
 800049e:	2100      	movs	r1, #0
 80004a0:	5299      	strh	r1, [r3, r2]
 hpcd->Instance->ISTR = 0;
 80004a2:	5219      	strh	r1, [r3, r0]
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 80004a4:	300c      	adds	r0, #12
 80004a6:	5219      	strh	r1, [r3, r0]
  /*set wInterrupt_Mask global variable*/
 wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
   | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80004a8:	4909      	ldr	r1, [pc, #36]	; (80004d0 <HAL_PCD_Init+0x98>)
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;

 return HAL_OK;
 80004aa:	2000      	movs	r0, #0
  hpcd->Instance->CNTR = wInterrupt_Mask;
 80004ac:	5299      	strh	r1, [r3, r2]
  hpcd->USB_Address = 0U;
 80004ae:	2324      	movs	r3, #36	; 0x24
 80004b0:	2200      	movs	r2, #0
 80004b2:	54e2      	strb	r2, [r4, r3]
  hpcd->State= HAL_PCD_STATE_READY;
 80004b4:	23ea      	movs	r3, #234	; 0xea
 80004b6:	2201      	movs	r2, #1
 80004b8:	33ff      	adds	r3, #255	; 0xff
 80004ba:	54e2      	strb	r2, [r4, r3]
}
 80004bc:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 80004be:	22f4      	movs	r2, #244	; 0xf4
 80004c0:	0052      	lsls	r2, r2, #1
 80004c2:	5483      	strb	r3, [r0, r2]
    HAL_PCD_MspInit(hpcd);
 80004c4:	f003 fb64 	bl	8003b90 <HAL_PCD_MspInit>
 80004c8:	e7bf      	b.n	800044a <HAL_PCD_Init+0x12>
    return HAL_ERROR;
 80004ca:	2001      	movs	r0, #1
 80004cc:	e7f6      	b.n	80004bc <HAL_PCD_Init+0x84>
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	ffffbf00 	.word	0xffffbf00

080004d4 <HAL_PCD_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  hpcd->Instance->BCDR |= USB_BCDR_DPPU;
 80004d4:	2258      	movs	r2, #88	; 0x58
 80004d6:	6801      	ldr	r1, [r0, #0]
 80004d8:	2080      	movs	r0, #128	; 0x80
 80004da:	5a8b      	ldrh	r3, [r1, r2]
 80004dc:	0200      	lsls	r0, r0, #8
 80004de:	4303      	orrs	r3, r0
 80004e0:	528b      	strh	r3, [r1, r2]
  
  return HAL_OK;
}
 80004e2:	2000      	movs	r0, #0
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 80004e8:	22f4      	movs	r2, #244	; 0xf4
{
 80004ea:	b510      	push	{r4, lr}
   __HAL_LOCK(hpcd); 
 80004ec:	0052      	lsls	r2, r2, #1
 80004ee:	5c84      	ldrb	r4, [r0, r2]
{
 80004f0:	0003      	movs	r3, r0
   __HAL_LOCK(hpcd); 
 80004f2:	2002      	movs	r0, #2
 80004f4:	2c01      	cmp	r4, #1
 80004f6:	d00a      	beq.n	800050e <HAL_PCD_SetAddress+0x26>
 80004f8:	3801      	subs	r0, #1
 80004fa:	5498      	strb	r0, [r3, r2]

   if(address == 0U) 
 80004fc:	2900      	cmp	r1, #0
 80004fe:	d007      	beq.n	8000510 <HAL_PCD_SetAddress+0x28>
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8000500:	2224      	movs	r2, #36	; 0x24
 8000502:	5499      	strb	r1, [r3, r2]
   }

  __HAL_UNLOCK(hpcd);   
 8000504:	22f4      	movs	r2, #244	; 0xf4
 8000506:	2100      	movs	r1, #0
 8000508:	2000      	movs	r0, #0
 800050a:	0052      	lsls	r2, r2, #1
 800050c:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
}
 800050e:	bd10      	pop	{r4, pc}
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000510:	3a9d      	subs	r2, #157	; 0x9d
 8000512:	6818      	ldr	r0, [r3, #0]
 8000514:	3180      	adds	r1, #128	; 0x80
 8000516:	3aff      	subs	r2, #255	; 0xff
 8000518:	5281      	strh	r1, [r0, r2]
 800051a:	e7f3      	b.n	8000504 <HAL_PCD_SetAddress+0x1c>

0800051c <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800051e:	46c6      	mov	lr, r8
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000520:	b24d      	sxtb	r5, r1
{
 8000522:	b500      	push	{lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8000524:	2d00      	cmp	r5, #0
 8000526:	db5f      	blt.n	80005e8 <HAL_PCD_EP_Open+0xcc>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000528:	00cc      	lsls	r4, r1, #3
 800052a:	1a64      	subs	r4, r4, r1
 800052c:	00a4      	lsls	r4, r4, #2
 800052e:	3409      	adds	r4, #9
 8000530:	34ff      	adds	r4, #255	; 0xff
 8000532:	1904      	adds	r4, r0, r4
  }
  ep->num   = ep_addr & 0x7FU;
 8000534:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 8000536:	21f4      	movs	r1, #244	; 0xf4
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000538:	0fed      	lsrs	r5, r5, #31
  ep->type = ep_type;
 800053a:	70e3      	strb	r3, [r4, #3]
  ep->is_in = (0x80U & ep_addr) != 0U;
 800053c:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 800053e:	60e2      	str	r2, [r4, #12]
  __HAL_LOCK(hpcd); 
 8000540:	0049      	lsls	r1, r1, #1
 8000542:	5c45      	ldrb	r5, [r0, r1]
 8000544:	2302      	movs	r3, #2
 8000546:	2d01      	cmp	r5, #1
 8000548:	d04a      	beq.n	80005e0 <HAL_PCD_EP_Open+0xc4>
 800054a:	3b01      	subs	r3, #1
 800054c:	5443      	strb	r3, [r0, r1]

  /* initialize Endpoint */
  switch (ep->type)
 800054e:	78e3      	ldrb	r3, [r4, #3]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d05d      	beq.n	8000610 <HAL_PCD_EP_Open+0xf4>
 8000554:	2b00      	cmp	r3, #0
 8000556:	d100      	bne.n	800055a <HAL_PCD_EP_Open+0x3e>
 8000558:	e12e      	b.n	80007b8 <HAL_PCD_EP_Open+0x29c>
 800055a:	2b02      	cmp	r3, #2
 800055c:	d100      	bne.n	8000560 <HAL_PCD_EP_Open+0x44>
 800055e:	e122      	b.n	80007a6 <HAL_PCD_EP_Open+0x28a>
 8000560:	2b03      	cmp	r3, #3
 8000562:	d049      	beq.n	80005f8 <HAL_PCD_EP_Open+0xdc>
 8000564:	6803      	ldr	r3, [r0, #0]
    break;
  default:
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8000566:	7821      	ldrb	r1, [r4, #0]
 8000568:	4d9e      	ldr	r5, [pc, #632]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 800056a:	468c      	mov	ip, r1
 800056c:	008e      	lsls	r6, r1, #2
 800056e:	199e      	adds	r6, r3, r6
 8000570:	8831      	ldrh	r1, [r6, #0]
 8000572:	46a8      	mov	r8, r5
 8000574:	4029      	ands	r1, r5
 8000576:	4665      	mov	r5, ip
 8000578:	4f9b      	ldr	r7, [pc, #620]	; (80007e8 <HAL_PCD_EP_Open+0x2cc>)
 800057a:	432f      	orrs	r7, r5
 800057c:	4339      	orrs	r1, r7
 800057e:	8031      	strh	r1, [r6, #0]
  
  if (ep->doublebuffer == 0U) 
 8000580:	7aa1      	ldrb	r1, [r4, #10]
 8000582:	2900      	cmp	r1, #0
 8000584:	d150      	bne.n	8000628 <HAL_PCD_EP_Open+0x10c>
  {
    if (ep->is_in)
 8000586:	7861      	ldrb	r1, [r4, #1]
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <HAL_PCD_EP_Open+0x72>
 800058c:	e0d6      	b.n	800073c <HAL_PCD_EP_Open+0x220>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800058e:	2250      	movs	r2, #80	; 0x50
 8000590:	5a99      	ldrh	r1, [r3, r2]
 8000592:	7822      	ldrb	r2, [r4, #0]
 8000594:	2601      	movs	r6, #1
 8000596:	00d2      	lsls	r2, r2, #3
 8000598:	189a      	adds	r2, r3, r2
 800059a:	1852      	adds	r2, r2, r1
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	00c9      	lsls	r1, r1, #3
 80005a0:	468c      	mov	ip, r1
 80005a2:	88a1      	ldrh	r1, [r4, #4]
 80005a4:	4462      	add	r2, ip
 80005a6:	43b1      	bics	r1, r6
 80005a8:	8011      	strh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80005aa:	7822      	ldrb	r2, [r4, #0]
 80005ac:	0092      	lsls	r2, r2, #2
 80005ae:	189a      	adds	r2, r3, r2
 80005b0:	8811      	ldrh	r1, [r2, #0]
 80005b2:	064d      	lsls	r5, r1, #25
 80005b4:	d508      	bpl.n	80005c8 <HAL_PCD_EP_Open+0xac>
 80005b6:	4645      	mov	r5, r8
 80005b8:	400d      	ands	r5, r1
 80005ba:	498c      	ldr	r1, [pc, #560]	; (80007ec <HAL_PCD_EP_Open+0x2d0>)
 80005bc:	430d      	orrs	r5, r1
 80005be:	8015      	strh	r5, [r2, #0]
 80005c0:	7822      	ldrb	r2, [r4, #0]
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	189a      	adds	r2, r3, r2
 80005c6:	8811      	ldrh	r1, [r2, #0]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK) 
 80005c8:	4d89      	ldr	r5, [pc, #548]	; (80007f0 <HAL_PCD_EP_Open+0x2d4>)
 80005ca:	4029      	ands	r1, r5
 80005cc:	2520      	movs	r5, #32
 80005ce:	4069      	eors	r1, r5
 80005d0:	4d85      	ldr	r5, [pc, #532]	; (80007e8 <HAL_PCD_EP_Open+0x2cc>)
 80005d2:	4329      	orrs	r1, r5
 80005d4:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80005d6:	23f4      	movs	r3, #244	; 0xf4
 80005d8:	2200      	movs	r2, #0
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	54c2      	strb	r2, [r0, r3]
  return ret;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	bc04      	pop	{r2}
 80005e4:	4690      	mov	r8, r2
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	247f      	movs	r4, #127	; 0x7f
 80005ea:	4021      	ands	r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005ec:	00cc      	lsls	r4, r1, #3
 80005ee:	1a64      	subs	r4, r4, r1
 80005f0:	00a4      	lsls	r4, r4, #2
 80005f2:	3428      	adds	r4, #40	; 0x28
 80005f4:	1904      	adds	r4, r0, r4
 80005f6:	e79d      	b.n	8000534 <HAL_PCD_EP_Open+0x18>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80005f8:	7821      	ldrb	r1, [r4, #0]
 80005fa:	6803      	ldr	r3, [r0, #0]
 80005fc:	0089      	lsls	r1, r1, #2
 80005fe:	1859      	adds	r1, r3, r1
 8000600:	880d      	ldrh	r5, [r1, #0]
 8000602:	4e7c      	ldr	r6, [pc, #496]	; (80007f4 <HAL_PCD_EP_Open+0x2d8>)
 8000604:	402e      	ands	r6, r5
 8000606:	25c0      	movs	r5, #192	; 0xc0
 8000608:	00ed      	lsls	r5, r5, #3
 800060a:	4335      	orrs	r5, r6
 800060c:	800d      	strh	r5, [r1, #0]
    break;
 800060e:	e7aa      	b.n	8000566 <HAL_PCD_EP_Open+0x4a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8000610:	7821      	ldrb	r1, [r4, #0]
 8000612:	6803      	ldr	r3, [r0, #0]
 8000614:	0089      	lsls	r1, r1, #2
 8000616:	1859      	adds	r1, r3, r1
 8000618:	880d      	ldrh	r5, [r1, #0]
 800061a:	4e76      	ldr	r6, [pc, #472]	; (80007f4 <HAL_PCD_EP_Open+0x2d8>)
 800061c:	402e      	ands	r6, r5
 800061e:	2580      	movs	r5, #128	; 0x80
 8000620:	00ed      	lsls	r5, r5, #3
 8000622:	4335      	orrs	r5, r6
 8000624:	800d      	strh	r5, [r1, #0]
    break;
 8000626:	e79e      	b.n	8000566 <HAL_PCD_EP_Open+0x4a>
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 8000628:	2750      	movs	r7, #80	; 0x50
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800062a:	7822      	ldrb	r2, [r4, #0]
 800062c:	4e72      	ldr	r6, [pc, #456]	; (80007f8 <HAL_PCD_EP_Open+0x2dc>)
 800062e:	0092      	lsls	r2, r2, #2
 8000630:	189a      	adds	r2, r3, r2
 8000632:	8811      	ldrh	r1, [r2, #0]
 8000634:	400e      	ands	r6, r1
 8000636:	4971      	ldr	r1, [pc, #452]	; (80007fc <HAL_PCD_EP_Open+0x2e0>)
 8000638:	4331      	orrs	r1, r6
 800063a:	8011      	strh	r1, [r2, #0]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1)
 800063c:	7822      	ldrb	r2, [r4, #0]
 800063e:	5bd9      	ldrh	r1, [r3, r7]
 8000640:	00d2      	lsls	r2, r2, #3
 8000642:	1852      	adds	r2, r2, r1
 8000644:	2180      	movs	r1, #128	; 0x80
 8000646:	00c9      	lsls	r1, r1, #3
 8000648:	468c      	mov	ip, r1
 800064a:	2601      	movs	r6, #1
 800064c:	88e1      	ldrh	r1, [r4, #6]
 800064e:	18d2      	adds	r2, r2, r3
 8000650:	4462      	add	r2, ip
 8000652:	43b1      	bics	r1, r6
 8000654:	8011      	strh	r1, [r2, #0]
 8000656:	7822      	ldrb	r2, [r4, #0]
 8000658:	5bd9      	ldrh	r1, [r3, r7]
 800065a:	00d2      	lsls	r2, r2, #3
 800065c:	18d2      	adds	r2, r2, r3
 800065e:	1852      	adds	r2, r2, r1
 8000660:	4967      	ldr	r1, [pc, #412]	; (8000800 <HAL_PCD_EP_Open+0x2e4>)
 8000662:	468c      	mov	ip, r1
 8000664:	8921      	ldrh	r1, [r4, #8]
 8000666:	4462      	add	r2, ip
 8000668:	43b1      	bics	r1, r6
 800066a:	8011      	strh	r1, [r2, #0]
    if (ep->is_in==0U)
 800066c:	7862      	ldrb	r2, [r4, #1]
 800066e:	2a00      	cmp	r2, #0
 8000670:	d133      	bne.n	80006da <HAL_PCD_EP_Open+0x1be>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000672:	7822      	ldrb	r2, [r4, #0]
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	189a      	adds	r2, r3, r2
 8000678:	8811      	ldrh	r1, [r2, #0]
 800067a:	044d      	lsls	r5, r1, #17
 800067c:	d508      	bpl.n	8000690 <HAL_PCD_EP_Open+0x174>
 800067e:	4645      	mov	r5, r8
 8000680:	400d      	ands	r5, r1
 8000682:	4960      	ldr	r1, [pc, #384]	; (8000804 <HAL_PCD_EP_Open+0x2e8>)
 8000684:	430d      	orrs	r5, r1
 8000686:	8015      	strh	r5, [r2, #0]
 8000688:	7822      	ldrb	r2, [r4, #0]
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	189a      	adds	r2, r3, r2
 800068e:	8811      	ldrh	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000690:	064d      	lsls	r5, r1, #25
 8000692:	d508      	bpl.n	80006a6 <HAL_PCD_EP_Open+0x18a>
 8000694:	4d53      	ldr	r5, [pc, #332]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 8000696:	4029      	ands	r1, r5
 8000698:	4d54      	ldr	r5, [pc, #336]	; (80007ec <HAL_PCD_EP_Open+0x2d0>)
 800069a:	4329      	orrs	r1, r5
 800069c:	8011      	strh	r1, [r2, #0]
 800069e:	7822      	ldrb	r2, [r4, #0]
 80006a0:	0092      	lsls	r2, r2, #2
 80006a2:	189a      	adds	r2, r3, r2
 80006a4:	8811      	ldrh	r1, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80006a6:	4d4f      	ldr	r5, [pc, #316]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 80006a8:	4029      	ands	r1, r5
 80006aa:	4d50      	ldr	r5, [pc, #320]	; (80007ec <HAL_PCD_EP_Open+0x2d0>)
 80006ac:	4329      	orrs	r1, r5
 80006ae:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80006b0:	7822      	ldrb	r2, [r4, #0]
 80006b2:	4d55      	ldr	r5, [pc, #340]	; (8000808 <HAL_PCD_EP_Open+0x2ec>)
 80006b4:	0092      	lsls	r2, r2, #2
 80006b6:	189a      	adds	r2, r3, r2
 80006b8:	8811      	ldrh	r1, [r2, #0]
 80006ba:	400d      	ands	r5, r1
 80006bc:	21c0      	movs	r1, #192	; 0xc0
 80006be:	0189      	lsls	r1, r1, #6
 80006c0:	4069      	eors	r1, r5
 80006c2:	4d49      	ldr	r5, [pc, #292]	; (80007e8 <HAL_PCD_EP_Open+0x2cc>)
 80006c4:	4329      	orrs	r1, r5
 80006c6:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80006c8:	7822      	ldrb	r2, [r4, #0]
 80006ca:	4949      	ldr	r1, [pc, #292]	; (80007f0 <HAL_PCD_EP_Open+0x2d4>)
 80006cc:	0092      	lsls	r2, r2, #2
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	881a      	ldrh	r2, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	4315      	orrs	r5, r2
 80006d6:	801d      	strh	r5, [r3, #0]
 80006d8:	e77d      	b.n	80005d6 <HAL_PCD_EP_Open+0xba>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 80006da:	7822      	ldrb	r2, [r4, #0]
 80006dc:	0091      	lsls	r1, r2, #2
 80006de:	1859      	adds	r1, r3, r1
 80006e0:	880e      	ldrh	r6, [r1, #0]
 80006e2:	0475      	lsls	r5, r6, #17
 80006e4:	d505      	bpl.n	80006f2 <HAL_PCD_EP_Open+0x1d6>
 80006e6:	4645      	mov	r5, r8
 80006e8:	4035      	ands	r5, r6
 80006ea:	4e46      	ldr	r6, [pc, #280]	; (8000804 <HAL_PCD_EP_Open+0x2e8>)
 80006ec:	4335      	orrs	r5, r6
 80006ee:	800d      	strh	r5, [r1, #0]
 80006f0:	7822      	ldrb	r2, [r4, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80006f2:	0091      	lsls	r1, r2, #2
 80006f4:	1859      	adds	r1, r3, r1
 80006f6:	880d      	ldrh	r5, [r1, #0]
 80006f8:	066e      	lsls	r6, r5, #25
 80006fa:	d505      	bpl.n	8000708 <HAL_PCD_EP_Open+0x1ec>
 80006fc:	4a39      	ldr	r2, [pc, #228]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 80006fe:	4015      	ands	r5, r2
 8000700:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <HAL_PCD_EP_Open+0x2d0>)
 8000702:	4315      	orrs	r5, r2
 8000704:	800d      	strh	r5, [r1, #0]
 8000706:	7822      	ldrb	r2, [r4, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000708:	0092      	lsls	r2, r2, #2
 800070a:	189a      	adds	r2, r3, r2
 800070c:	8811      	ldrh	r1, [r2, #0]
 800070e:	4d35      	ldr	r5, [pc, #212]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 8000710:	400d      	ands	r5, r1
 8000712:	493c      	ldr	r1, [pc, #240]	; (8000804 <HAL_PCD_EP_Open+0x2e8>)
 8000714:	4329      	orrs	r1, r5
 8000716:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000718:	7822      	ldrb	r2, [r4, #0]
 800071a:	4d35      	ldr	r5, [pc, #212]	; (80007f0 <HAL_PCD_EP_Open+0x2d4>)
 800071c:	0092      	lsls	r2, r2, #2
 800071e:	189a      	adds	r2, r3, r2
 8000720:	8811      	ldrh	r1, [r2, #0]
 8000722:	4029      	ands	r1, r5
 8000724:	4d30      	ldr	r5, [pc, #192]	; (80007e8 <HAL_PCD_EP_Open+0x2cc>)
 8000726:	4329      	orrs	r1, r5
 8000728:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800072a:	7822      	ldrb	r2, [r4, #0]
 800072c:	4936      	ldr	r1, [pc, #216]	; (8000808 <HAL_PCD_EP_Open+0x2ec>)
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	189b      	adds	r3, r3, r2
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	400a      	ands	r2, r1
 8000736:	4315      	orrs	r5, r2
 8000738:	801d      	strh	r5, [r3, #0]
 800073a:	e74c      	b.n	80005d6 <HAL_PCD_EP_Open+0xba>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 800073c:	2650      	movs	r6, #80	; 0x50
 800073e:	7821      	ldrb	r1, [r4, #0]
 8000740:	5b9d      	ldrh	r5, [r3, r6]
 8000742:	00c9      	lsls	r1, r1, #3
 8000744:	1949      	adds	r1, r1, r5
 8000746:	4d2e      	ldr	r5, [pc, #184]	; (8000800 <HAL_PCD_EP_Open+0x2e4>)
 8000748:	2701      	movs	r7, #1
 800074a:	46ac      	mov	ip, r5
 800074c:	88a5      	ldrh	r5, [r4, #4]
 800074e:	18c9      	adds	r1, r1, r3
 8000750:	4461      	add	r1, ip
 8000752:	43bd      	bics	r5, r7
 8000754:	800d      	strh	r5, [r1, #0]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 8000756:	7821      	ldrb	r1, [r4, #0]
 8000758:	5b9d      	ldrh	r5, [r3, r6]
 800075a:	00c9      	lsls	r1, r1, #3
 800075c:	1949      	adds	r1, r1, r5
 800075e:	4d2b      	ldr	r5, [pc, #172]	; (800080c <HAL_PCD_EP_Open+0x2f0>)
 8000760:	195d      	adds	r5, r3, r5
 8000762:	1949      	adds	r1, r1, r5
 8000764:	2a3e      	cmp	r2, #62	; 0x3e
 8000766:	d933      	bls.n	80007d0 <HAL_PCD_EP_Open+0x2b4>
 8000768:	0955      	lsrs	r5, r2, #5
 800076a:	06d2      	lsls	r2, r2, #27
 800076c:	d037      	beq.n	80007de <HAL_PCD_EP_Open+0x2c2>
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <HAL_PCD_EP_Open+0x2f4>)
 8000770:	02ad      	lsls	r5, r5, #10
 8000772:	4315      	orrs	r5, r2
 8000774:	800d      	strh	r5, [r1, #0]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000776:	7822      	ldrb	r2, [r4, #0]
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	189a      	adds	r2, r3, r2
 800077c:	8811      	ldrh	r1, [r2, #0]
 800077e:	044d      	lsls	r5, r1, #17
 8000780:	d508      	bpl.n	8000794 <HAL_PCD_EP_Open+0x278>
 8000782:	4d18      	ldr	r5, [pc, #96]	; (80007e4 <HAL_PCD_EP_Open+0x2c8>)
 8000784:	4029      	ands	r1, r5
 8000786:	4d1f      	ldr	r5, [pc, #124]	; (8000804 <HAL_PCD_EP_Open+0x2e8>)
 8000788:	4329      	orrs	r1, r5
 800078a:	8011      	strh	r1, [r2, #0]
 800078c:	7822      	ldrb	r2, [r4, #0]
 800078e:	0092      	lsls	r2, r2, #2
 8000790:	189a      	adds	r2, r3, r2
 8000792:	8811      	ldrh	r1, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_PCD_EP_Open+0x2ec>)
 8000796:	4019      	ands	r1, r3
 8000798:	23c0      	movs	r3, #192	; 0xc0
 800079a:	019b      	lsls	r3, r3, #6
 800079c:	404b      	eors	r3, r1
 800079e:	4912      	ldr	r1, [pc, #72]	; (80007e8 <HAL_PCD_EP_Open+0x2cc>)
 80007a0:	4319      	orrs	r1, r3
 80007a2:	8011      	strh	r1, [r2, #0]
 80007a4:	e717      	b.n	80005d6 <HAL_PCD_EP_Open+0xba>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80007a6:	7821      	ldrb	r1, [r4, #0]
 80007a8:	6803      	ldr	r3, [r0, #0]
 80007aa:	0089      	lsls	r1, r1, #2
 80007ac:	1859      	adds	r1, r3, r1
 80007ae:	880d      	ldrh	r5, [r1, #0]
 80007b0:	4e10      	ldr	r6, [pc, #64]	; (80007f4 <HAL_PCD_EP_Open+0x2d8>)
 80007b2:	4035      	ands	r5, r6
 80007b4:	800d      	strh	r5, [r1, #0]
    break;
 80007b6:	e6d6      	b.n	8000566 <HAL_PCD_EP_Open+0x4a>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80007b8:	7821      	ldrb	r1, [r4, #0]
 80007ba:	6803      	ldr	r3, [r0, #0]
 80007bc:	0089      	lsls	r1, r1, #2
 80007be:	1859      	adds	r1, r3, r1
 80007c0:	880d      	ldrh	r5, [r1, #0]
 80007c2:	4e0c      	ldr	r6, [pc, #48]	; (80007f4 <HAL_PCD_EP_Open+0x2d8>)
 80007c4:	402e      	ands	r6, r5
 80007c6:	2580      	movs	r5, #128	; 0x80
 80007c8:	00ad      	lsls	r5, r5, #2
 80007ca:	4335      	orrs	r5, r6
 80007cc:	800d      	strh	r5, [r1, #0]
    break;
 80007ce:	e6ca      	b.n	8000566 <HAL_PCD_EP_Open+0x4a>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket)
 80007d0:	0855      	lsrs	r5, r2, #1
 80007d2:	4217      	tst	r7, r2
 80007d4:	d000      	beq.n	80007d8 <HAL_PCD_EP_Open+0x2bc>
 80007d6:	3501      	adds	r5, #1
 80007d8:	02ad      	lsls	r5, r5, #10
 80007da:	800d      	strh	r5, [r1, #0]
 80007dc:	e7cb      	b.n	8000776 <HAL_PCD_EP_Open+0x25a>
 80007de:	3d01      	subs	r5, #1
 80007e0:	b2ad      	uxth	r5, r5
 80007e2:	e7c4      	b.n	800076e <HAL_PCD_EP_Open+0x252>
 80007e4:	00000f0f 	.word	0x00000f0f
 80007e8:	ffff8080 	.word	0xffff8080
 80007ec:	ffff80c0 	.word	0xffff80c0
 80007f0:	ffff8fbf 	.word	0xffff8fbf
 80007f4:	ffff898f 	.word	0xffff898f
 80007f8:	00000e0f 	.word	0x00000e0f
 80007fc:	ffff8180 	.word	0xffff8180
 8000800:	00000404 	.word	0x00000404
 8000804:	ffffc080 	.word	0xffffc080
 8000808:	ffffbf8f 	.word	0xffffbf8f
 800080c:	00000406 	.word	0x00000406
 8000810:	ffff8000 	.word	0xffff8000

08000814 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8000814:	b24a      	sxtb	r2, r1
{  
 8000816:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80U) == 0x80U)
 8000818:	2a00      	cmp	r2, #0
 800081a:	da00      	bge.n	800081e <HAL_PCD_EP_Close+0xa>
 800081c:	e066      	b.n	80008ec <HAL_PCD_EP_Close+0xd8>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800081e:	00cb      	lsls	r3, r1, #3
 8000820:	1a5b      	subs	r3, r3, r1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	3309      	adds	r3, #9
 8000826:	33ff      	adds	r3, #255	; 0xff
 8000828:	18c3      	adds	r3, r0, r3
  }
  ep->num   = ep_addr & 0x7FU;
 800082a:	7019      	strb	r1, [r3, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
  
  __HAL_LOCK(hpcd); 
 800082c:	21f4      	movs	r1, #244	; 0xf4
  ep->is_in = (0x80U & ep_addr) != 0U;
 800082e:	0fd2      	lsrs	r2, r2, #31
 8000830:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8000832:	0049      	lsls	r1, r1, #1
 8000834:	5c44      	ldrb	r4, [r0, r1]
 8000836:	2202      	movs	r2, #2
 8000838:	2c01      	cmp	r4, #1
 800083a:	d020      	beq.n	800087e <HAL_PCD_EP_Close+0x6a>
 800083c:	3a01      	subs	r2, #1
 800083e:	5442      	strb	r2, [r0, r1]

  if (ep->doublebuffer == 0U) 
 8000840:	7a9a      	ldrb	r2, [r3, #10]
 8000842:	2a00      	cmp	r2, #0
 8000844:	d11d      	bne.n	8000882 <HAL_PCD_EP_Close+0x6e>
  {
    if (ep->is_in)
 8000846:	785a      	ldrb	r2, [r3, #1]
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8000848:	6804      	ldr	r4, [r0, #0]
    if (ep->is_in)
 800084a:	2a00      	cmp	r2, #0
 800084c:	d156      	bne.n	80008fc <HAL_PCD_EP_Close+0xe8>
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	0092      	lsls	r2, r2, #2
 8000852:	18a2      	adds	r2, r4, r2
 8000854:	8811      	ldrh	r1, [r2, #0]
 8000856:	044d      	lsls	r5, r1, #17
 8000858:	d508      	bpl.n	800086c <HAL_PCD_EP_Close+0x58>
 800085a:	4d4b      	ldr	r5, [pc, #300]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 800085c:	4029      	ands	r1, r5
 800085e:	4d4b      	ldr	r5, [pc, #300]	; (800098c <HAL_PCD_EP_Close+0x178>)
 8000860:	4329      	orrs	r1, r5
 8000862:	8011      	strh	r1, [r2, #0]
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	0092      	lsls	r2, r2, #2
 8000868:	18a2      	adds	r2, r4, r2
 800086a:	8811      	ldrh	r1, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 800086c:	4b48      	ldr	r3, [pc, #288]	; (8000990 <HAL_PCD_EP_Close+0x17c>)
 800086e:	4019      	ands	r1, r3
 8000870:	4b48      	ldr	r3, [pc, #288]	; (8000994 <HAL_PCD_EP_Close+0x180>)
 8000872:	4319      	orrs	r1, r3
 8000874:	8011      	strh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8000876:	23f4      	movs	r3, #244	; 0xf4
 8000878:	2200      	movs	r2, #0
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
}
 800087e:	0010      	movs	r0, r2
 8000880:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->is_in==0U)
 8000882:	785a      	ldrb	r2, [r3, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000884:	6801      	ldr	r1, [r0, #0]
    if (ep->is_in==0U)
 8000886:	2a00      	cmp	r2, #0
 8000888:	d14d      	bne.n	8000926 <HAL_PCD_EP_Close+0x112>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	0094      	lsls	r4, r2, #2
 800088e:	190c      	adds	r4, r1, r4
 8000890:	8825      	ldrh	r5, [r4, #0]
 8000892:	046e      	lsls	r6, r5, #17
 8000894:	d505      	bpl.n	80008a2 <HAL_PCD_EP_Close+0x8e>
 8000896:	4a3c      	ldr	r2, [pc, #240]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 8000898:	4015      	ands	r5, r2
 800089a:	4a3c      	ldr	r2, [pc, #240]	; (800098c <HAL_PCD_EP_Close+0x178>)
 800089c:	4315      	orrs	r5, r2
 800089e:	8025      	strh	r5, [r4, #0]
 80008a0:	781a      	ldrb	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	188a      	adds	r2, r1, r2
 80008a6:	8814      	ldrh	r4, [r2, #0]
 80008a8:	0665      	lsls	r5, r4, #25
 80008aa:	d508      	bpl.n	80008be <HAL_PCD_EP_Close+0xaa>
 80008ac:	4d36      	ldr	r5, [pc, #216]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 80008ae:	402c      	ands	r4, r5
 80008b0:	4d39      	ldr	r5, [pc, #228]	; (8000998 <HAL_PCD_EP_Close+0x184>)
 80008b2:	432c      	orrs	r4, r5
 80008b4:	8014      	strh	r4, [r2, #0]
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	0092      	lsls	r2, r2, #2
 80008ba:	188a      	adds	r2, r1, r2
 80008bc:	8814      	ldrh	r4, [r2, #0]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80008be:	4d32      	ldr	r5, [pc, #200]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 80008c0:	402c      	ands	r4, r5
 80008c2:	4d35      	ldr	r5, [pc, #212]	; (8000998 <HAL_PCD_EP_Close+0x184>)
 80008c4:	432c      	orrs	r4, r5
 80008c6:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4d31      	ldr	r5, [pc, #196]	; (8000990 <HAL_PCD_EP_Close+0x17c>)
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	188a      	adds	r2, r1, r2
 80008d0:	8814      	ldrh	r4, [r2, #0]
 80008d2:	402c      	ands	r4, r5
 80008d4:	4d2f      	ldr	r5, [pc, #188]	; (8000994 <HAL_PCD_EP_Close+0x180>)
 80008d6:	432c      	orrs	r4, r5
 80008d8:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	18cb      	adds	r3, r1, r3
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	492e      	ldr	r1, [pc, #184]	; (800099c <HAL_PCD_EP_Close+0x188>)
 80008e4:	400a      	ands	r2, r1
 80008e6:	4315      	orrs	r5, r2
 80008e8:	801d      	strh	r5, [r3, #0]
 80008ea:	e7c4      	b.n	8000876 <HAL_PCD_EP_Close+0x62>
 80008ec:	237f      	movs	r3, #127	; 0x7f
 80008ee:	4019      	ands	r1, r3
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80008f0:	00cb      	lsls	r3, r1, #3
 80008f2:	1a5b      	subs	r3, r3, r1
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	3328      	adds	r3, #40	; 0x28
 80008f8:	18c3      	adds	r3, r0, r3
 80008fa:	e796      	b.n	800082a <HAL_PCD_EP_Close+0x16>
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	0092      	lsls	r2, r2, #2
 8000900:	18a2      	adds	r2, r4, r2
 8000902:	8811      	ldrh	r1, [r2, #0]
 8000904:	064d      	lsls	r5, r1, #25
 8000906:	d508      	bpl.n	800091a <HAL_PCD_EP_Close+0x106>
 8000908:	4d1f      	ldr	r5, [pc, #124]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 800090a:	4029      	ands	r1, r5
 800090c:	4d22      	ldr	r5, [pc, #136]	; (8000998 <HAL_PCD_EP_Close+0x184>)
 800090e:	4329      	orrs	r1, r5
 8000910:	8011      	strh	r1, [r2, #0]
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	0092      	lsls	r2, r2, #2
 8000916:	18a2      	adds	r2, r4, r2
 8000918:	8811      	ldrh	r1, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_PCD_EP_Close+0x188>)
 800091c:	4019      	ands	r1, r3
 800091e:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <HAL_PCD_EP_Close+0x180>)
 8000920:	4319      	orrs	r1, r3
 8000922:	8011      	strh	r1, [r2, #0]
 8000924:	e7a7      	b.n	8000876 <HAL_PCD_EP_Close+0x62>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	0094      	lsls	r4, r2, #2
 800092a:	190c      	adds	r4, r1, r4
 800092c:	8825      	ldrh	r5, [r4, #0]
 800092e:	046e      	lsls	r6, r5, #17
 8000930:	d505      	bpl.n	800093e <HAL_PCD_EP_Close+0x12a>
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 8000934:	4015      	ands	r5, r2
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <HAL_PCD_EP_Close+0x178>)
 8000938:	4315      	orrs	r5, r2
 800093a:	8025      	strh	r5, [r4, #0]
 800093c:	781a      	ldrb	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800093e:	0094      	lsls	r4, r2, #2
 8000940:	190c      	adds	r4, r1, r4
 8000942:	8825      	ldrh	r5, [r4, #0]
 8000944:	066e      	lsls	r6, r5, #25
 8000946:	d505      	bpl.n	8000954 <HAL_PCD_EP_Close+0x140>
 8000948:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 800094a:	4015      	ands	r5, r2
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <HAL_PCD_EP_Close+0x184>)
 800094e:	4315      	orrs	r5, r2
 8000950:	8025      	strh	r5, [r4, #0]
 8000952:	781a      	ldrb	r2, [r3, #0]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	188a      	adds	r2, r1, r2
 8000958:	8814      	ldrh	r4, [r2, #0]
 800095a:	4d0b      	ldr	r5, [pc, #44]	; (8000988 <HAL_PCD_EP_Close+0x174>)
 800095c:	4025      	ands	r5, r4
 800095e:	4c0b      	ldr	r4, [pc, #44]	; (800098c <HAL_PCD_EP_Close+0x178>)
 8000960:	432c      	orrs	r4, r5
 8000962:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	4d0d      	ldr	r5, [pc, #52]	; (800099c <HAL_PCD_EP_Close+0x188>)
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	188a      	adds	r2, r1, r2
 800096c:	8814      	ldrh	r4, [r2, #0]
 800096e:	402c      	ands	r4, r5
 8000970:	4d08      	ldr	r5, [pc, #32]	; (8000994 <HAL_PCD_EP_Close+0x180>)
 8000972:	432c      	orrs	r4, r5
 8000974:	8014      	strh	r4, [r2, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	18cb      	adds	r3, r1, r3
 800097c:	881a      	ldrh	r2, [r3, #0]
 800097e:	4904      	ldr	r1, [pc, #16]	; (8000990 <HAL_PCD_EP_Close+0x17c>)
 8000980:	400a      	ands	r2, r1
 8000982:	4315      	orrs	r5, r2
 8000984:	801d      	strh	r5, [r3, #0]
 8000986:	e776      	b.n	8000876 <HAL_PCD_EP_Close+0x62>
 8000988:	00000f0f 	.word	0x00000f0f
 800098c:	ffffc080 	.word	0xffffc080
 8000990:	ffffbf8f 	.word	0xffffbf8f
 8000994:	ffff8080 	.word	0xffff8080
 8000998:	ffff80c0 	.word	0xffff80c0
 800099c:	ffff8fbf 	.word	0xffff8fbf

080009a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	247f      	movs	r4, #127	; 0x7f
 80009a4:	4645      	mov	r5, r8
 80009a6:	4657      	mov	r7, sl
 80009a8:	464e      	mov	r6, r9
 80009aa:	46de      	mov	lr, fp
 80009ac:	4021      	ands	r1, r4
 80009ae:	b5e0      	push	{r5, r6, r7, lr}
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80009b0:	00cd      	lsls	r5, r1, #3
 80009b2:	1a6c      	subs	r4, r5, r1
 80009b4:	00a4      	lsls	r4, r4, #2
 80009b6:	1904      	adds	r4, r0, r4
 80009b8:	0026      	movs	r6, r4
  ep->xfer_len = len;
 80009ba:	0027      	movs	r7, r4
  ep->xfer_buff = pBuf;  
 80009bc:	3619      	adds	r6, #25
  ep->xfer_len = len;
 80009be:	371d      	adds	r7, #29
  ep->xfer_buff = pBuf;  
 80009c0:	36ff      	adds	r6, #255	; 0xff
  ep->xfer_len = len;
 80009c2:	37ff      	adds	r7, #255	; 0xff
  ep->xfer_buff = pBuf;  
 80009c4:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 80009c6:	603b      	str	r3, [r7, #0]
  ep->xfer_count = 0U;
 80009c8:	0023      	movs	r3, r4
 80009ca:	2600      	movs	r6, #0
 80009cc:	3321      	adds	r3, #33	; 0x21
 80009ce:	33ff      	adds	r3, #255	; 0xff
 80009d0:	601e      	str	r6, [r3, #0]
  ep->is_in = 0U;
 80009d2:	3b17      	subs	r3, #23
 80009d4:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & 0x7FU;
 80009d6:	3b01      	subs	r3, #1
 80009d8:	7019      	strb	r1, [r3, #0]
   
  __HAL_LOCK(hpcd); 
 80009da:	23f4      	movs	r3, #244	; 0xf4
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4698      	mov	r8, r3
 80009e0:	5cc3      	ldrb	r3, [r0, r3]
 80009e2:	469c      	mov	ip, r3
 80009e4:	4662      	mov	r2, ip
 80009e6:	2302      	movs	r3, #2
 80009e8:	2a01      	cmp	r2, #1
 80009ea:	d04d      	beq.n	8000a88 <HAL_PCD_EP_Receive+0xe8>
 80009ec:	4642      	mov	r2, r8
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 80009ee:	3415      	adds	r4, #21
  __HAL_LOCK(hpcd); 
 80009f0:	3b01      	subs	r3, #1
  if (ep->xfer_len > ep->maxpacket)
 80009f2:	34ff      	adds	r4, #255	; 0xff
  __HAL_LOCK(hpcd); 
 80009f4:	5483      	strb	r3, [r0, r2]
  if (ep->xfer_len > ep->maxpacket)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	6822      	ldr	r2, [r4, #0]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d84b      	bhi.n	8000a96 <HAL_PCD_EP_Receive+0xf6>
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0U;
 80009fe:	001a      	movs	r2, r3
 8000a00:	603e      	str	r6, [r7, #0]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8000a02:	1a6b      	subs	r3, r5, r1
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	18c3      	adds	r3, r0, r3
 8000a08:	001c      	movs	r4, r3
 8000a0a:	3413      	adds	r4, #19
 8000a0c:	34ff      	adds	r4, #255	; 0xff
 8000a0e:	7824      	ldrb	r4, [r4, #0]
 8000a10:	2c00      	cmp	r4, #0
 8000a12:	d118      	bne.n	8000a46 <HAL_PCD_EP_Receive+0xa6>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8000a14:	2650      	movs	r6, #80	; 0x50
 8000a16:	3309      	adds	r3, #9
 8000a18:	6804      	ldr	r4, [r0, #0]
 8000a1a:	33ff      	adds	r3, #255	; 0xff
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	5ba6      	ldrh	r6, [r4, r6]
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	199b      	adds	r3, r3, r6
 8000a24:	4e74      	ldr	r6, [pc, #464]	; (8000bf8 <HAL_PCD_EP_Receive+0x258>)
 8000a26:	19a6      	adds	r6, r4, r6
 8000a28:	199b      	adds	r3, r3, r6
 8000a2a:	2a3e      	cmp	r2, #62	; 0x3e
 8000a2c:	d800      	bhi.n	8000a30 <HAL_PCD_EP_Receive+0x90>
 8000a2e:	e06d      	b.n	8000b0c <HAL_PCD_EP_Receive+0x16c>
 8000a30:	0956      	lsrs	r6, r2, #5
 8000a32:	b2b6      	uxth	r6, r6
 8000a34:	06d2      	lsls	r2, r2, #27
 8000a36:	d101      	bne.n	8000a3c <HAL_PCD_EP_Receive+0x9c>
 8000a38:	3e01      	subs	r6, #1
 8000a3a:	b2b6      	uxth	r6, r6
 8000a3c:	4a6f      	ldr	r2, [pc, #444]	; (8000bfc <HAL_PCD_EP_Receive+0x25c>)
 8000a3e:	02b6      	lsls	r6, r6, #10
 8000a40:	4316      	orrs	r6, r2
 8000a42:	801e      	strh	r6, [r3, #0]
 8000a44:	e00a      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000a46:	001e      	movs	r6, r3
 8000a48:	360a      	adds	r6, #10
 8000a4a:	36ff      	adds	r6, #255	; 0xff
 8000a4c:	7837      	ldrb	r7, [r6, #0]
 8000a4e:	46b3      	mov	fp, r6
 8000a50:	6804      	ldr	r4, [r0, #0]
 8000a52:	2f00      	cmp	r7, #0
 8000a54:	d022      	beq.n	8000a9c <HAL_PCD_EP_Receive+0xfc>
 8000a56:	2f01      	cmp	r7, #1
 8000a58:	d100      	bne.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
 8000a5a:	e08e      	b.n	8000b7a <HAL_PCD_EP_Receive+0x1da>
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 8000a5c:	1a69      	subs	r1, r5, r1
 8000a5e:	0089      	lsls	r1, r1, #2
 8000a60:	1841      	adds	r1, r0, r1
 8000a62:	3109      	adds	r1, #9
 8000a64:	31ff      	adds	r1, #255	; 0xff
 8000a66:	780b      	ldrb	r3, [r1, #0]
 8000a68:	4a65      	ldr	r2, [pc, #404]	; (8000c00 <HAL_PCD_EP_Receive+0x260>)
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	18e3      	adds	r3, r4, r3
 8000a6e:	8819      	ldrh	r1, [r3, #0]
 8000a70:	4011      	ands	r1, r2
 8000a72:	22c0      	movs	r2, #192	; 0xc0
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	4051      	eors	r1, r2
 8000a78:	4a62      	ldr	r2, [pc, #392]	; (8000c04 <HAL_PCD_EP_Receive+0x264>)
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	801a      	strh	r2, [r3, #0]
  
  __HAL_UNLOCK(hpcd); 
 8000a7e:	23f4      	movs	r3, #244	; 0xf4
 8000a80:	2200      	movs	r2, #0
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	54c2      	strb	r2, [r0, r3]
  
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	bc3c      	pop	{r2, r3, r4, r5}
 8000a8c:	4690      	mov	r8, r2
 8000a8e:	4699      	mov	r9, r3
 8000a90:	46a2      	mov	sl, r4
 8000a92:	46ab      	mov	fp, r5
 8000a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep->xfer_len-=len; 
 8000a96:	1a9b      	subs	r3, r3, r2
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	e7b2      	b.n	8000a02 <HAL_PCD_EP_Receive+0x62>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000a9c:	2650      	movs	r6, #80	; 0x50
 8000a9e:	3309      	adds	r3, #9
 8000aa0:	33ff      	adds	r3, #255	; 0xff
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	5ba6      	ldrh	r6, [r4, r6]
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	199b      	adds	r3, r3, r6
 8000aaa:	4699      	mov	r9, r3
 8000aac:	4e56      	ldr	r6, [pc, #344]	; (8000c08 <HAL_PCD_EP_Receive+0x268>)
 8000aae:	19a6      	adds	r6, r4, r6
 8000ab0:	44b1      	add	r9, r6
 8000ab2:	2a3e      	cmp	r2, #62	; 0x3e
 8000ab4:	d933      	bls.n	8000b1e <HAL_PCD_EP_Receive+0x17e>
 8000ab6:	261f      	movs	r6, #31
 8000ab8:	4016      	ands	r6, r2
 8000aba:	46b4      	mov	ip, r6
 8000abc:	4663      	mov	r3, ip
 8000abe:	0957      	lsrs	r7, r2, #5
 8000ac0:	b2bf      	uxth	r7, r7
 8000ac2:	003e      	movs	r6, r7
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d055      	beq.n	8000b74 <HAL_PCD_EP_Receive+0x1d4>
 8000ac8:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <HAL_PCD_EP_Receive+0x25c>)
 8000aca:	02b6      	lsls	r6, r6, #10
 8000acc:	431e      	orrs	r6, r3
 8000ace:	464b      	mov	r3, r9
 8000ad0:	801e      	strh	r6, [r3, #0]
 8000ad2:	1a6e      	subs	r6, r5, r1
 8000ad4:	00b6      	lsls	r6, r6, #2
 8000ad6:	1986      	adds	r6, r0, r6
 8000ad8:	0033      	movs	r3, r6
 8000ada:	330a      	adds	r3, #10
 8000adc:	33ff      	adds	r3, #255	; 0xff
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d171      	bne.n	8000bc8 <HAL_PCD_EP_Receive+0x228>
 8000ae4:	2350      	movs	r3, #80	; 0x50
 8000ae6:	3609      	adds	r6, #9
 8000ae8:	36ff      	adds	r6, #255	; 0xff
 8000aea:	5ae2      	ldrh	r2, [r4, r3]
 8000aec:	7833      	ldrb	r3, [r6, #0]
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	189b      	adds	r3, r3, r2
 8000af2:	4a41      	ldr	r2, [pc, #260]	; (8000bf8 <HAL_PCD_EP_Receive+0x258>)
 8000af4:	18a2      	adds	r2, r4, r2
 8000af6:	189b      	adds	r3, r3, r2
 8000af8:	4662      	mov	r2, ip
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_PCD_EP_Receive+0x162>
 8000afe:	3f01      	subs	r7, #1
 8000b00:	b2bf      	uxth	r7, r7
 8000b02:	4a3e      	ldr	r2, [pc, #248]	; (8000bfc <HAL_PCD_EP_Receive+0x25c>)
 8000b04:	02bf      	lsls	r7, r7, #10
 8000b06:	4317      	orrs	r7, r2
 8000b08:	801f      	strh	r7, [r3, #0]
 8000b0a:	e7a7      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8000b0c:	0856      	lsrs	r6, r2, #1
 8000b0e:	b2b6      	uxth	r6, r6
 8000b10:	07d2      	lsls	r2, r2, #31
 8000b12:	d501      	bpl.n	8000b18 <HAL_PCD_EP_Receive+0x178>
 8000b14:	3601      	adds	r6, #1
 8000b16:	b2b6      	uxth	r6, r6
 8000b18:	02b6      	lsls	r6, r6, #10
 8000b1a:	801e      	strh	r6, [r3, #0]
 8000b1c:	e79e      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
    PCD_SET_EP_DBUF_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000b1e:	2701      	movs	r7, #1
 8000b20:	0856      	lsrs	r6, r2, #1
 8000b22:	b2b3      	uxth	r3, r6
 8000b24:	469c      	mov	ip, r3
 8000b26:	4017      	ands	r7, r2
 8000b28:	001e      	movs	r6, r3
 8000b2a:	2f00      	cmp	r7, #0
 8000b2c:	d11f      	bne.n	8000b6e <HAL_PCD_EP_Receive+0x1ce>
 8000b2e:	464b      	mov	r3, r9
 8000b30:	02b6      	lsls	r6, r6, #10
 8000b32:	801e      	strh	r6, [r3, #0]
 8000b34:	1a6e      	subs	r6, r5, r1
 8000b36:	00b6      	lsls	r6, r6, #2
 8000b38:	1986      	adds	r6, r0, r6
 8000b3a:	0033      	movs	r3, r6
 8000b3c:	330a      	adds	r3, #10
 8000b3e:	33ff      	adds	r3, #255	; 0xff
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d140      	bne.n	8000bc8 <HAL_PCD_EP_Receive+0x228>
 8000b46:	2350      	movs	r3, #80	; 0x50
 8000b48:	3609      	adds	r6, #9
 8000b4a:	36ff      	adds	r6, #255	; 0xff
 8000b4c:	5ae2      	ldrh	r2, [r4, r3]
 8000b4e:	7833      	ldrb	r3, [r6, #0]
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	189b      	adds	r3, r3, r2
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <HAL_PCD_EP_Receive+0x258>)
 8000b56:	18a2      	adds	r2, r4, r2
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	2f00      	cmp	r7, #0
 8000b5c:	d003      	beq.n	8000b66 <HAL_PCD_EP_Receive+0x1c6>
 8000b5e:	4662      	mov	r2, ip
 8000b60:	3201      	adds	r2, #1
 8000b62:	b292      	uxth	r2, r2
 8000b64:	4694      	mov	ip, r2
 8000b66:	4662      	mov	r2, ip
 8000b68:	0292      	lsls	r2, r2, #10
 8000b6a:	801a      	strh	r2, [r3, #0]
 8000b6c:	e776      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
 8000b6e:	1c5e      	adds	r6, r3, #1
 8000b70:	b2b6      	uxth	r6, r6
 8000b72:	e7dc      	b.n	8000b2e <HAL_PCD_EP_Receive+0x18e>
 8000b74:	1e7e      	subs	r6, r7, #1
 8000b76:	b2b6      	uxth	r6, r6
 8000b78:	e7a6      	b.n	8000ac8 <HAL_PCD_EP_Receive+0x128>
 8000b7a:	2650      	movs	r6, #80	; 0x50
 8000b7c:	46b0      	mov	r8, r6
 8000b7e:	5ba6      	ldrh	r6, [r4, r6]
 8000b80:	46b1      	mov	r9, r6
 8000b82:	2684      	movs	r6, #132	; 0x84
 8000b84:	0076      	lsls	r6, r6, #1
 8000b86:	46b2      	mov	sl, r6
 8000b88:	449a      	add	sl, r3
 8000b8a:	4653      	mov	r3, sl
 8000b8c:	4e1e      	ldr	r6, [pc, #120]	; (8000c08 <HAL_PCD_EP_Receive+0x268>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	46b4      	mov	ip, r6
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	444b      	add	r3, r9
 8000b96:	191b      	adds	r3, r3, r4
 8000b98:	4463      	add	r3, ip
 8000b9a:	801a      	strh	r2, [r3, #0]
 8000b9c:	465b      	mov	r3, fp
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d111      	bne.n	8000bc8 <HAL_PCD_EP_Receive+0x228>
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	5ae3      	ldrh	r3, [r4, r3]
 8000ba8:	4e13      	ldr	r6, [pc, #76]	; (8000bf8 <HAL_PCD_EP_Receive+0x258>)
 8000baa:	469c      	mov	ip, r3
 8000bac:	4653      	mov	r3, sl
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	19a6      	adds	r6, r4, r6
 8000bb2:	00db      	lsls	r3, r3, #3
 8000bb4:	4463      	add	r3, ip
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	2a3e      	cmp	r2, #62	; 0x3e
 8000bba:	d918      	bls.n	8000bee <HAL_PCD_EP_Receive+0x24e>
 8000bbc:	261f      	movs	r6, #31
 8000bbe:	0957      	lsrs	r7, r2, #5
 8000bc0:	4016      	ands	r6, r2
 8000bc2:	b2bf      	uxth	r7, r7
 8000bc4:	46b4      	mov	ip, r6
 8000bc6:	e797      	b.n	8000af8 <HAL_PCD_EP_Receive+0x158>
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d000      	beq.n	8000bce <HAL_PCD_EP_Receive+0x22e>
 8000bcc:	e746      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
 8000bce:	1a6e      	subs	r6, r5, r1
 8000bd0:	00b6      	lsls	r6, r6, #2
 8000bd2:	1986      	adds	r6, r0, r6
 8000bd4:	3609      	adds	r6, #9
 8000bd6:	334f      	adds	r3, #79	; 0x4f
 8000bd8:	36ff      	adds	r6, #255	; 0xff
 8000bda:	5ae7      	ldrh	r7, [r4, r3]
 8000bdc:	7833      	ldrb	r3, [r6, #0]
 8000bde:	4e06      	ldr	r6, [pc, #24]	; (8000bf8 <HAL_PCD_EP_Receive+0x258>)
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	46b4      	mov	ip, r6
 8000be4:	18e3      	adds	r3, r4, r3
 8000be6:	19db      	adds	r3, r3, r7
 8000be8:	4463      	add	r3, ip
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	e736      	b.n	8000a5c <HAL_PCD_EP_Receive+0xbc>
 8000bee:	0856      	lsrs	r6, r2, #1
 8000bf0:	b2b6      	uxth	r6, r6
 8000bf2:	46b4      	mov	ip, r6
 8000bf4:	4017      	ands	r7, r2
 8000bf6:	e7b0      	b.n	8000b5a <HAL_PCD_EP_Receive+0x1ba>
 8000bf8:	00000406 	.word	0x00000406
 8000bfc:	ffff8000 	.word	0xffff8000
 8000c00:	ffffbf8f 	.word	0xffffbf8f
 8000c04:	ffff8080 	.word	0xffff8080
 8000c08:	00000402 	.word	0x00000402

08000c0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c0c:	000b      	movs	r3, r1
  return hpcd->OUT_ep[ep_addr & 0x7FU].xfer_count;
 8000c0e:	217f      	movs	r1, #127	; 0x7f
 8000c10:	4019      	ands	r1, r3
 8000c12:	00cb      	lsls	r3, r1, #3
 8000c14:	1a59      	subs	r1, r3, r1
 8000c16:	0089      	lsls	r1, r1, #2
 8000c18:	1840      	adds	r0, r0, r1
 8000c1a:	3021      	adds	r0, #33	; 0x21
 8000c1c:	30ff      	adds	r0, #255	; 0xff
 8000c1e:	8800      	ldrh	r0, [r0, #0]
}
 8000c20:	4770      	bx	lr
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	257f      	movs	r5, #127	; 0x7f
 8000c28:	46d6      	mov	lr, sl
 8000c2a:	464f      	mov	r7, r9
 8000c2c:	4646      	mov	r6, r8
 8000c2e:	4029      	ands	r1, r5
  uint16_t pmabuffer = 0U;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000c30:	00cc      	lsls	r4, r1, #3
 8000c32:	46a2      	mov	sl, r4
 8000c34:	1a64      	subs	r4, r4, r1
 8000c36:	00a4      	lsls	r4, r4, #2
 8000c38:	1904      	adds	r4, r0, r4
{
 8000c3a:	b5c0      	push	{r6, r7, lr}
  ep->xfer_len = len;
 8000c3c:	63e3      	str	r3, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
  ep->is_in = 1U;
 8000c3e:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 8000c40:	2700      	movs	r7, #0
  ep->is_in = 1U;
 8000c42:	2601      	movs	r6, #1
  ep->xfer_buff = pBuf;  
 8000c44:	63a2      	str	r2, [r4, #56]	; 0x38
  ep->num = ep_addr & 0x7FU;
  
  __HAL_LOCK(hpcd); 
 8000c46:	22f4      	movs	r2, #244	; 0xf4
  ep->is_in = 1U;
 8000c48:	3329      	adds	r3, #41	; 0x29
  ep->xfer_count = 0U;
 8000c4a:	6427      	str	r7, [r4, #64]	; 0x40
  ep->num = ep_addr & 0x7FU;
 8000c4c:	3b01      	subs	r3, #1
  ep->is_in = 1U;
 8000c4e:	705e      	strb	r6, [r3, #1]
  __HAL_LOCK(hpcd); 
 8000c50:	0052      	lsls	r2, r2, #1
  ep->num = ep_addr & 0x7FU;
 8000c52:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 8000c54:	5c83      	ldrb	r3, [r0, r2]
 8000c56:	469c      	mov	ip, r3
 8000c58:	4665      	mov	r5, ip
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	2d01      	cmp	r5, #1
 8000c5e:	d055      	beq.n	8000d0c <HAL_PCD_EP_Transmit+0xe8>
 8000c60:	5486      	strb	r6, [r0, r2]
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8000c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c64:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d856      	bhi.n	8000d18 <HAL_PCD_EP_Transmit+0xf4>
    ep->xfer_len-=len; 
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0U;
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	63e7      	str	r7, [r4, #60]	; 0x3c
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8000c6e:	4652      	mov	r2, sl
 8000c70:	1a52      	subs	r2, r2, r1
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	1882      	adds	r2, r0, r2
 8000c76:	0014      	movs	r4, r2
 8000c78:	3432      	adds	r4, #50	; 0x32
 8000c7a:	7824      	ldrb	r4, [r4, #0]
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d14e      	bne.n	8000d1e <HAL_PCD_EP_Transmit+0xfa>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8000c80:	6804      	ldr	r4, [r0, #0]
 8000c82:	6b96      	ldr	r6, [r2, #56]	; 0x38
 8000c84:	46a4      	mov	ip, r4
 8000c86:	b29c      	uxth	r4, r3
 8000c88:	46a0      	mov	r8, r4
{
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000c8a:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000c8c:	041c      	lsls	r4, r3, #16
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	4691      	mov	r9, r2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000c92:	0c24      	lsrs	r4, r4, #16
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000c94:	00db      	lsls	r3, r3, #3
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000c96:	3401      	adds	r4, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000c98:	4463      	add	r3, ip
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000c9a:	0864      	lsrs	r4, r4, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000c9c:	4499      	add	r9, r3
  
  for (i = n; i != 0; i--)
 8000c9e:	2c00      	cmp	r4, #0
 8000ca0:	d00c      	beq.n	8000cbc <HAL_PCD_EP_Transmit+0x98>
 8000ca2:	0033      	movs	r3, r6
 8000ca4:	0064      	lsls	r4, r4, #1
 8000ca6:	1934      	adds	r4, r6, r4
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
    *pdwVal++ = temp2;
 8000ca8:	464d      	mov	r5, r9
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8000caa:	785a      	ldrb	r2, [r3, #1]
 8000cac:	781f      	ldrb	r7, [r3, #0]
 8000cae:	0212      	lsls	r2, r2, #8
 8000cb0:	433a      	orrs	r2, r7
    *pdwVal++ = temp2;
 8000cb2:	1b9f      	subs	r7, r3, r6
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	537a      	strh	r2, [r7, r5]
  for (i = n; i != 0; i--)
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d1f5      	bne.n	8000ca8 <HAL_PCD_EP_Transmit+0x84>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8000cbc:	2350      	movs	r3, #80	; 0x50
 8000cbe:	4662      	mov	r2, ip
 8000cc0:	5ad4      	ldrh	r4, [r2, r3]
 8000cc2:	4653      	mov	r3, sl
 8000cc4:	1a5a      	subs	r2, r3, r1
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	1882      	adds	r2, r0, r2
 8000cca:	3228      	adds	r2, #40	; 0x28
 8000ccc:	7813      	ldrb	r3, [r2, #0]
 8000cce:	4a6c      	ldr	r2, [pc, #432]	; (8000e80 <HAL_PCD_EP_Transmit+0x25c>)
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	4691      	mov	r9, r2
 8000cd4:	4642      	mov	r2, r8
 8000cd6:	46e0      	mov	r8, ip
 8000cd8:	191b      	adds	r3, r3, r4
 8000cda:	4463      	add	r3, ip
 8000cdc:	444b      	add	r3, r9
 8000cde:	801a      	strh	r2, [r3, #0]
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8000ce0:	4653      	mov	r3, sl
 8000ce2:	1a59      	subs	r1, r3, r1
 8000ce4:	0089      	lsls	r1, r1, #2
 8000ce6:	1841      	adds	r1, r0, r1
 8000ce8:	3128      	adds	r1, #40	; 0x28
 8000cea:	780b      	ldrb	r3, [r1, #0]
 8000cec:	4a65      	ldr	r2, [pc, #404]	; (8000e84 <HAL_PCD_EP_Transmit+0x260>)
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4443      	add	r3, r8
 8000cf2:	001e      	movs	r6, r3
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2230      	movs	r2, #48	; 0x30
 8000cfa:	4053      	eors	r3, r2
 8000cfc:	4a62      	ldr	r2, [pc, #392]	; (8000e88 <HAL_PCD_EP_Transmit+0x264>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	8033      	strh	r3, [r6, #0]
  __HAL_UNLOCK(hpcd);
 8000d02:	23f4      	movs	r3, #244	; 0xf4
 8000d04:	2200      	movs	r2, #0
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	bc1c      	pop	{r2, r3, r4}
 8000d10:	4690      	mov	r8, r2
 8000d12:	4699      	mov	r9, r3
 8000d14:	46a2      	mov	sl, r4
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ep->xfer_len-=len; 
 8000d18:	1ad2      	subs	r2, r2, r3
 8000d1a:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000d1c:	e7a7      	b.n	8000c6e <HAL_PCD_EP_Transmit+0x4a>
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000d1e:	6804      	ldr	r4, [r0, #0]
 8000d20:	46a0      	mov	r8, r4
 8000d22:	0014      	movs	r4, r2
 8000d24:	4645      	mov	r5, r8
 8000d26:	3428      	adds	r4, #40	; 0x28
 8000d28:	7824      	ldrb	r4, [r4, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d2a:	3229      	adds	r2, #41	; 0x29
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000d2c:	00a7      	lsls	r7, r4, #2
 8000d2e:	5b7f      	ldrh	r7, [r7, r5]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d30:	7812      	ldrb	r2, [r2, #0]
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8000d32:	067d      	lsls	r5, r7, #25
 8000d34:	d516      	bpl.n	8000d64 <HAL_PCD_EP_Transmit+0x140>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d171      	bne.n	8000e1e <HAL_PCD_EP_Transmit+0x1fa>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	3250      	adds	r2, #80	; 0x50
 8000d3e:	5aaa      	ldrh	r2, [r5, r2]
 8000d40:	00e4      	lsls	r4, r4, #3
 8000d42:	18a4      	adds	r4, r4, r2
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_PCD_EP_Transmit+0x268>)
 8000d46:	4442      	add	r2, r8
 8000d48:	18a4      	adds	r4, r4, r2
 8000d4a:	2b3e      	cmp	r3, #62	; 0x3e
 8000d4c:	d970      	bls.n	8000e30 <HAL_PCD_EP_Transmit+0x20c>
 8000d4e:	095a      	lsrs	r2, r3, #5
 8000d50:	b292      	uxth	r2, r2
 8000d52:	06dd      	lsls	r5, r3, #27
 8000d54:	d101      	bne.n	8000d5a <HAL_PCD_EP_Transmit+0x136>
 8000d56:	3a01      	subs	r2, #1
 8000d58:	b292      	uxth	r2, r2
 8000d5a:	4f4d      	ldr	r7, [pc, #308]	; (8000e90 <HAL_PCD_EP_Transmit+0x26c>)
 8000d5c:	0292      	lsls	r2, r2, #10
 8000d5e:	433a      	orrs	r2, r7
 8000d60:	8022      	strh	r2, [r4, #0]
 8000d62:	e05e      	b.n	8000e22 <HAL_PCD_EP_Transmit+0x1fe>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	d114      	bne.n	8000d92 <HAL_PCD_EP_Transmit+0x16e>
 8000d68:	4645      	mov	r5, r8
 8000d6a:	3250      	adds	r2, #80	; 0x50
 8000d6c:	5aaa      	ldrh	r2, [r5, r2]
 8000d6e:	00e4      	lsls	r4, r4, #3
 8000d70:	18a4      	adds	r4, r4, r2
 8000d72:	4a43      	ldr	r2, [pc, #268]	; (8000e80 <HAL_PCD_EP_Transmit+0x25c>)
 8000d74:	4442      	add	r2, r8
 8000d76:	18a4      	adds	r4, r4, r2
 8000d78:	2b3e      	cmp	r3, #62	; 0x3e
 8000d7a:	d962      	bls.n	8000e42 <HAL_PCD_EP_Transmit+0x21e>
 8000d7c:	095a      	lsrs	r2, r3, #5
 8000d7e:	b292      	uxth	r2, r2
 8000d80:	06dd      	lsls	r5, r3, #27
 8000d82:	d101      	bne.n	8000d88 <HAL_PCD_EP_Transmit+0x164>
 8000d84:	3a01      	subs	r2, #1
 8000d86:	b292      	uxth	r2, r2
 8000d88:	4f41      	ldr	r7, [pc, #260]	; (8000e90 <HAL_PCD_EP_Transmit+0x26c>)
 8000d8a:	0292      	lsls	r2, r2, #10
 8000d8c:	433a      	orrs	r2, r7
 8000d8e:	8022      	strh	r2, [r4, #0]
 8000d90:	e001      	b.n	8000d96 <HAL_PCD_EP_Transmit+0x172>
 8000d92:	2a01      	cmp	r2, #1
 8000d94:	d05e      	beq.n	8000e54 <HAL_PCD_EP_Transmit+0x230>
      pmabuffer = ep->pmaaddr0;
 8000d96:	4652      	mov	r2, sl
 8000d98:	1a52      	subs	r2, r2, r1
 8000d9a:	0092      	lsls	r2, r2, #2
 8000d9c:	1882      	adds	r2, r0, r2
 8000d9e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8000da0:	4694      	mov	ip, r2
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000da2:	4652      	mov	r2, sl
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000da4:	041c      	lsls	r4, r3, #16
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000da6:	2380      	movs	r3, #128	; 0x80
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000da8:	1a52      	subs	r2, r2, r1
 8000daa:	0092      	lsls	r2, r2, #2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000dac:	0c24      	lsrs	r4, r4, #16
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000dae:	00db      	lsls	r3, r3, #3
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000db0:	1882      	adds	r2, r0, r2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000db2:	3401      	adds	r4, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000db4:	4443      	add	r3, r8
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8000db6:	6b97      	ldr	r7, [r2, #56]	; 0x38
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8000db8:	0864      	lsrs	r4, r4, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000dba:	449c      	add	ip, r3
  for (i = n; i != 0; i--)
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d00c      	beq.n	8000dda <HAL_PCD_EP_Transmit+0x1b6>
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	0064      	lsls	r4, r4, #1
 8000dc4:	193c      	adds	r4, r7, r4
    *pdwVal++ = temp2;
 8000dc6:	4665      	mov	r5, ip
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8000dc8:	785a      	ldrb	r2, [r3, #1]
 8000dca:	781e      	ldrb	r6, [r3, #0]
 8000dcc:	0212      	lsls	r2, r2, #8
 8000dce:	4332      	orrs	r2, r6
    *pdwVal++ = temp2;
 8000dd0:	1bde      	subs	r6, r3, r7
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	5372      	strh	r2, [r6, r5]
  for (i = n; i != 0; i--)
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	d1f5      	bne.n	8000dc6 <HAL_PCD_EP_Transmit+0x1a2>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8000dda:	4653      	mov	r3, sl
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	18c3      	adds	r3, r0, r3
 8000de2:	001a      	movs	r2, r3
 8000de4:	3229      	adds	r2, #41	; 0x29
 8000de6:	7812      	ldrb	r2, [r2, #0]
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d10a      	bne.n	8000e02 <HAL_PCD_EP_Transmit+0x1de>
 8000dec:	3328      	adds	r3, #40	; 0x28
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4c28      	ldr	r4, [pc, #160]	; (8000e94 <HAL_PCD_EP_Transmit+0x270>)
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	4443      	add	r3, r8
 8000df6:	881a      	ldrh	r2, [r3, #0]
 8000df8:	4014      	ands	r4, r2
 8000dfa:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <HAL_PCD_EP_Transmit+0x274>)
 8000dfc:	4322      	orrs	r2, r4
 8000dfe:	801a      	strh	r2, [r3, #0]
 8000e00:	e76e      	b.n	8000ce0 <HAL_PCD_EP_Transmit+0xbc>
 8000e02:	2a01      	cmp	r2, #1
 8000e04:	d000      	beq.n	8000e08 <HAL_PCD_EP_Transmit+0x1e4>
 8000e06:	e76b      	b.n	8000ce0 <HAL_PCD_EP_Transmit+0xbc>
 8000e08:	3328      	adds	r3, #40	; 0x28
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4c21      	ldr	r4, [pc, #132]	; (8000e94 <HAL_PCD_EP_Transmit+0x270>)
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4443      	add	r3, r8
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	4014      	ands	r4, r2
 8000e16:	4a21      	ldr	r2, [pc, #132]	; (8000e9c <HAL_PCD_EP_Transmit+0x278>)
 8000e18:	4322      	orrs	r2, r4
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	e760      	b.n	8000ce0 <HAL_PCD_EP_Transmit+0xbc>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000e1e:	2a01      	cmp	r2, #1
 8000e20:	d023      	beq.n	8000e6a <HAL_PCD_EP_Transmit+0x246>
      pmabuffer = ep->pmaaddr1;
 8000e22:	4652      	mov	r2, sl
 8000e24:	1a52      	subs	r2, r2, r1
 8000e26:	0092      	lsls	r2, r2, #2
 8000e28:	1882      	adds	r2, r0, r2
 8000e2a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8000e2c:	4694      	mov	ip, r2
 8000e2e:	e7b8      	b.n	8000da2 <HAL_PCD_EP_Transmit+0x17e>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000e30:	085a      	lsrs	r2, r3, #1
 8000e32:	b292      	uxth	r2, r2
 8000e34:	07dd      	lsls	r5, r3, #31
 8000e36:	d501      	bpl.n	8000e3c <HAL_PCD_EP_Transmit+0x218>
 8000e38:	3201      	adds	r2, #1
 8000e3a:	b292      	uxth	r2, r2
 8000e3c:	0292      	lsls	r2, r2, #10
 8000e3e:	8022      	strh	r2, [r4, #0]
 8000e40:	e7ef      	b.n	8000e22 <HAL_PCD_EP_Transmit+0x1fe>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000e42:	085a      	lsrs	r2, r3, #1
 8000e44:	b292      	uxth	r2, r2
 8000e46:	07dd      	lsls	r5, r3, #31
 8000e48:	d501      	bpl.n	8000e4e <HAL_PCD_EP_Transmit+0x22a>
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	0292      	lsls	r2, r2, #10
 8000e50:	8022      	strh	r2, [r4, #0]
 8000e52:	e7a0      	b.n	8000d96 <HAL_PCD_EP_Transmit+0x172>
 8000e54:	4645      	mov	r5, r8
 8000e56:	324f      	adds	r2, #79	; 0x4f
 8000e58:	5aaf      	ldrh	r7, [r5, r2]
 8000e5a:	00e2      	lsls	r2, r4, #3
 8000e5c:	4c08      	ldr	r4, [pc, #32]	; (8000e80 <HAL_PCD_EP_Transmit+0x25c>)
 8000e5e:	19d2      	adds	r2, r2, r7
 8000e60:	46a4      	mov	ip, r4
 8000e62:	4442      	add	r2, r8
 8000e64:	4462      	add	r2, ip
 8000e66:	8013      	strh	r3, [r2, #0]
 8000e68:	e795      	b.n	8000d96 <HAL_PCD_EP_Transmit+0x172>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 8000e6a:	4645      	mov	r5, r8
 8000e6c:	324f      	adds	r2, #79	; 0x4f
 8000e6e:	5aaf      	ldrh	r7, [r5, r2]
 8000e70:	00e2      	lsls	r2, r4, #3
 8000e72:	4c06      	ldr	r4, [pc, #24]	; (8000e8c <HAL_PCD_EP_Transmit+0x268>)
 8000e74:	19d2      	adds	r2, r2, r7
 8000e76:	46a4      	mov	ip, r4
 8000e78:	4442      	add	r2, r8
 8000e7a:	4462      	add	r2, ip
 8000e7c:	8013      	strh	r3, [r2, #0]
 8000e7e:	e7d0      	b.n	8000e22 <HAL_PCD_EP_Transmit+0x1fe>
 8000e80:	00000402 	.word	0x00000402
 8000e84:	ffff8fbf 	.word	0xffff8fbf
 8000e88:	ffff8080 	.word	0xffff8080
 8000e8c:	00000406 	.word	0x00000406
 8000e90:	ffff8000 	.word	0xffff8000
 8000e94:	00000f0f 	.word	0x00000f0f
 8000e98:	ffff80c0 	.word	0xffff80c0
 8000e9c:	ffffc080 	.word	0xffffc080

08000ea0 <HAL_PCD_IRQHandler>:
{
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	4657      	mov	r7, sl
 8000ea4:	46de      	mov	lr, fp
 8000ea6:	464e      	mov	r6, r9
 8000ea8:	4645      	mov	r5, r8
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eaa:	2244      	movs	r2, #68	; 0x44
{
 8000eac:	b5e0      	push	{r5, r6, r7, lr}
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eae:	6803      	ldr	r3, [r0, #0]
{
 8000eb0:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eb2:	5a9a      	ldrh	r2, [r3, r2]
{
 8000eb4:	0007      	movs	r7, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000eb6:	b212      	sxth	r2, r2
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	da00      	bge.n	8000ebe <HAL_PCD_IRQHandler+0x1e>
 8000ebc:	e071      	b.n	8000fa2 <HAL_PCD_IRQHandler+0x102>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000ebe:	2244      	movs	r2, #68	; 0x44
 8000ec0:	5a99      	ldrh	r1, [r3, r2]
 8000ec2:	0549      	lsls	r1, r1, #21
 8000ec4:	d44a      	bmi.n	8000f5c <HAL_PCD_IRQHandler+0xbc>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000ec6:	2244      	movs	r2, #68	; 0x44
 8000ec8:	5a99      	ldrh	r1, [r3, r2]
 8000eca:	0449      	lsls	r1, r1, #17
 8000ecc:	d503      	bpl.n	8000ed6 <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000ece:	5a99      	ldrh	r1, [r3, r2]
 8000ed0:	48b9      	ldr	r0, [pc, #740]	; (80011b8 <HAL_PCD_IRQHandler+0x318>)
 8000ed2:	4001      	ands	r1, r0
 8000ed4:	5299      	strh	r1, [r3, r2]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000ed6:	2244      	movs	r2, #68	; 0x44
 8000ed8:	5a99      	ldrh	r1, [r3, r2]
 8000eda:	0489      	lsls	r1, r1, #18
 8000edc:	d503      	bpl.n	8000ee6 <HAL_PCD_IRQHandler+0x46>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000ede:	5a99      	ldrh	r1, [r3, r2]
 8000ee0:	48b6      	ldr	r0, [pc, #728]	; (80011bc <HAL_PCD_IRQHandler+0x31c>)
 8000ee2:	4001      	ands	r1, r0
 8000ee4:	5299      	strh	r1, [r3, r2]
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000ee6:	2444      	movs	r4, #68	; 0x44
 8000ee8:	5b1a      	ldrh	r2, [r3, r4]
 8000eea:	04d2      	lsls	r2, r2, #19
 8000eec:	d426      	bmi.n	8000f3c <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000eee:	2244      	movs	r2, #68	; 0x44
 8000ef0:	5a99      	ldrh	r1, [r3, r2]
 8000ef2:	0509      	lsls	r1, r1, #20
 8000ef4:	d50f      	bpl.n	8000f16 <HAL_PCD_IRQHandler+0x76>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000ef6:	5a99      	ldrh	r1, [r3, r2]
 8000ef8:	48b1      	ldr	r0, [pc, #708]	; (80011c0 <HAL_PCD_IRQHandler+0x320>)
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000efa:	2408      	movs	r4, #8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000efc:	4001      	ands	r1, r0
 8000efe:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000f00:	2140      	movs	r1, #64	; 0x40
 8000f02:	5a58      	ldrh	r0, [r3, r1]
 8000f04:	4320      	orrs	r0, r4
 8000f06:	5258      	strh	r0, [r3, r1]
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000f08:	5a58      	ldrh	r0, [r3, r1]
 8000f0a:	3c04      	subs	r4, #4
 8000f0c:	4320      	orrs	r0, r4
 8000f0e:	5258      	strh	r0, [r3, r1]
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000f10:	5a9a      	ldrh	r2, [r3, r2]
 8000f12:	04d2      	lsls	r2, r2, #19
 8000f14:	d53e      	bpl.n	8000f94 <HAL_PCD_IRQHandler+0xf4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000f16:	2244      	movs	r2, #68	; 0x44
 8000f18:	5a99      	ldrh	r1, [r3, r2]
 8000f1a:	0589      	lsls	r1, r1, #22
 8000f1c:	d431      	bmi.n	8000f82 <HAL_PCD_IRQHandler+0xe2>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	5a99      	ldrh	r1, [r3, r2]
 8000f22:	05c9      	lsls	r1, r1, #23
 8000f24:	d503      	bpl.n	8000f2e <HAL_PCD_IRQHandler+0x8e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000f26:	5a99      	ldrh	r1, [r3, r2]
 8000f28:	48a6      	ldr	r0, [pc, #664]	; (80011c4 <HAL_PCD_IRQHandler+0x324>)
 8000f2a:	4001      	ands	r1, r0
 8000f2c:	5299      	strh	r1, [r3, r2]
}
 8000f2e:	b005      	add	sp, #20
 8000f30:	bc3c      	pop	{r2, r3, r4, r5}
 8000f32:	4690      	mov	r8, r2
 8000f34:	4699      	mov	r9, r3
 8000f36:	46a2      	mov	sl, r4
 8000f38:	46ab      	mov	fp, r5
 8000f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8000f3c:	2240      	movs	r2, #64	; 0x40
 8000f3e:	2004      	movs	r0, #4
 8000f40:	5a99      	ldrh	r1, [r3, r2]
 8000f42:	4381      	bics	r1, r0
 8000f44:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000f46:	49a0      	ldr	r1, [pc, #640]	; (80011c8 <HAL_PCD_IRQHandler+0x328>)
    HAL_PCD_ResumeCallback(hpcd);
 8000f48:	0038      	movs	r0, r7
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000f4a:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResumeCallback(hpcd);
 8000f4c:	f002 fe8a 	bl	8003c64 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	499e      	ldr	r1, [pc, #632]	; (80011cc <HAL_PCD_IRQHandler+0x32c>)
 8000f54:	5b1a      	ldrh	r2, [r3, r4]
 8000f56:	400a      	ands	r2, r1
 8000f58:	531a      	strh	r2, [r3, r4]
 8000f5a:	e7c8      	b.n	8000eee <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f5c:	5a99      	ldrh	r1, [r3, r2]
 8000f5e:	489c      	ldr	r0, [pc, #624]	; (80011d0 <HAL_PCD_IRQHandler+0x330>)
 8000f60:	4001      	ands	r1, r0
 8000f62:	5299      	strh	r1, [r3, r2]
    HAL_PCD_ResetCallback(hpcd);
 8000f64:	0038      	movs	r0, r7
 8000f66:	f002 fe5f 	bl	8003c28 <HAL_PCD_ResetCallback>
   __HAL_LOCK(hpcd); 
 8000f6a:	22f4      	movs	r2, #244	; 0xf4
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	5cbb      	ldrb	r3, [r7, r2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d014      	beq.n	8000f9e <HAL_PCD_IRQHandler+0xfe>
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8000f74:	214c      	movs	r1, #76	; 0x4c
 8000f76:	2080      	movs	r0, #128	; 0x80
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	5258      	strh	r0, [r3, r1]
  __HAL_UNLOCK(hpcd);   
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	54b9      	strb	r1, [r7, r2]
 8000f80:	e7a1      	b.n	8000ec6 <HAL_PCD_IRQHandler+0x26>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000f82:	5a99      	ldrh	r1, [r3, r2]
 8000f84:	4893      	ldr	r0, [pc, #588]	; (80011d4 <HAL_PCD_IRQHandler+0x334>)
 8000f86:	4001      	ands	r1, r0
 8000f88:	5299      	strh	r1, [r3, r2]
    HAL_PCD_SOFCallback(hpcd);
 8000f8a:	0038      	movs	r0, r7
 8000f8c:	f002 fe44 	bl	8003c18 <HAL_PCD_SOFCallback>
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	e7c4      	b.n	8000f1e <HAL_PCD_IRQHandler+0x7e>
      HAL_PCD_SuspendCallback(hpcd);
 8000f94:	0038      	movs	r0, r7
 8000f96:	f002 fe53 	bl	8003c40 <HAL_PCD_SuspendCallback>
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	e7bb      	b.n	8000f16 <HAL_PCD_IRQHandler+0x76>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	e791      	b.n	8000ec6 <HAL_PCD_IRQHandler+0x26>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8000fa2:	aa02      	add	r2, sp, #8
 8000fa4:	1d96      	adds	r6, r2, #6
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	ad03      	add	r5, sp, #12
 8000faa:	8032      	strh	r2, [r6, #0]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8000fac:	2244      	movs	r2, #68	; 0x44
 8000fae:	5a9a      	ldrh	r2, [r3, r2]
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	802a      	strh	r2, [r5, #0]
 8000fb4:	b212      	sxth	r2, r2
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	db00      	blt.n	8000fbc <HAL_PCD_IRQHandler+0x11c>
 8000fba:	e780      	b.n	8000ebe <HAL_PCD_IRQHandler+0x1e>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	882c      	ldrh	r4, [r5, #0]
 8000fc0:	4014      	ands	r4, r2
    
    if (EPindex == 0U)
 8000fc2:	d138      	bne.n	8001036 <HAL_PCD_IRQHandler+0x196>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000fc4:	882a      	ldrh	r2, [r5, #0]
 8000fc6:	06d2      	lsls	r2, r2, #27
 8000fc8:	d400      	bmi.n	8000fcc <HAL_PCD_IRQHandler+0x12c>
 8000fca:	e111      	b.n	80011f0 <HAL_PCD_IRQHandler+0x350>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000fcc:	881a      	ldrh	r2, [r3, #0]
 8000fce:	8032      	strh	r2, [r6, #0]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000fd0:	8831      	ldrh	r1, [r6, #0]
 8000fd2:	0509      	lsls	r1, r1, #20
 8000fd4:	d400      	bmi.n	8000fd8 <HAL_PCD_IRQHandler+0x138>
 8000fd6:	e09c      	b.n	8001112 <HAL_PCD_IRQHandler+0x272>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fd8:	2250      	movs	r2, #80	; 0x50
 8000fda:	5a99      	ldrh	r1, [r3, r2]
 8000fdc:	32b8      	adds	r2, #184	; 0xb8
 8000fde:	5cba      	ldrb	r2, [r7, r2]
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000fe0:	2480      	movs	r4, #128	; 0x80
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fe2:	00d2      	lsls	r2, r2, #3
 8000fe4:	1852      	adds	r2, r2, r1
 8000fe6:	497c      	ldr	r1, [pc, #496]	; (80011d8 <HAL_PCD_IRQHandler+0x338>)
 8000fe8:	18d2      	adds	r2, r2, r3
 8000fea:	468c      	mov	ip, r1
 8000fec:	0039      	movs	r1, r7
 8000fee:	4462      	add	r2, ip
 8000ff0:	8810      	ldrh	r0, [r2, #0]
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000ff2:	00e4      	lsls	r4, r4, #3
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000ff4:	003a      	movs	r2, r7
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8000ff6:	46a4      	mov	ip, r4
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000ff8:	0580      	lsls	r0, r0, #22
 8000ffa:	3109      	adds	r1, #9
 8000ffc:	0d80      	lsrs	r0, r0, #22
 8000ffe:	31ff      	adds	r1, #255	; 0xff
 8001000:	6188      	str	r0, [r1, #24]
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001002:	8889      	ldrh	r1, [r1, #4]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001004:	32ed      	adds	r2, #237	; 0xed
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001006:	3001      	adds	r0, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001008:	18c9      	adds	r1, r1, r3
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800100a:	32ff      	adds	r2, #255	; 0xff
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800100c:	0840      	lsrs	r0, r0, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800100e:	4461      	add	r1, ip
  for (i = n; i != 0U; i--)
 8001010:	2800      	cmp	r0, #0
 8001012:	d007      	beq.n	8001024 <HAL_PCD_IRQHandler+0x184>
 8001014:	0040      	lsls	r0, r0, #1
 8001016:	1810      	adds	r0, r2, r0
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 8001018:	880c      	ldrh	r4, [r1, #0]
 800101a:	3102      	adds	r1, #2
 800101c:	8014      	strh	r4, [r2, #0]
 800101e:	3202      	adds	r2, #2
  for (i = n; i != 0U; i--)
 8001020:	4290      	cmp	r0, r2
 8001022:	d1f9      	bne.n	8001018 <HAL_PCD_IRQHandler+0x178>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	496d      	ldr	r1, [pc, #436]	; (80011dc <HAL_PCD_IRQHandler+0x33c>)
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8001028:	0038      	movs	r0, r7
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800102a:	400a      	ands	r2, r1
 800102c:	801a      	strh	r2, [r3, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800102e:	f002 fdcf 	bl	8003bd0 <HAL_PCD_SetupStageCallback>
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	e7ba      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8001036:	00a2      	lsls	r2, r4, #2
 8001038:	1898      	adds	r0, r3, r2
 800103a:	8801      	ldrh	r1, [r0, #0]
 800103c:	4690      	mov	r8, r2
 800103e:	8031      	strh	r1, [r6, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001040:	8832      	ldrh	r2, [r6, #0]
 8001042:	b212      	sxth	r2, r2
 8001044:	2a00      	cmp	r2, #0
 8001046:	da00      	bge.n	800104a <HAL_PCD_IRQHandler+0x1aa>
 8001048:	e0ff      	b.n	800124a <HAL_PCD_IRQHandler+0x3aa>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	8832      	ldrh	r2, [r6, #0]
 800104e:	4211      	tst	r1, r2
 8001050:	d0ac      	beq.n	8000fac <HAL_PCD_IRQHandler+0x10c>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8001052:	4642      	mov	r2, r8
 8001054:	189a      	adds	r2, r3, r2
 8001056:	8811      	ldrh	r1, [r2, #0]
 8001058:	4861      	ldr	r0, [pc, #388]	; (80011e0 <HAL_PCD_IRQHandler+0x340>)
 800105a:	4001      	ands	r1, r0
 800105c:	8011      	strh	r1, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 800105e:	00e2      	lsls	r2, r4, #3
 8001060:	9201      	str	r2, [sp, #4]
 8001062:	1b12      	subs	r2, r2, r4
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	18ba      	adds	r2, r7, r2
 8001068:	0011      	movs	r1, r2
 800106a:	3132      	adds	r1, #50	; 0x32
 800106c:	7809      	ldrb	r1, [r1, #0]
 800106e:	2900      	cmp	r1, #0
 8001070:	d000      	beq.n	8001074 <HAL_PCD_IRQHandler+0x1d4>
 8001072:	e135      	b.n	80012e0 <HAL_PCD_IRQHandler+0x440>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001074:	3150      	adds	r1, #80	; 0x50
 8001076:	5a58      	ldrh	r0, [r3, r1]
 8001078:	495a      	ldr	r1, [pc, #360]	; (80011e4 <HAL_PCD_IRQHandler+0x344>)
 800107a:	468b      	mov	fp, r1
 800107c:	0011      	movs	r1, r2
 800107e:	3128      	adds	r1, #40	; 0x28
 8001080:	7809      	ldrb	r1, [r1, #0]
 8001082:	449b      	add	fp, r3
 8001084:	00c9      	lsls	r1, r1, #3
 8001086:	1809      	adds	r1, r1, r0
 8001088:	4658      	mov	r0, fp
 800108a:	5a09      	ldrh	r1, [r1, r0]
 800108c:	0589      	lsls	r1, r1, #22
 800108e:	0d89      	lsrs	r1, r1, #22
 8001090:	6411      	str	r1, [r2, #64]	; 0x40
          if (ep->xfer_count != 0)
 8001092:	d021      	beq.n	80010d8 <HAL_PCD_IRQHandler+0x238>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001094:	6b90      	ldr	r0, [r2, #56]	; 0x38
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001096:	3101      	adds	r1, #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001098:	4682      	mov	sl, r0
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800109a:	2080      	movs	r0, #128	; 0x80
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800109c:	0849      	lsrs	r1, r1, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800109e:	00c0      	lsls	r0, r0, #3
 80010a0:	4684      	mov	ip, r0
 80010a2:	0049      	lsls	r1, r1, #1
 80010a4:	4451      	add	r1, sl
 80010a6:	4688      	mov	r8, r1
 80010a8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80010aa:	4650      	mov	r0, sl
 80010ac:	4462      	add	r2, ip
 80010ae:	4691      	mov	r9, r2
 80010b0:	4642      	mov	r2, r8
 80010b2:	4499      	add	r9, r3
 80010b4:	469c      	mov	ip, r3
 80010b6:	46a0      	mov	r8, r4
 80010b8:	464b      	mov	r3, r9
 80010ba:	4651      	mov	r1, sl
 80010bc:	46b9      	mov	r9, r7
 80010be:	0014      	movs	r4, r2
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 80010c0:	7842      	ldrb	r2, [r0, #1]
 80010c2:	7807      	ldrb	r7, [r0, #0]
 80010c4:	0212      	lsls	r2, r2, #8
 80010c6:	433a      	orrs	r2, r7
    *pdwVal++ = temp2;
 80010c8:	1a47      	subs	r7, r0, r1
 80010ca:	3002      	adds	r0, #2
 80010cc:	52fa      	strh	r2, [r7, r3]
  for (i = n; i != 0; i--)
 80010ce:	42a0      	cmp	r0, r4
 80010d0:	d1f6      	bne.n	80010c0 <HAL_PCD_IRQHandler+0x220>
 80010d2:	4663      	mov	r3, ip
 80010d4:	4644      	mov	r4, r8
 80010d6:	464f      	mov	r7, r9
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010d8:	2250      	movs	r2, #80	; 0x50
 80010da:	5a9a      	ldrh	r2, [r3, r2]
 80010dc:	9b01      	ldr	r3, [sp, #4]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80010de:	0038      	movs	r0, r7
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010e0:	1b1c      	subs	r4, r3, r4
 80010e2:	00a4      	lsls	r4, r4, #2
 80010e4:	193c      	adds	r4, r7, r4
 80010e6:	0021      	movs	r1, r4
 80010e8:	3128      	adds	r1, #40	; 0x28
 80010ea:	780b      	ldrb	r3, [r1, #0]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	445b      	add	r3, fp
 80010f0:	5a9a      	ldrh	r2, [r3, r2]
        ep->xfer_buff+=ep->xfer_count;
 80010f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010f4:	0592      	lsls	r2, r2, #22
        ep->xfer_buff+=ep->xfer_count;
 80010f6:	469c      	mov	ip, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010f8:	0d92      	lsrs	r2, r2, #22
 80010fa:	6422      	str	r2, [r4, #64]	; 0x40
        if (ep->xfer_len == 0U)
 80010fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 80010fe:	4462      	add	r2, ip
 8001100:	63a2      	str	r2, [r4, #56]	; 0x38
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001102:	7809      	ldrb	r1, [r1, #0]
        if (ep->xfer_len == 0U)
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <HAL_PCD_IRQHandler+0x26a>
 8001108:	e09b      	b.n	8001242 <HAL_PCD_IRQHandler+0x3a2>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800110a:	f002 fd79 	bl	8003c00 <HAL_PCD_DataInStageCallback>
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	e74c      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001112:	8831      	ldrh	r1, [r6, #0]
 8001114:	b209      	sxth	r1, r1
 8001116:	2900      	cmp	r1, #0
 8001118:	db00      	blt.n	800111c <HAL_PCD_IRQHandler+0x27c>
 800111a:	e747      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800111c:	492f      	ldr	r1, [pc, #188]	; (80011dc <HAL_PCD_IRQHandler+0x33c>)
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800111e:	003c      	movs	r4, r7
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001120:	400a      	ands	r2, r1
 8001122:	801a      	strh	r2, [r3, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001124:	2250      	movs	r2, #80	; 0x50
 8001126:	5a99      	ldrh	r1, [r3, r2]
 8001128:	32b8      	adds	r2, #184	; 0xb8
 800112a:	5cba      	ldrb	r2, [r7, r2]
 800112c:	3409      	adds	r4, #9
 800112e:	00d2      	lsls	r2, r2, #3
 8001130:	1852      	adds	r2, r2, r1
 8001132:	4929      	ldr	r1, [pc, #164]	; (80011d8 <HAL_PCD_IRQHandler+0x338>)
 8001134:	18d2      	adds	r2, r2, r3
 8001136:	468c      	mov	ip, r1
 8001138:	4462      	add	r2, ip
 800113a:	8812      	ldrh	r2, [r2, #0]
 800113c:	34ff      	adds	r4, #255	; 0xff
 800113e:	0592      	lsls	r2, r2, #22
 8001140:	0d92      	lsrs	r2, r2, #22
 8001142:	4694      	mov	ip, r2
 8001144:	61a2      	str	r2, [r4, #24]
          if (ep->xfer_count != 0U)
 8001146:	d016      	beq.n	8001176 <HAL_PCD_IRQHandler+0x2d6>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001148:	6922      	ldr	r2, [r4, #16]
 800114a:	4690      	mov	r8, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800114c:	88a2      	ldrh	r2, [r4, #4]
 800114e:	18d3      	adds	r3, r2, r3
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001150:	4662      	mov	r2, ip
 8001152:	1c50      	adds	r0, r2, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	00d2      	lsls	r2, r2, #3
 8001158:	4691      	mov	r9, r2
 800115a:	4642      	mov	r2, r8
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800115c:	0840      	lsrs	r0, r0, #1
 800115e:	0040      	lsls	r0, r0, #1
 8001160:	4440      	add	r0, r8
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001162:	444b      	add	r3, r9
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 8001164:	8819      	ldrh	r1, [r3, #0]
 8001166:	3302      	adds	r3, #2
 8001168:	8011      	strh	r1, [r2, #0]
 800116a:	3202      	adds	r2, #2
  for (i = n; i != 0U; i--)
 800116c:	4290      	cmp	r0, r2
 800116e:	d1f9      	bne.n	8001164 <HAL_PCD_IRQHandler+0x2c4>
            ep->xfer_buff+=ep->xfer_count;
 8001170:	4643      	mov	r3, r8
 8001172:	4463      	add	r3, ip
 8001174:	6123      	str	r3, [r4, #16]
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001176:	2100      	movs	r1, #0
 8001178:	0038      	movs	r0, r7
 800117a:	f002 fd33 	bl	8003be4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 800117e:	2250      	movs	r2, #80	; 0x50
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	4915      	ldr	r1, [pc, #84]	; (80011d8 <HAL_PCD_IRQHandler+0x338>)
 8001184:	5a9a      	ldrh	r2, [r3, r2]
 8001186:	68e0      	ldr	r0, [r4, #12]
 8001188:	1859      	adds	r1, r3, r1
 800118a:	188a      	adds	r2, r1, r2
 800118c:	283e      	cmp	r0, #62	; 0x3e
 800118e:	d900      	bls.n	8001192 <HAL_PCD_IRQHandler+0x2f2>
 8001190:	e1c4      	b.n	800151c <HAL_PCD_IRQHandler+0x67c>
 8001192:	0841      	lsrs	r1, r0, #1
 8001194:	b289      	uxth	r1, r1
 8001196:	07c0      	lsls	r0, r0, #31
 8001198:	d501      	bpl.n	800119e <HAL_PCD_IRQHandler+0x2fe>
 800119a:	3101      	adds	r1, #1
 800119c:	b289      	uxth	r1, r1
 800119e:	0289      	lsls	r1, r1, #10
 80011a0:	8011      	strh	r1, [r2, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_PCD_IRQHandler+0x348>)
 80011a6:	4011      	ands	r1, r2
 80011a8:	22c0      	movs	r2, #192	; 0xc0
 80011aa:	0192      	lsls	r2, r2, #6
 80011ac:	4051      	eors	r1, r2
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_PCD_IRQHandler+0x34c>)
 80011b0:	430a      	orrs	r2, r1
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	e6fa      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	ffffbfff 	.word	0xffffbfff
 80011bc:	ffffdfff 	.word	0xffffdfff
 80011c0:	fffff7ff 	.word	0xfffff7ff
 80011c4:	fffffeff 	.word	0xfffffeff
 80011c8:	ffffbd00 	.word	0xffffbd00
 80011cc:	ffffefff 	.word	0xffffefff
 80011d0:	fffffbff 	.word	0xfffffbff
 80011d4:	fffffdff 	.word	0xfffffdff
 80011d8:	00000406 	.word	0x00000406
 80011dc:	00000f8f 	.word	0x00000f8f
 80011e0:	ffff8f0f 	.word	0xffff8f0f
 80011e4:	00000402 	.word	0x00000402
 80011e8:	ffffbf8f 	.word	0xffffbf8f
 80011ec:	ffff8080 	.word	0xffff8080
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011f0:	881a      	ldrh	r2, [r3, #0]
 80011f2:	49d4      	ldr	r1, [pc, #848]	; (8001544 <HAL_PCD_IRQHandler+0x6a4>)
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80011f4:	0038      	movs	r0, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011f6:	400a      	ands	r2, r1
 80011f8:	801a      	strh	r2, [r3, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011fa:	2250      	movs	r2, #80	; 0x50
 80011fc:	5a99      	ldrh	r1, [r3, r2]
 80011fe:	3a28      	subs	r2, #40	; 0x28
 8001200:	5cba      	ldrb	r2, [r7, r2]
 8001202:	00d2      	lsls	r2, r2, #3
 8001204:	189b      	adds	r3, r3, r2
 8001206:	4ad0      	ldr	r2, [pc, #832]	; (8001548 <HAL_PCD_IRQHandler+0x6a8>)
 8001208:	185b      	adds	r3, r3, r1
 800120a:	4694      	mov	ip, r2
        ep->xfer_buff += ep->xfer_count;
 800120c:	6bba      	ldr	r2, [r7, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800120e:	4463      	add	r3, ip
        ep->xfer_buff += ep->xfer_count;
 8001210:	4694      	mov	ip, r2
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001212:	881b      	ldrh	r3, [r3, #0]
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001214:	2100      	movs	r1, #0
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001216:	059b      	lsls	r3, r3, #22
 8001218:	0d9b      	lsrs	r3, r3, #22
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800121c:	4463      	add	r3, ip
 800121e:	63bb      	str	r3, [r7, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001220:	f002 fcee 	bl	8003c00 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001224:	2224      	movs	r2, #36	; 0x24
 8001226:	5cbb      	ldrb	r3, [r7, r2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00c      	beq.n	8001246 <HAL_PCD_IRQHandler+0x3a6>
 800122c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800122e:	2900      	cmp	r1, #0
 8001230:	d109      	bne.n	8001246 <HAL_PCD_IRQHandler+0x3a6>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001232:	2480      	movs	r4, #128	; 0x80
 8001234:	5cb8      	ldrb	r0, [r7, r2]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4320      	orrs	r0, r4
 800123a:	3c34      	subs	r4, #52	; 0x34
 800123c:	5318      	strh	r0, [r3, r4]
          hpcd->USB_Address = 0U;
 800123e:	54b9      	strb	r1, [r7, r2]
 8001240:	e6b4      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001242:	f7ff fcef 	bl	8000c24 <HAL_PCD_EP_Transmit>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	e6b0      	b.n	8000fac <HAL_PCD_IRQHandler+0x10c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800124a:	4ac0      	ldr	r2, [pc, #768]	; (800154c <HAL_PCD_IRQHandler+0x6ac>)
 800124c:	4011      	ands	r1, r2
        if (ep->doublebuffer == 0U)
 800124e:	00e2      	lsls	r2, r4, #3
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8001250:	8001      	strh	r1, [r0, #0]
        if (ep->doublebuffer == 0U)
 8001252:	1b11      	subs	r1, r2, r4
 8001254:	0089      	lsls	r1, r1, #2
 8001256:	1879      	adds	r1, r7, r1
 8001258:	9201      	str	r2, [sp, #4]
 800125a:	000a      	movs	r2, r1
 800125c:	3213      	adds	r2, #19
 800125e:	32ff      	adds	r2, #255	; 0xff
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	2a00      	cmp	r2, #0
 8001264:	d000      	beq.n	8001268 <HAL_PCD_IRQHandler+0x3c8>
 8001266:	e080      	b.n	800136a <HAL_PCD_IRQHandler+0x4ca>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001268:	3250      	adds	r2, #80	; 0x50
 800126a:	5a98      	ldrh	r0, [r3, r2]
 800126c:	000a      	movs	r2, r1
 800126e:	3209      	adds	r2, #9
 8001270:	32ff      	adds	r2, #255	; 0xff
 8001272:	7812      	ldrb	r2, [r2, #0]
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	1812      	adds	r2, r2, r0
 8001278:	48b5      	ldr	r0, [pc, #724]	; (8001550 <HAL_PCD_IRQHandler+0x6b0>)
 800127a:	18d2      	adds	r2, r2, r3
 800127c:	4684      	mov	ip, r0
 800127e:	4462      	add	r2, ip
 8001280:	8812      	ldrh	r2, [r2, #0]
          if (count != 0U)
 8001282:	2000      	movs	r0, #0
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001284:	0592      	lsls	r2, r2, #22
 8001286:	0d92      	lsrs	r2, r2, #22
          if (count != 0U)
 8001288:	d000      	beq.n	800128c <HAL_PCD_IRQHandler+0x3ec>
 800128a:	e125      	b.n	80014d8 <HAL_PCD_IRQHandler+0x638>
        ep->xfer_count+=count;
 800128c:	9b01      	ldr	r3, [sp, #4]
 800128e:	1b19      	subs	r1, r3, r4
 8001290:	0089      	lsls	r1, r1, #2
 8001292:	1879      	adds	r1, r7, r1
 8001294:	000a      	movs	r2, r1
 8001296:	3221      	adds	r2, #33	; 0x21
 8001298:	32ff      	adds	r2, #255	; 0xff
 800129a:	6813      	ldr	r3, [r2, #0]
 800129c:	181b      	adds	r3, r3, r0
 800129e:	6013      	str	r3, [r2, #0]
        ep->xfer_buff+=count;
 80012a0:	000b      	movs	r3, r1
 80012a2:	3319      	adds	r3, #25
 80012a4:	33ff      	adds	r3, #255	; 0xff
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	1812      	adds	r2, r2, r0
 80012aa:	601a      	str	r2, [r3, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80012ac:	3304      	adds	r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	469c      	mov	ip, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d008      	beq.n	80012c8 <HAL_PCD_IRQHandler+0x428>
 80012b6:	238a      	movs	r3, #138	; 0x8a
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4699      	mov	r9, r3
 80012bc:	4489      	add	r9, r1
 80012be:	464b      	mov	r3, r9
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4283      	cmp	r3, r0
 80012c4:	d800      	bhi.n	80012c8 <HAL_PCD_IRQHandler+0x428>
 80012c6:	e134      	b.n	8001532 <HAL_PCD_IRQHandler+0x692>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80012c8:	9b01      	ldr	r3, [sp, #4]
 80012ca:	0038      	movs	r0, r7
 80012cc:	1b1b      	subs	r3, r3, r4
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	3309      	adds	r3, #9
 80012d4:	33ff      	adds	r3, #255	; 0xff
 80012d6:	7819      	ldrb	r1, [r3, #0]
 80012d8:	f002 fc84 	bl	8003be4 <HAL_PCD_DataOutStageCallback>
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	e6b4      	b.n	800104a <HAL_PCD_IRQHandler+0x1aa>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80012e0:	0011      	movs	r1, r2
 80012e2:	3128      	adds	r1, #40	; 0x28
 80012e4:	7809      	ldrb	r1, [r1, #0]
 80012e6:	0088      	lsls	r0, r1, #2
 80012e8:	5ac0      	ldrh	r0, [r0, r3]
 80012ea:	0640      	lsls	r0, r0, #25
 80012ec:	d400      	bmi.n	80012f0 <HAL_PCD_IRQHandler+0x450>
 80012ee:	e090      	b.n	8001412 <HAL_PCD_IRQHandler+0x572>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80012f0:	2050      	movs	r0, #80	; 0x50
 80012f2:	5a18      	ldrh	r0, [r3, r0]
 80012f4:	00c9      	lsls	r1, r1, #3
 80012f6:	4684      	mov	ip, r0
 80012f8:	4893      	ldr	r0, [pc, #588]	; (8001548 <HAL_PCD_IRQHandler+0x6a8>)
 80012fa:	4461      	add	r1, ip
 80012fc:	4683      	mov	fp, r0
 80012fe:	449b      	add	fp, r3
 8001300:	4658      	mov	r0, fp
 8001302:	5a09      	ldrh	r1, [r1, r0]
 8001304:	0589      	lsls	r1, r1, #22
 8001306:	0d89      	lsrs	r1, r1, #22
 8001308:	6411      	str	r1, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 800130a:	d01f      	beq.n	800134c <HAL_PCD_IRQHandler+0x4ac>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800130c:	6b90      	ldr	r0, [r2, #56]	; 0x38
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800130e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001310:	4682      	mov	sl, r0
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001312:	2080      	movs	r0, #128	; 0x80
 8001314:	00c0      	lsls	r0, r0, #3
 8001316:	4684      	mov	ip, r0
 8001318:	4462      	add	r2, ip
 800131a:	4691      	mov	r9, r2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800131c:	3101      	adds	r1, #1
 800131e:	0849      	lsrs	r1, r1, #1
 8001320:	0049      	lsls	r1, r1, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001322:	4499      	add	r9, r3
 8001324:	4451      	add	r1, sl
 8001326:	469c      	mov	ip, r3
 8001328:	46a0      	mov	r8, r4
 800132a:	464b      	mov	r3, r9
 800132c:	4652      	mov	r2, sl
 800132e:	4650      	mov	r0, sl
 8001330:	46b9      	mov	r9, r7
 8001332:	000c      	movs	r4, r1
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8001334:	7851      	ldrb	r1, [r2, #1]
 8001336:	7817      	ldrb	r7, [r2, #0]
 8001338:	0209      	lsls	r1, r1, #8
 800133a:	4339      	orrs	r1, r7
    *pdwVal++ = temp2;
 800133c:	1a17      	subs	r7, r2, r0
 800133e:	3202      	adds	r2, #2
 8001340:	52f9      	strh	r1, [r7, r3]
  for (i = n; i != 0; i--)
 8001342:	42a2      	cmp	r2, r4
 8001344:	d1f6      	bne.n	8001334 <HAL_PCD_IRQHandler+0x494>
 8001346:	4663      	mov	r3, ip
 8001348:	4644      	mov	r4, r8
 800134a:	464f      	mov	r7, r9
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN) 
 800134c:	9a01      	ldr	r2, [sp, #4]
 800134e:	4881      	ldr	r0, [pc, #516]	; (8001554 <HAL_PCD_IRQHandler+0x6b4>)
 8001350:	1b12      	subs	r2, r2, r4
 8001352:	0092      	lsls	r2, r2, #2
 8001354:	18ba      	adds	r2, r7, r2
 8001356:	3228      	adds	r2, #40	; 0x28
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	189a      	adds	r2, r3, r2
 800135e:	8811      	ldrh	r1, [r2, #0]
 8001360:	4008      	ands	r0, r1
 8001362:	497d      	ldr	r1, [pc, #500]	; (8001558 <HAL_PCD_IRQHandler+0x6b8>)
 8001364:	4301      	orrs	r1, r0
 8001366:	8011      	strh	r1, [r2, #0]
 8001368:	e6b6      	b.n	80010d8 <HAL_PCD_IRQHandler+0x238>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 800136a:	000a      	movs	r2, r1
 800136c:	3209      	adds	r2, #9
 800136e:	32ff      	adds	r2, #255	; 0xff
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	0090      	lsls	r0, r2, #2
 8001374:	4681      	mov	r9, r0
 8001376:	4499      	add	r9, r3
 8001378:	4648      	mov	r0, r9
 800137a:	8800      	ldrh	r0, [r0, #0]
 800137c:	4682      	mov	sl, r0
 800137e:	0440      	lsls	r0, r0, #17
 8001380:	d400      	bmi.n	8001384 <HAL_PCD_IRQHandler+0x4e4>
 8001382:	e07a      	b.n	800147a <HAL_PCD_IRQHandler+0x5da>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001384:	2050      	movs	r0, #80	; 0x50
 8001386:	5a18      	ldrh	r0, [r3, r0]
 8001388:	00d2      	lsls	r2, r2, #3
 800138a:	1812      	adds	r2, r2, r0
 800138c:	486e      	ldr	r0, [pc, #440]	; (8001548 <HAL_PCD_IRQHandler+0x6a8>)
 800138e:	189a      	adds	r2, r3, r2
 8001390:	4684      	mov	ip, r0
 8001392:	4462      	add	r2, ip
 8001394:	8812      	ldrh	r2, [r2, #0]
            if (count != 0U)
 8001396:	2000      	movs	r0, #0
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001398:	0592      	lsls	r2, r2, #22
 800139a:	0d92      	lsrs	r2, r2, #22
            if (count != 0U)
 800139c:	d030      	beq.n	8001400 <HAL_PCD_IRQHandler+0x560>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800139e:	0008      	movs	r0, r1
 80013a0:	3019      	adds	r0, #25
 80013a2:	30ff      	adds	r0, #255	; 0xff
 80013a4:	6800      	ldr	r0, [r0, #0]
 80013a6:	310f      	adds	r1, #15
 80013a8:	31ff      	adds	r1, #255	; 0xff
 80013aa:	4682      	mov	sl, r0
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80013ac:	0010      	movs	r0, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80013ae:	880a      	ldrh	r2, [r1, #0]
 80013b0:	2180      	movs	r1, #128	; 0x80
 80013b2:	00c9      	lsls	r1, r1, #3
 80013b4:	468c      	mov	ip, r1
 80013b6:	4462      	add	r2, ip
 80013b8:	4693      	mov	fp, r2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80013ba:	1c42      	adds	r2, r0, #1
 80013bc:	0852      	lsrs	r2, r2, #1
 80013be:	0052      	lsls	r2, r2, #1
 80013c0:	4452      	add	r2, sl
 80013c2:	4691      	mov	r9, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80013c4:	4649      	mov	r1, r9
 80013c6:	449b      	add	fp, r3
 80013c8:	4652      	mov	r2, sl
 80013ca:	469c      	mov	ip, r3
 80013cc:	46a1      	mov	r9, r4
 80013ce:	4653      	mov	r3, sl
 80013d0:	000c      	movs	r4, r1
 80013d2:	4682      	mov	sl, r0
 80013d4:	4658      	mov	r0, fp
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 80013d6:	1ad1      	subs	r1, r2, r3
 80013d8:	5a09      	ldrh	r1, [r1, r0]
 80013da:	8011      	strh	r1, [r2, #0]
 80013dc:	3202      	adds	r2, #2
  for (i = n; i != 0U; i--)
 80013de:	42a2      	cmp	r2, r4
 80013e0:	d1f9      	bne.n	80013d6 <HAL_PCD_IRQHandler+0x536>
 80013e2:	464c      	mov	r4, r9
 80013e4:	46e1      	mov	r9, ip
 80013e6:	9a01      	ldr	r2, [sp, #4]
 80013e8:	4650      	mov	r0, sl
 80013ea:	1b12      	subs	r2, r2, r4
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	18ba      	adds	r2, r7, r2
 80013f0:	3209      	adds	r2, #9
 80013f2:	32ff      	adds	r2, #255	; 0xff
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	4491      	add	r9, r2
 80013fa:	464b      	mov	r3, r9
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	469a      	mov	sl, r3
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8001400:	4652      	mov	r2, sl
 8001402:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_PCD_IRQHandler+0x6b4>)
 8001404:	401a      	ands	r2, r3
 8001406:	0013      	movs	r3, r2
 8001408:	4a54      	ldr	r2, [pc, #336]	; (800155c <HAL_PCD_IRQHandler+0x6bc>)
 800140a:	4313      	orrs	r3, r2
 800140c:	464a      	mov	r2, r9
 800140e:	8013      	strh	r3, [r2, #0]
 8001410:	e73c      	b.n	800128c <HAL_PCD_IRQHandler+0x3ec>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001412:	2050      	movs	r0, #80	; 0x50
 8001414:	5a18      	ldrh	r0, [r3, r0]
 8001416:	00c9      	lsls	r1, r1, #3
 8001418:	4684      	mov	ip, r0
 800141a:	484d      	ldr	r0, [pc, #308]	; (8001550 <HAL_PCD_IRQHandler+0x6b0>)
 800141c:	4461      	add	r1, ip
 800141e:	4684      	mov	ip, r0
 8001420:	18c9      	adds	r1, r1, r3
 8001422:	4461      	add	r1, ip
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	0589      	lsls	r1, r1, #22
 8001428:	0d89      	lsrs	r1, r1, #22
 800142a:	6411      	str	r1, [r2, #64]	; 0x40
            if (ep->xfer_count != 0U)
 800142c:	d021      	beq.n	8001472 <HAL_PCD_IRQHandler+0x5d2>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800142e:	6b90      	ldr	r0, [r2, #56]	; 0x38
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 8001430:	3101      	adds	r1, #1
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001432:	4682      	mov	sl, r0
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 8001434:	2080      	movs	r0, #128	; 0x80
 8001436:	00c0      	lsls	r0, r0, #3
 8001438:	4684      	mov	ip, r0
 800143a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800143c:	0849      	lsrs	r1, r1, #1
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 800143e:	4462      	add	r2, ip
 8001440:	0049      	lsls	r1, r1, #1
 8001442:	4691      	mov	r9, r2
 8001444:	4451      	add	r1, sl
 8001446:	4688      	mov	r8, r1
 8001448:	0039      	movs	r1, r7
 800144a:	4499      	add	r9, r3
 800144c:	469c      	mov	ip, r3
 800144e:	4647      	mov	r7, r8
 8001450:	4652      	mov	r2, sl
 8001452:	46a0      	mov	r8, r4
 8001454:	4653      	mov	r3, sl
 8001456:	464c      	mov	r4, r9
 8001458:	4689      	mov	r9, r1
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 800145a:	7851      	ldrb	r1, [r2, #1]
 800145c:	7810      	ldrb	r0, [r2, #0]
 800145e:	0209      	lsls	r1, r1, #8
 8001460:	4301      	orrs	r1, r0
    *pdwVal++ = temp2;
 8001462:	1ad0      	subs	r0, r2, r3
 8001464:	3202      	adds	r2, #2
 8001466:	5301      	strh	r1, [r0, r4]
  for (i = n; i != 0; i--)
 8001468:	42ba      	cmp	r2, r7
 800146a:	d1f6      	bne.n	800145a <HAL_PCD_IRQHandler+0x5ba>
 800146c:	4663      	mov	r3, ip
 800146e:	4644      	mov	r4, r8
 8001470:	464f      	mov	r7, r9
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_PCD_IRQHandler+0x6a8>)
 8001474:	4693      	mov	fp, r2
 8001476:	449b      	add	fp, r3
 8001478:	e768      	b.n	800134c <HAL_PCD_IRQHandler+0x4ac>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800147a:	2050      	movs	r0, #80	; 0x50
 800147c:	5a18      	ldrh	r0, [r3, r0]
 800147e:	00d2      	lsls	r2, r2, #3
 8001480:	1812      	adds	r2, r2, r0
 8001482:	4833      	ldr	r0, [pc, #204]	; (8001550 <HAL_PCD_IRQHandler+0x6b0>)
 8001484:	189a      	adds	r2, r3, r2
 8001486:	4684      	mov	ip, r0
 8001488:	4462      	add	r2, ip
 800148a:	8812      	ldrh	r2, [r2, #0]
            if (count != 0U)
 800148c:	2000      	movs	r0, #0
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800148e:	0592      	lsls	r2, r2, #22
 8001490:	0d92      	lsrs	r2, r2, #22
            if (count != 0U)
 8001492:	d0b5      	beq.n	8001400 <HAL_PCD_IRQHandler+0x560>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001494:	0008      	movs	r0, r1
 8001496:	3019      	adds	r0, #25
 8001498:	30ff      	adds	r0, #255	; 0xff
 800149a:	6800      	ldr	r0, [r0, #0]
 800149c:	3111      	adds	r1, #17
 800149e:	31ff      	adds	r1, #255	; 0xff
 80014a0:	4681      	mov	r9, r0
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80014a2:	0010      	movs	r0, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80014a4:	880a      	ldrh	r2, [r1, #0]
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	00c9      	lsls	r1, r1, #3
 80014aa:	468c      	mov	ip, r1
 80014ac:	4462      	add	r2, ip
 80014ae:	4693      	mov	fp, r2
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80014b0:	1c42      	adds	r2, r0, #1
 80014b2:	0852      	lsrs	r2, r2, #1
 80014b4:	0052      	lsls	r2, r2, #1
 80014b6:	444a      	add	r2, r9
 80014b8:	4692      	mov	sl, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80014ba:	449b      	add	fp, r3
 80014bc:	464a      	mov	r2, r9
 80014be:	469c      	mov	ip, r3
 80014c0:	464b      	mov	r3, r9
 80014c2:	46a1      	mov	r9, r4
 80014c4:	4654      	mov	r4, sl
 80014c6:	4682      	mov	sl, r0
 80014c8:	4658      	mov	r0, fp
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 80014ca:	1ad1      	subs	r1, r2, r3
 80014cc:	5a09      	ldrh	r1, [r1, r0]
 80014ce:	8011      	strh	r1, [r2, #0]
 80014d0:	3202      	adds	r2, #2
  for (i = n; i != 0U; i--)
 80014d2:	42a2      	cmp	r2, r4
 80014d4:	d1f9      	bne.n	80014ca <HAL_PCD_IRQHandler+0x62a>
 80014d6:	e784      	b.n	80013e2 <HAL_PCD_IRQHandler+0x542>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80014d8:	0008      	movs	r0, r1
 80014da:	3019      	adds	r0, #25
 80014dc:	30ff      	adds	r0, #255	; 0xff
 80014de:	6800      	ldr	r0, [r0, #0]
 80014e0:	310d      	adds	r1, #13
 80014e2:	31ff      	adds	r1, #255	; 0xff
 80014e4:	4681      	mov	r9, r0
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80014e6:	0010      	movs	r0, r2
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80014e8:	880a      	ldrh	r2, [r1, #0]
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	00c9      	lsls	r1, r1, #3
 80014ee:	468c      	mov	ip, r1
 80014f0:	4462      	add	r2, ip
 80014f2:	4692      	mov	sl, r2
 80014f4:	449a      	add	sl, r3
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80014f6:	1c43      	adds	r3, r0, #1
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	444b      	add	r3, r9
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr + (uint32_t)USBx + 0x400U));
 80014fe:	464a      	mov	r2, r9
 8001500:	46a4      	mov	ip, r4
 8001502:	001c      	movs	r4, r3
 8001504:	464b      	mov	r3, r9
 8001506:	4681      	mov	r9, r0
 8001508:	4650      	mov	r0, sl
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 800150a:	1ad1      	subs	r1, r2, r3
 800150c:	5a09      	ldrh	r1, [r1, r0]
 800150e:	8011      	strh	r1, [r2, #0]
 8001510:	3202      	adds	r2, #2
  for (i = n; i != 0U; i--)
 8001512:	42a2      	cmp	r2, r4
 8001514:	d1f9      	bne.n	800150a <HAL_PCD_IRQHandler+0x66a>
 8001516:	4664      	mov	r4, ip
 8001518:	4648      	mov	r0, r9
 800151a:	e6b7      	b.n	800128c <HAL_PCD_IRQHandler+0x3ec>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 800151c:	0941      	lsrs	r1, r0, #5
 800151e:	b289      	uxth	r1, r1
 8001520:	06c0      	lsls	r0, r0, #27
 8001522:	d101      	bne.n	8001528 <HAL_PCD_IRQHandler+0x688>
 8001524:	3901      	subs	r1, #1
 8001526:	b289      	uxth	r1, r1
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <HAL_PCD_IRQHandler+0x6c0>)
 800152a:	0289      	lsls	r1, r1, #10
 800152c:	4301      	orrs	r1, r0
 800152e:	8011      	strh	r1, [r2, #0]
 8001530:	e637      	b.n	80011a2 <HAL_PCD_IRQHandler+0x302>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001532:	3109      	adds	r1, #9
 8001534:	31ff      	adds	r1, #255	; 0xff
 8001536:	4663      	mov	r3, ip
 8001538:	7809      	ldrb	r1, [r1, #0]
 800153a:	0038      	movs	r0, r7
 800153c:	f7ff fa30 	bl	80009a0 <HAL_PCD_EP_Receive>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	e582      	b.n	800104a <HAL_PCD_IRQHandler+0x1aa>
 8001544:	ffff8f0f 	.word	0xffff8f0f
 8001548:	00000402 	.word	0x00000402
 800154c:	00000f8f 	.word	0x00000f8f
 8001550:	00000406 	.word	0x00000406
 8001554:	00000f0f 	.word	0x00000f0f
 8001558:	ffffc080 	.word	0xffffc080
 800155c:	ffff80c0 	.word	0xffff80c0
 8001560:	ffff8000 	.word	0xffff8000

08001564 <HAL_PCD_EP_SetStall>:
  __HAL_LOCK(hpcd); 
 8001564:	23f4      	movs	r3, #244	; 0xf4
{
 8001566:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd); 
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	5cc4      	ldrb	r4, [r0, r3]
{
 800156c:	0002      	movs	r2, r0
  __HAL_LOCK(hpcd); 
 800156e:	2002      	movs	r0, #2
 8001570:	2c01      	cmp	r4, #1
 8001572:	d024      	beq.n	80015be <HAL_PCD_EP_SetStall+0x5a>
 8001574:	3801      	subs	r0, #1
 8001576:	54d0      	strb	r0, [r2, r3]
  if ((0x80U & ep_addr) == 0x80U)
 8001578:	b24b      	sxtb	r3, r1
 800157a:	2b00      	cmp	r3, #0
 800157c:	db20      	blt.n	80015c0 <HAL_PCD_EP_SetStall+0x5c>
  ep->is_stall = 1;
 800157e:	00cb      	lsls	r3, r1, #3
 8001580:	1a5b      	subs	r3, r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	18d3      	adds	r3, r2, r3
 8001586:	001c      	movs	r4, r3
 8001588:	340b      	adds	r4, #11
 800158a:	34ff      	adds	r4, #255	; 0xff
 800158c:	7020      	strb	r0, [r4, #0]
  ep->num   = ep_addr & 0x7FU;
 800158e:	0018      	movs	r0, r3
 8001590:	3009      	adds	r0, #9
 8001592:	30ff      	adds	r0, #255	; 0xff
 8001594:	7001      	strb	r1, [r0, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001596:	2000      	movs	r0, #0
 8001598:	330a      	adds	r3, #10
 800159a:	33ff      	adds	r3, #255	; 0xff
 800159c:	7018      	strb	r0, [r3, #0]
  if (ep->num == 0U)
 800159e:	2900      	cmp	r1, #0
 80015a0:	d12a      	bne.n	80015f8 <HAL_PCD_EP_SetStall+0x94>
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL)
 80015a2:	6810      	ldr	r0, [r2, #0]
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_PCD_EP_SetStall+0xb0>)
 80015a6:	8801      	ldrh	r1, [r0, #0]
 80015a8:	4019      	ands	r1, r3
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_PCD_EP_SetStall+0xb4>)
 80015ac:	4059      	eors	r1, r3
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <HAL_PCD_EP_SetStall+0xb8>)
 80015b0:	430b      	orrs	r3, r1
 80015b2:	8003      	strh	r3, [r0, #0]
  __HAL_UNLOCK(hpcd); 
 80015b4:	23f4      	movs	r3, #244	; 0xf4
 80015b6:	2100      	movs	r1, #0
  return HAL_OK;
 80015b8:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd); 
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	54d1      	strb	r1, [r2, r3]
}
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	237f      	movs	r3, #127	; 0x7f
 80015c2:	4019      	ands	r1, r3
  ep->is_stall = 1;
 80015c4:	00cb      	lsls	r3, r1, #3
 80015c6:	1a5b      	subs	r3, r3, r1
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	18d3      	adds	r3, r2, r3
 80015cc:	001c      	movs	r4, r3
 80015ce:	342a      	adds	r4, #42	; 0x2a
 80015d0:	7020      	strb	r0, [r4, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015d2:	3329      	adds	r3, #41	; 0x29
  ep->num   = ep_addr & 0x7FU;
 80015d4:	3c02      	subs	r4, #2
 80015d6:	7021      	strb	r1, [r4, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 80015d8:	7018      	strb	r0, [r3, #0]
  if (ep->num == 0U)
 80015da:	2900      	cmp	r1, #0
 80015dc:	d0e1      	beq.n	80015a2 <HAL_PCD_EP_SetStall+0x3e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL)
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	0089      	lsls	r1, r1, #2
 80015e2:	469c      	mov	ip, r3
 80015e4:	4461      	add	r1, ip
 80015e6:	880b      	ldrh	r3, [r1, #0]
 80015e8:	480d      	ldr	r0, [pc, #52]	; (8001620 <HAL_PCD_EP_SetStall+0xbc>)
 80015ea:	4003      	ands	r3, r0
 80015ec:	2010      	movs	r0, #16
 80015ee:	4043      	eors	r3, r0
 80015f0:	480a      	ldr	r0, [pc, #40]	; (800161c <HAL_PCD_EP_SetStall+0xb8>)
 80015f2:	4303      	orrs	r3, r0
 80015f4:	800b      	strh	r3, [r1, #0]
 80015f6:	e7dd      	b.n	80015b4 <HAL_PCD_EP_SetStall+0x50>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL)
 80015f8:	6813      	ldr	r3, [r2, #0]
 80015fa:	0089      	lsls	r1, r1, #2
 80015fc:	469c      	mov	ip, r3
 80015fe:	4461      	add	r1, ip
 8001600:	8808      	ldrh	r0, [r1, #0]
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_PCD_EP_SetStall+0xc0>)
 8001604:	4018      	ands	r0, r3
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	4058      	eors	r0, r3
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_PCD_EP_SetStall+0xb8>)
 800160e:	4303      	orrs	r3, r0
 8001610:	800b      	strh	r3, [r1, #0]
 8001612:	e7cf      	b.n	80015b4 <HAL_PCD_EP_SetStall+0x50>
 8001614:	ffffbfbf 	.word	0xffffbfbf
 8001618:	00001010 	.word	0x00001010
 800161c:	ffff8080 	.word	0xffff8080
 8001620:	ffff8fbf 	.word	0xffff8fbf
 8001624:	ffffbf8f 	.word	0xffffbf8f

08001628 <HAL_PCD_EP_ClrStall>:
  if ((0x80U & ep_addr) == 0x80U)
 8001628:	b24a      	sxtb	r2, r1
{
 800162a:	b530      	push	{r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 800162c:	2a00      	cmp	r2, #0
 800162e:	db41      	blt.n	80016b4 <HAL_PCD_EP_ClrStall+0x8c>
    ep = &hpcd->OUT_ep[ep_addr];
 8001630:	00cb      	lsls	r3, r1, #3
 8001632:	1a5b      	subs	r3, r3, r1
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	3309      	adds	r3, #9
 8001638:	33ff      	adds	r3, #255	; 0xff
 800163a:	18c3      	adds	r3, r0, r3
  ep->is_stall = 0U;
 800163c:	2400      	movs	r4, #0
  ep->num   = ep_addr & 0x7FU;
 800163e:	7019      	strb	r1, [r3, #0]
  __HAL_LOCK(hpcd); 
 8001640:	21f4      	movs	r1, #244	; 0xf4
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001642:	0fd2      	lsrs	r2, r2, #31
 8001644:	705a      	strb	r2, [r3, #1]
  ep->is_stall = 0U;
 8001646:	709c      	strb	r4, [r3, #2]
  __HAL_LOCK(hpcd); 
 8001648:	0049      	lsls	r1, r1, #1
 800164a:	5c44      	ldrb	r4, [r0, r1]
 800164c:	2202      	movs	r2, #2
 800164e:	2c01      	cmp	r4, #1
 8001650:	d016      	beq.n	8001680 <HAL_PCD_EP_ClrStall+0x58>
 8001652:	3a01      	subs	r2, #1
 8001654:	5442      	strb	r2, [r0, r1]
  if (ep->is_in)
 8001656:	785a      	ldrb	r2, [r3, #1]
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 8001658:	6804      	ldr	r4, [r0, #0]
  if (ep->is_in)
 800165a:	2a00      	cmp	r2, #0
 800165c:	d012      	beq.n	8001684 <HAL_PCD_EP_ClrStall+0x5c>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	0092      	lsls	r2, r2, #2
 8001662:	18a2      	adds	r2, r4, r2
 8001664:	8811      	ldrh	r1, [r2, #0]
 8001666:	064d      	lsls	r5, r1, #25
 8001668:	d42c      	bmi.n	80016c4 <HAL_PCD_EP_ClrStall+0x9c>
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_PCD_EP_ClrStall+0xb0>)
 800166c:	4019      	ands	r1, r3
 800166e:	2330      	movs	r3, #48	; 0x30
 8001670:	4059      	eors	r1, r3
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <HAL_PCD_EP_ClrStall+0xb4>)
 8001674:	4319      	orrs	r1, r3
 8001676:	8011      	strh	r1, [r2, #0]
  __HAL_UNLOCK(hpcd); 
 8001678:	23f4      	movs	r3, #244	; 0xf4
 800167a:	2200      	movs	r2, #0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	54c2      	strb	r2, [r0, r3]
}
 8001680:	0010      	movs	r0, r2
 8001682:	bd30      	pop	{r4, r5, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num)
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	0092      	lsls	r2, r2, #2
 8001688:	18a2      	adds	r2, r4, r2
 800168a:	8811      	ldrh	r1, [r2, #0]
 800168c:	044d      	lsls	r5, r1, #17
 800168e:	d508      	bpl.n	80016a2 <HAL_PCD_EP_ClrStall+0x7a>
 8001690:	4d13      	ldr	r5, [pc, #76]	; (80016e0 <HAL_PCD_EP_ClrStall+0xb8>)
 8001692:	4029      	ands	r1, r5
 8001694:	4d13      	ldr	r5, [pc, #76]	; (80016e4 <HAL_PCD_EP_ClrStall+0xbc>)
 8001696:	4329      	orrs	r1, r5
 8001698:	8011      	strh	r1, [r2, #0]
 800169a:	781a      	ldrb	r2, [r3, #0]
 800169c:	0092      	lsls	r2, r2, #2
 800169e:	18a2      	adds	r2, r4, r2
 80016a0:	8811      	ldrh	r1, [r2, #0]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <HAL_PCD_EP_ClrStall+0xc0>)
 80016a4:	4019      	ands	r1, r3
 80016a6:	23c0      	movs	r3, #192	; 0xc0
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	404b      	eors	r3, r1
 80016ac:	490b      	ldr	r1, [pc, #44]	; (80016dc <HAL_PCD_EP_ClrStall+0xb4>)
 80016ae:	4319      	orrs	r1, r3
 80016b0:	8011      	strh	r1, [r2, #0]
 80016b2:	e7e1      	b.n	8001678 <HAL_PCD_EP_ClrStall+0x50>
 80016b4:	237f      	movs	r3, #127	; 0x7f
 80016b6:	4019      	ands	r1, r3
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016b8:	00cb      	lsls	r3, r1, #3
 80016ba:	1a5b      	subs	r3, r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	3328      	adds	r3, #40	; 0x28
 80016c0:	18c3      	adds	r3, r0, r3
 80016c2:	e7bb      	b.n	800163c <HAL_PCD_EP_ClrStall+0x14>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num)
 80016c4:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <HAL_PCD_EP_ClrStall+0xb8>)
 80016c6:	4029      	ands	r1, r5
 80016c8:	4d08      	ldr	r5, [pc, #32]	; (80016ec <HAL_PCD_EP_ClrStall+0xc4>)
 80016ca:	4329      	orrs	r1, r5
 80016cc:	8011      	strh	r1, [r2, #0]
 80016ce:	781a      	ldrb	r2, [r3, #0]
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	18a2      	adds	r2, r4, r2
 80016d4:	8811      	ldrh	r1, [r2, #0]
 80016d6:	e7c8      	b.n	800166a <HAL_PCD_EP_ClrStall+0x42>
 80016d8:	ffff8fbf 	.word	0xffff8fbf
 80016dc:	ffff8080 	.word	0xffff8080
 80016e0:	00000f0f 	.word	0x00000f0f
 80016e4:	ffffc080 	.word	0xffffc080
 80016e8:	ffffbf8f 	.word	0xffffbf8f
 80016ec:	ffff80c0 	.word	0xffff80c0

080016f0 <HAL_PCDEx_PMAConfig>:
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 80016f0:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80016f2:	060c      	lsls	r4, r1, #24
 80016f4:	d50f      	bpl.n	8001716 <HAL_PCDEx_PMAConfig+0x26>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016f6:	247f      	movs	r4, #127	; 0x7f
 80016f8:	4021      	ands	r1, r4
 80016fa:	00cc      	lsls	r4, r1, #3
 80016fc:	1a61      	subs	r1, r4, r1
 80016fe:	0089      	lsls	r1, r1, #2
 8001700:	3128      	adds	r1, #40	; 0x28
 8001702:	1840      	adds	r0, r0, r1
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001704:	2a00      	cmp	r2, #0
 8001706:	d00e      	beq.n	8001726 <HAL_PCDEx_PMAConfig+0x36>
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1U;
 8001708:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFFU;
 800170a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 800170c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800170e:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001710:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK;
}
 8001712:	2000      	movs	r0, #0
 8001714:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8001716:	00cc      	lsls	r4, r1, #3
 8001718:	1a61      	subs	r1, r4, r1
 800171a:	0089      	lsls	r1, r1, #2
 800171c:	3109      	adds	r1, #9
 800171e:	31ff      	adds	r1, #255	; 0xff
 8001720:	1840      	adds	r0, r0, r1
  if (ep_kind == PCD_SNG_BUF)
 8001722:	2a00      	cmp	r2, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_PCDEx_PMAConfig+0x18>
    ep->doublebuffer = 0U;
 8001726:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8001728:	8083      	strh	r3, [r0, #4]
 800172a:	e7f2      	b.n	8001712 <HAL_PCDEx_PMAConfig+0x22>

0800172c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800172c:	4b01      	ldr	r3, [pc, #4]	; (8001734 <HAL_RCC_GetHCLKFreq+0x8>)
 800172e:	6818      	ldr	r0, [r3, #0]
}
 8001730:	4770      	bx	lr
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000138 	.word	0x20000138

08001738 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001738:	2386      	movs	r3, #134	; 0x86
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	58c3      	ldr	r3, [r0, r3]
  
  if(pdev->pClassData != NULL)
 800173e:	2b00      	cmp	r3, #0
 8001740:	d005      	beq.n	800174e <USBD_CDC_DataIn+0x16>
  {
    
    hcdc->TxState = 0;
 8001742:	2285      	movs	r2, #133	; 0x85
 8001744:	2100      	movs	r1, #0

    return USBD_OK;
 8001746:	2000      	movs	r0, #0
    hcdc->TxState = 0;
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	5099      	str	r1, [r3, r2]
  }
  else
  {
    return USBD_FAIL;
  }
}
 800174c:	4770      	bx	lr
    return USBD_FAIL;
 800174e:	2002      	movs	r0, #2
 8001750:	e7fc      	b.n	800174c <USBD_CDC_DataIn+0x14>
 8001752:	46c0      	nop			; (mov r8, r8)

08001754 <USBD_CDC_EP0_RxReady>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001754:	2386      	movs	r3, #134	; 0x86
 8001756:	009b      	lsls	r3, r3, #2
{ 
 8001758:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800175a:	58c4      	ldr	r4, [r0, r3]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800175c:	3304      	adds	r3, #4
 800175e:	58c3      	ldr	r3, [r0, r3]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00b      	beq.n	800177c <USBD_CDC_EP0_RxReady+0x28>
 8001764:	2580      	movs	r5, #128	; 0x80
 8001766:	00ad      	lsls	r5, r5, #2
 8001768:	5d60      	ldrb	r0, [r4, r5]
 800176a:	28ff      	cmp	r0, #255	; 0xff
 800176c:	d006      	beq.n	800177c <USBD_CDC_EP0_RxReady+0x28>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <USBD_CDC_EP0_RxReady+0x2c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	5ca2      	ldrb	r2, [r4, r2]
 8001774:	0021      	movs	r1, r4
 8001776:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001778:	23ff      	movs	r3, #255	; 0xff
 800177a:	5563      	strb	r3, [r4, r5]
      
  }
  return USBD_OK;
}
 800177c:	2000      	movs	r0, #0
 800177e:	bd70      	pop	{r4, r5, r6, pc}
 8001780:	00000201 	.word	0x00000201

08001784 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001784:	2343      	movs	r3, #67	; 0x43
 8001786:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001788:	4800      	ldr	r0, [pc, #0]	; (800178c <USBD_CDC_GetFSCfgDesc+0x8>)
 800178a:	4770      	bx	lr
 800178c:	20000038 	.word	0x20000038

08001790 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001790:	2343      	movs	r3, #67	; 0x43
 8001792:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001794:	4800      	ldr	r0, [pc, #0]	; (8001798 <USBD_CDC_GetHSCfgDesc+0x8>)
 8001796:	4770      	bx	lr
 8001798:	2000007c 	.word	0x2000007c

0800179c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800179c:	2343      	movs	r3, #67	; 0x43
 800179e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80017a0:	4800      	ldr	r0, [pc, #0]	; (80017a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80017a2:	4770      	bx	lr
 80017a4:	200000cc 	.word	0x200000cc

080017a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80017a8:	230a      	movs	r3, #10
 80017aa:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80017ac:	4800      	ldr	r0, [pc, #0]	; (80017b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80017ae:	4770      	bx	lr
 80017b0:	200000c0 	.word	0x200000c0

080017b4 <USBD_CDC_DataOut>:
{      
 80017b4:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80017b6:	2686      	movs	r6, #134	; 0x86
 80017b8:	00b6      	lsls	r6, r6, #2
{      
 80017ba:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80017bc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80017be:	f002 fb41 	bl	8003e44 <USBD_LL_GetRxDataSize>
 80017c2:	2383      	movs	r3, #131	; 0x83
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	50e8      	str	r0, [r5, r3]
  if(pdev->pClassData != NULL)
 80017c8:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 80017ca:	2002      	movs	r0, #2
  if(pdev->pClassData != NULL)
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d009      	beq.n	80017e4 <USBD_CDC_DataOut+0x30>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80017d0:	2383      	movs	r3, #131	; 0x83
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	18e9      	adds	r1, r5, r3
 80017d6:	3b08      	subs	r3, #8
 80017d8:	58e8      	ldr	r0, [r5, r3]
 80017da:	3318      	adds	r3, #24
 80017dc:	58e3      	ldr	r3, [r4, r3]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4798      	blx	r3
    return USBD_OK;
 80017e2:	2000      	movs	r0, #0
}
 80017e4:	bd70      	pop	{r4, r5, r6, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)

080017e8 <USBD_CDC_Setup>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017e8:	2360      	movs	r3, #96	; 0x60
{
 80017ea:	b570      	push	{r4, r5, r6, lr}
 80017ec:	000c      	movs	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017ee:	7809      	ldrb	r1, [r1, #0]
{
 80017f0:	0005      	movs	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80017f2:	400b      	ands	r3, r1
 80017f4:	d015      	beq.n	8001822 <USBD_CDC_Setup+0x3a>
 80017f6:	2b20      	cmp	r3, #32
 80017f8:	d111      	bne.n	800181e <USBD_CDC_Setup+0x36>
    if (req->wLength)
 80017fa:	88e2      	ldrh	r2, [r4, #6]
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d024      	beq.n	800184a <USBD_CDC_Setup+0x62>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001800:	33f9      	adds	r3, #249	; 0xf9
 8001802:	33ff      	adds	r3, #255	; 0xff
      if (req->bmRequest & 0x80)
 8001804:	b249      	sxtb	r1, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001806:	58c6      	ldr	r6, [r0, r3]
      if (req->bmRequest & 0x80)
 8001808:	2900      	cmp	r1, #0
 800180a:	db12      	blt.n	8001832 <USBD_CDC_Setup+0x4a>
        hcdc->CmdOpCode = req->bRequest;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	7861      	ldrb	r1, [r4, #1]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	54f1      	strb	r1, [r6, r3]
        hcdc->CmdLength = req->wLength;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <USBD_CDC_Setup+0x74>)
        USBD_CtlPrepareRx (pdev, 
 8001816:	0031      	movs	r1, r6
        hcdc->CmdLength = req->wLength;
 8001818:	54f2      	strb	r2, [r6, r3]
        USBD_CtlPrepareRx (pdev, 
 800181a:	f000 fc87 	bl	800212c <USBD_CtlPrepareRx>
}
 800181e:	2000      	movs	r0, #0
 8001820:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8001822:	7863      	ldrb	r3, [r4, #1]
 8001824:	2b0a      	cmp	r3, #10
 8001826:	d1fa      	bne.n	800181e <USBD_CDC_Setup+0x36>
      USBD_CtlSendData (pdev,
 8001828:	2201      	movs	r2, #1
 800182a:	490d      	ldr	r1, [pc, #52]	; (8001860 <USBD_CDC_Setup+0x78>)
 800182c:	f000 fc68 	bl	8002100 <USBD_CtlSendData>
      break;
 8001830:	e7f5      	b.n	800181e <USBD_CDC_Setup+0x36>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001832:	3304      	adds	r3, #4
 8001834:	58eb      	ldr	r3, [r5, r3]
 8001836:	0031      	movs	r1, r6
 8001838:	7860      	ldrb	r0, [r4, #1]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 800183e:	88e2      	ldrh	r2, [r4, #6]
 8001840:	0031      	movs	r1, r6
 8001842:	0028      	movs	r0, r5
 8001844:	f000 fc5c 	bl	8002100 <USBD_CtlSendData>
 8001848:	e7e9      	b.n	800181e <USBD_CDC_Setup+0x36>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800184a:	2387      	movs	r3, #135	; 0x87
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	58eb      	ldr	r3, [r5, r3]
 8001850:	7860      	ldrb	r0, [r4, #1]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2200      	movs	r2, #0
 8001856:	0021      	movs	r1, r4
 8001858:	4798      	blx	r3
 800185a:	e7e0      	b.n	800181e <USBD_CDC_Setup+0x36>
 800185c:	00000201 	.word	0x00000201
 8001860:	200001ac 	.word	0x200001ac

08001864 <USBD_CDC_DeInit>:
{
 8001864:	b570      	push	{r4, r5, r6, lr}
 8001866:	0004      	movs	r4, r0
  if(pdev->pClassData != NULL)
 8001868:	2586      	movs	r5, #134	; 0x86
  USBD_LL_CloseEP(pdev,
 800186a:	2181      	movs	r1, #129	; 0x81
 800186c:	f002 fa72 	bl	8003d54 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001870:	2101      	movs	r1, #1
 8001872:	0020      	movs	r0, r4
 8001874:	f002 fa6e 	bl	8003d54 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001878:	00ad      	lsls	r5, r5, #2
  USBD_LL_CloseEP(pdev,
 800187a:	2182      	movs	r1, #130	; 0x82
 800187c:	0020      	movs	r0, r4
 800187e:	f002 fa69 	bl	8003d54 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001882:	5963      	ldr	r3, [r4, r5]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <USBD_CDC_DeInit+0x38>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001888:	2387      	movs	r3, #135	; 0x87
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	58e3      	ldr	r3, [r4, r3]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001892:	5960      	ldr	r0, [r4, r5]
 8001894:	f002 fae2 	bl	8003e5c <USBD_static_free>
    pdev->pClassData = NULL;
 8001898:	2300      	movs	r3, #0
 800189a:	5163      	str	r3, [r4, r5]
}
 800189c:	2000      	movs	r0, #0
 800189e:	bd70      	pop	{r4, r5, r6, pc}

080018a0 <USBD_CDC_Init>:
{
 80018a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80018a2:	7c03      	ldrb	r3, [r0, #16]
{
 80018a4:	0004      	movs	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d132      	bne.n	8001910 <USBD_CDC_Init+0x70>
    USBD_LL_OpenEP(pdev,
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	2202      	movs	r2, #2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	2181      	movs	r1, #129	; 0x81
 80018b2:	f002 fa3d 	bl	8003d30 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	2202      	movs	r2, #2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	2101      	movs	r1, #1
 80018be:	0020      	movs	r0, r4
 80018c0:	f002 fa36 	bl	8003d30 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80018c4:	2787      	movs	r7, #135	; 0x87
  USBD_LL_OpenEP(pdev,
 80018c6:	2308      	movs	r3, #8
 80018c8:	2203      	movs	r2, #3
 80018ca:	2182      	movs	r1, #130	; 0x82
 80018cc:	0020      	movs	r0, r4
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80018ce:	00bf      	lsls	r7, r7, #2
  USBD_LL_OpenEP(pdev,
 80018d0:	f002 fa2e 	bl	8003d30 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80018d4:	2686      	movs	r6, #134	; 0x86
 80018d6:	0038      	movs	r0, r7
 80018d8:	f002 fabc 	bl	8003e54 <USBD_static_malloc>
 80018dc:	00b6      	lsls	r6, r6, #2
 80018de:	1e05      	subs	r5, r0, #0
 80018e0:	51a0      	str	r0, [r4, r6]
  if(pdev->pClassData == NULL)
 80018e2:	d02b      	beq.n	800193c <USBD_CDC_Init+0x9c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80018e4:	59e3      	ldr	r3, [r4, r7]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4798      	blx	r3
    hcdc->TxState =0;
 80018ea:	2285      	movs	r2, #133	; 0x85
 80018ec:	2300      	movs	r3, #0
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	50ab      	str	r3, [r5, r2]
    hcdc->RxState =0;
 80018f2:	51ab      	str	r3, [r5, r6]
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80018f4:	7c23      	ldrb	r3, [r4, #16]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <USBD_CDC_Init+0x88>
      USBD_LL_PrepareReceive(pdev,
 80018fa:	2381      	movs	r3, #129	; 0x81
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	58ea      	ldr	r2, [r5, r3]
 8001900:	3bc5      	subs	r3, #197	; 0xc5
 8001902:	3bff      	subs	r3, #255	; 0xff
 8001904:	2101      	movs	r1, #1
 8001906:	0020      	movs	r0, r4
 8001908:	f002 fa8c 	bl	8003e24 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800190c:	2000      	movs	r0, #0
}
 800190e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	2202      	movs	r2, #2
 8001914:	2181      	movs	r1, #129	; 0x81
 8001916:	f002 fa0b 	bl	8003d30 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800191a:	2340      	movs	r3, #64	; 0x40
 800191c:	2202      	movs	r2, #2
 800191e:	2101      	movs	r1, #1
 8001920:	0020      	movs	r0, r4
 8001922:	f002 fa05 	bl	8003d30 <USBD_LL_OpenEP>
 8001926:	e7cd      	b.n	80018c4 <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev,
 8001928:	2381      	movs	r3, #129	; 0x81
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	58ea      	ldr	r2, [r5, r3]
 800192e:	2101      	movs	r1, #1
 8001930:	3b04      	subs	r3, #4
 8001932:	0020      	movs	r0, r4
 8001934:	f002 fa76 	bl	8003e24 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001938:	2000      	movs	r0, #0
 800193a:	e7e8      	b.n	800190e <USBD_CDC_Init+0x6e>
    ret = 1; 
 800193c:	2001      	movs	r0, #1
 800193e:	e7e6      	b.n	800190e <USBD_CDC_Init+0x6e>

08001940 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8001940:	2900      	cmp	r1, #0
 8001942:	d004      	beq.n	800194e <USBD_CDC_RegisterInterface+0xe>
  {
    pdev->pUserData= fops;
 8001944:	2387      	movs	r3, #135	; 0x87
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	50c1      	str	r1, [r0, r3]
    ret = USBD_OK;    
 800194a:	2000      	movs	r0, #0
  }
  
  return ret;
}
 800194c:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800194e:	2002      	movs	r0, #2
 8001950:	e7fc      	b.n	800194c <USBD_CDC_RegisterInterface+0xc>
 8001952:	46c0      	nop			; (mov r8, r8)

08001954 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001954:	2386      	movs	r3, #134	; 0x86
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	58c3      	ldr	r3, [r0, r3]
  
  hcdc->TxBuffer = pbuff;
 800195a:	2082      	movs	r0, #130	; 0x82
 800195c:	0080      	lsls	r0, r0, #2
 800195e:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;  
 8001960:	2184      	movs	r1, #132	; 0x84
 8001962:	0089      	lsls	r1, r1, #2
  
  return USBD_OK;  
}
 8001964:	2000      	movs	r0, #0
  hcdc->TxLength = length;  
 8001966:	505a      	str	r2, [r3, r1]
}
 8001968:	4770      	bx	lr
 800196a:	46c0      	nop			; (mov r8, r8)

0800196c <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800196c:	2386      	movs	r3, #134	; 0x86
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	58c2      	ldr	r2, [r0, r3]
 8001972:	3b14      	subs	r3, #20
  
  return USBD_OK;
}
 8001974:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8001976:	50d1      	str	r1, [r2, r3]
}
 8001978:	4770      	bx	lr
 800197a:	46c0      	nop			; (mov r8, r8)

0800197c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800197c:	2386      	movs	r3, #134	; 0x86
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	58c2      	ldr	r2, [r0, r3]
{      
 8001982:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8001984:	2a00      	cmp	r2, #0
 8001986:	d013      	beq.n	80019b0 <USBD_CDC_TransmitPacket+0x34>
  {
    if(hcdc->TxState == 0)
 8001988:	2185      	movs	r1, #133	; 0x85
 800198a:	0089      	lsls	r1, r1, #2
 800198c:	5854      	ldr	r4, [r2, r1]
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 800198e:	2301      	movs	r3, #1
    if(hcdc->TxState == 0)
 8001990:	2c00      	cmp	r4, #0
 8001992:	d001      	beq.n	8001998 <USBD_CDC_TransmitPacket+0x1c>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8001994:	0018      	movs	r0, r3
 8001996:	bd10      	pop	{r4, pc}
      hcdc->TxState = 1;
 8001998:	5053      	str	r3, [r2, r1]
      USBD_LL_Transmit(pdev,
 800199a:	2384      	movs	r3, #132	; 0x84
 800199c:	390c      	subs	r1, #12
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	5ad3      	ldrh	r3, [r2, r3]
 80019a2:	5852      	ldr	r2, [r2, r1]
 80019a4:	3988      	subs	r1, #136	; 0x88
 80019a6:	39ff      	subs	r1, #255	; 0xff
 80019a8:	f002 fa2c 	bl	8003e04 <USBD_LL_Transmit>
      return USBD_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e7f1      	b.n	8001994 <USBD_CDC_TransmitPacket+0x18>
    return USBD_FAIL;
 80019b0:	2302      	movs	r3, #2
 80019b2:	e7ef      	b.n	8001994 <USBD_CDC_TransmitPacket+0x18>

080019b4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80019b4:	2386      	movs	r3, #134	; 0x86
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	58c3      	ldr	r3, [r0, r3]
{      
 80019ba:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <USBD_CDC_ReceivePacket+0x38>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80019c0:	7c02      	ldrb	r2, [r0, #16]
 80019c2:	2a00      	cmp	r2, #0
 80019c4:	d008      	beq.n	80019d8 <USBD_CDC_ReceivePacket+0x24>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80019c6:	2281      	movs	r2, #129	; 0x81
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	589a      	ldr	r2, [r3, r2]
 80019cc:	2101      	movs	r1, #1
 80019ce:	2340      	movs	r3, #64	; 0x40
 80019d0:	f002 fa28 	bl	8003e24 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80019d4:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80019d6:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80019d8:	2281      	movs	r2, #129	; 0x81
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	589a      	ldr	r2, [r3, r2]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	2101      	movs	r1, #1
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	f002 fa1e 	bl	8003e24 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80019e8:	2000      	movs	r0, #0
 80019ea:	e7f4      	b.n	80019d6 <USBD_CDC_ReceivePacket+0x22>
    return USBD_FAIL;
 80019ec:	2002      	movs	r0, #2
 80019ee:	e7f2      	b.n	80019d6 <USBD_CDC_ReceivePacket+0x22>

080019f0 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80019f0:	b510      	push	{r4, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80019f2:	2800      	cmp	r0, #0
 80019f4:	d014      	beq.n	8001a20 <USBD_Init+0x30>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80019f6:	2385      	movs	r3, #133	; 0x85
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	58c4      	ldr	r4, [r0, r3]
 80019fc:	2c00      	cmp	r4, #0
 80019fe:	d001      	beq.n	8001a04 <USBD_Init+0x14>
  {
    pdev->pClass = NULL;
 8001a00:	2400      	movs	r4, #0
 8001a02:	50c4      	str	r4, [r0, r3]
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8001a04:	2900      	cmp	r1, #0
 8001a06:	d002      	beq.n	8001a0e <USBD_Init+0x1e>
  {
    pdev->pDesc = pdesc;
 8001a08:	2384      	movs	r3, #132	; 0x84
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	50c1      	str	r1, [r0, r3]
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8001a0e:	23fe      	movs	r3, #254	; 0xfe
 8001a10:	2101      	movs	r1, #1
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8001a16:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8001a18:	f002 f938 	bl	8003c8c <USBD_LL_Init>
  
  return USBD_OK; 
 8001a1c:	2000      	movs	r0, #0
}
 8001a1e:	bd10      	pop	{r4, pc}
    return USBD_FAIL; 
 8001a20:	2002      	movs	r0, #2
 8001a22:	e7fc      	b.n	8001a1e <USBD_Init+0x2e>

08001a24 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8001a24:	2900      	cmp	r1, #0
 8001a26:	d004      	beq.n	8001a32 <USBD_RegisterClass+0xe>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8001a28:	2385      	movs	r3, #133	; 0x85
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	50c1      	str	r1, [r0, r3]
    status = USBD_OK;
 8001a2e:	2000      	movs	r0, #0
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
  }
  
  return status;
}
 8001a30:	4770      	bx	lr
    status = USBD_FAIL; 
 8001a32:	2002      	movs	r0, #2
 8001a34:	e7fc      	b.n	8001a30 <USBD_RegisterClass+0xc>
 8001a36:	46c0      	nop			; (mov r8, r8)

08001a38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8001a38:	b510      	push	{r4, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8001a3a:	f002 f969 	bl	8003d10 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8001a3e:	2000      	movs	r0, #0
 8001a40:	bd10      	pop	{r4, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)

08001a44 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8001a44:	2385      	movs	r3, #133	; 0x85
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	58c3      	ldr	r3, [r0, r3]
{
 8001a4a:	b510      	push	{r4, lr}
  if(pdev->pClass != NULL)
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4798      	blx	r3
 8001a54:	2800      	cmp	r0, #0
 8001a56:	d000      	beq.n	8001a5a <USBD_SetClassConfig+0x16>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8001a58:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8001a5a:	bd10      	pop	{r4, pc}

08001a5c <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001a5c:	2385      	movs	r3, #133	; 0x85
{
 8001a5e:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);  
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	58c3      	ldr	r3, [r0, r3]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4798      	blx	r3
  return USBD_OK;
}
 8001a68:	2000      	movs	r0, #0
 8001a6a:	bd10      	pop	{r4, pc}

08001a6c <USBD_LL_SetupStage>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001a6c:	2382      	movs	r3, #130	; 0x82
 8001a6e:	009b      	lsls	r3, r3, #2
{
 8001a70:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001a72:	18c5      	adds	r5, r0, r3
{
 8001a74:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8001a76:	0028      	movs	r0, r5
 8001a78:	f000 fb06 	bl	8002088 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8001a7c:	23fa      	movs	r3, #250	; 0xfa
 8001a7e:	2201      	movs	r2, #1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	50e2      	str	r2, [r4, r3]
  pdev->ep0_data_len = pdev->request.wLength;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <USBD_LL_SetupStage+0x64>)
 8001a86:	5ae2      	ldrh	r2, [r4, r3]
 8001a88:	3b16      	subs	r3, #22
 8001a8a:	50e2      	str	r2, [r4, r3]
  
  switch (pdev->request.bmRequest & 0x1F) 
 8001a8c:	3310      	adds	r3, #16
 8001a8e:	5ce1      	ldrb	r1, [r4, r3]
 8001a90:	3bea      	subs	r3, #234	; 0xea
 8001a92:	3bff      	subs	r3, #255	; 0xff
 8001a94:	400b      	ands	r3, r1
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d014      	beq.n	8001ac4 <USBD_LL_SetupStage+0x58>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00d      	beq.n	8001aba <USBD_LL_SetupStage+0x4e>
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d006      	beq.n	8001ab0 <USBD_LL_SetupStage+0x44>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8001aa2:	237f      	movs	r3, #127	; 0x7f
 8001aa4:	0020      	movs	r0, r4
 8001aa6:	4399      	bics	r1, r3
 8001aa8:	f002 f964 	bl	8003d74 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8001aac:	2000      	movs	r0, #0
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
    USBD_StdEPReq(pdev, &pdev->request);   
 8001ab0:	0029      	movs	r1, r5
 8001ab2:	0020      	movs	r0, r4
 8001ab4:	f000 fa74 	bl	8001fa0 <USBD_StdEPReq>
    break;
 8001ab8:	e7f8      	b.n	8001aac <USBD_LL_SetupStage+0x40>
    USBD_StdDevReq (pdev, &pdev->request);
 8001aba:	0029      	movs	r1, r5
 8001abc:	0020      	movs	r0, r4
 8001abe:	f000 f8eb 	bl	8001c98 <USBD_StdDevReq>
    break;
 8001ac2:	e7f3      	b.n	8001aac <USBD_LL_SetupStage+0x40>
    USBD_StdItfReq(pdev, &pdev->request);
 8001ac4:	0029      	movs	r1, r5
 8001ac6:	0020      	movs	r0, r4
 8001ac8:	f000 fa48 	bl	8001f5c <USBD_StdItfReq>
    break;
 8001acc:	e7ee      	b.n	8001aac <USBD_LL_SetupStage+0x40>
 8001ace:	46c0      	nop			; (mov r8, r8)
 8001ad0:	0000020e 	.word	0x0000020e

08001ad4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8001ad4:	b510      	push	{r4, lr}
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	0004      	movs	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d106      	bne.n	8001aec <USBD_LL_DataOutStage+0x18>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8001ade:	22fa      	movs	r2, #250	; 0xfa
 8001ae0:	0052      	lsls	r2, r2, #1
 8001ae2:	5882      	ldr	r2, [r0, r2]
 8001ae4:	2a03      	cmp	r2, #3
 8001ae6:	d00e      	beq.n	8001b06 <USBD_LL_DataOutStage+0x32>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001ae8:	2000      	movs	r0, #0
 8001aea:	bd10      	pop	{r4, pc}
  else if((pdev->pClass->DataOut != NULL)&&
 8001aec:	2385      	movs	r3, #133	; 0x85
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	58c3      	ldr	r3, [r0, r3]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f7      	beq.n	8001ae8 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8001af8:	22fe      	movs	r2, #254	; 0xfe
 8001afa:	0052      	lsls	r2, r2, #1
  else if((pdev->pClass->DataOut != NULL)&&
 8001afc:	5c82      	ldrb	r2, [r0, r2]
 8001afe:	2a03      	cmp	r2, #3
 8001b00:	d1f2      	bne.n	8001ae8 <USBD_LL_DataOutStage+0x14>
    pdev->pClass->DataOut(pdev, epnum); 
 8001b02:	4798      	blx	r3
 8001b04:	e7f0      	b.n	8001ae8 <USBD_LL_DataOutStage+0x14>
      if(pep->rem_length > pep->maxpacket)
 8001b06:	1d41      	adds	r1, r0, #5
 8001b08:	31ff      	adds	r1, #255	; 0xff
 8001b0a:	6888      	ldr	r0, [r1, #8]
 8001b0c:	68ca      	ldr	r2, [r1, #12]
 8001b0e:	4290      	cmp	r0, r2
 8001b10:	d80e      	bhi.n	8001b30 <USBD_LL_DataOutStage+0x5c>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001b12:	2385      	movs	r3, #133	; 0x85
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	58e3      	ldr	r3, [r4, r3]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <USBD_LL_DataOutStage+0x54>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8001b1e:	22fe      	movs	r2, #254	; 0xfe
 8001b20:	0052      	lsls	r2, r2, #1
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8001b22:	5ca2      	ldrb	r2, [r4, r2]
 8001b24:	2a03      	cmp	r2, #3
 8001b26:	d00e      	beq.n	8001b46 <USBD_LL_DataOutStage+0x72>
        USBD_CtlSendStatus(pdev);
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f000 fb17 	bl	800215c <USBD_CtlSendStatus>
 8001b2e:	e7db      	b.n	8001ae8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 8001b30:	1a80      	subs	r0, r0, r2
 8001b32:	6088      	str	r0, [r1, #8]
                            MIN(pep->rem_length ,pep->maxpacket));
 8001b34:	4282      	cmp	r2, r0
 8001b36:	d900      	bls.n	8001b3a <USBD_LL_DataOutStage+0x66>
 8001b38:	0002      	movs	r2, r0
        USBD_CtlContinueRx (pdev, 
 8001b3a:	b292      	uxth	r2, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	0020      	movs	r0, r4
 8001b40:	f000 fb04 	bl	800214c <USBD_CtlContinueRx>
 8001b44:	e7d0      	b.n	8001ae8 <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev); 
 8001b46:	0020      	movs	r0, r4
 8001b48:	4798      	blx	r3
 8001b4a:	e7ed      	b.n	8001b28 <USBD_LL_DataOutStage+0x54>

08001b4c <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	0004      	movs	r4, r0
 8001b50:	0013      	movs	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8001b52:	2900      	cmp	r1, #0
 8001b54:	d10b      	bne.n	8001b6e <USBD_LL_DataInStage+0x22>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8001b56:	22fa      	movs	r2, #250	; 0xfa
 8001b58:	0052      	lsls	r2, r2, #1
 8001b5a:	5882      	ldr	r2, [r0, r2]
 8001b5c:	2a02      	cmp	r2, #2
 8001b5e:	d016      	beq.n	8001b8e <USBD_LL_DataInStage+0x42>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	5ce2      	ldrb	r2, [r4, r3]
 8001b66:	2a01      	cmp	r2, #1
 8001b68:	d00e      	beq.n	8001b88 <USBD_LL_DataInStage+0x3c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if((pdev->pClass->DataIn != NULL)&& 
 8001b6e:	2385      	movs	r3, #133	; 0x85
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	58c3      	ldr	r3, [r0, r3]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f7      	beq.n	8001b6a <USBD_LL_DataInStage+0x1e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8001b7a:	22fe      	movs	r2, #254	; 0xfe
 8001b7c:	0052      	lsls	r2, r2, #1
  else if((pdev->pClass->DataIn != NULL)&& 
 8001b7e:	5c82      	ldrb	r2, [r0, r2]
 8001b80:	2a03      	cmp	r2, #3
 8001b82:	d1f2      	bne.n	8001b6a <USBD_LL_DataInStage+0x1e>
    pdev->pClass->DataIn(pdev, epnum); 
 8001b84:	4798      	blx	r3
 8001b86:	e7f0      	b.n	8001b6a <USBD_LL_DataInStage+0x1e>
      pdev->dev_test_mode = 0;
 8001b88:	2200      	movs	r2, #0
 8001b8a:	54e2      	strb	r2, [r4, r3]
 8001b8c:	e7ed      	b.n	8001b6a <USBD_LL_DataInStage+0x1e>
      if(pep->rem_length > pep->maxpacket)
 8001b8e:	69c2      	ldr	r2, [r0, #28]
 8001b90:	6a05      	ldr	r5, [r0, #32]
 8001b92:	42aa      	cmp	r2, r5
 8001b94:	d829      	bhi.n	8001bea <USBD_LL_DataInStage+0x9e>
        if((pep->total_length % pep->maxpacket == 0) &&
 8001b96:	6986      	ldr	r6, [r0, #24]
 8001b98:	0029      	movs	r1, r5
 8001b9a:	0030      	movs	r0, r6
 8001b9c:	f7fe fb42 	bl	8000224 <__aeabi_uidivmod>
 8001ba0:	1e0f      	subs	r7, r1, #0
 8001ba2:	d113      	bne.n	8001bcc <USBD_LL_DataInStage+0x80>
 8001ba4:	42b5      	cmp	r5, r6
 8001ba6:	d811      	bhi.n	8001bcc <USBD_LL_DataInStage+0x80>
             (pep->total_length < pdev->ep0_data_len ))
 8001ba8:	25fc      	movs	r5, #252	; 0xfc
 8001baa:	006d      	lsls	r5, r5, #1
           (pep->total_length >= pep->maxpacket) &&
 8001bac:	5963      	ldr	r3, [r4, r5]
 8001bae:	429e      	cmp	r6, r3
 8001bb0:	d20c      	bcs.n	8001bcc <USBD_LL_DataInStage+0x80>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	0020      	movs	r0, r4
 8001bb8:	f000 fab0 	bl	800211c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8001bbc:	5167      	str	r7, [r4, r5]
        USBD_LL_PrepareReceive (pdev,
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	f002 f92d 	bl	8003e24 <USBD_LL_PrepareReceive>
 8001bca:	e7c9      	b.n	8001b60 <USBD_LL_DataInStage+0x14>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001bcc:	2385      	movs	r3, #133	; 0x85
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	58e3      	ldr	r3, [r4, r3]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <USBD_LL_DataInStage+0x96>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8001bd8:	22fe      	movs	r2, #254	; 0xfe
 8001bda:	0052      	lsls	r2, r2, #1
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8001bdc:	5ca2      	ldrb	r2, [r4, r2]
 8001bde:	2a03      	cmp	r2, #3
 8001be0:	d00a      	beq.n	8001bf8 <USBD_LL_DataInStage+0xac>
          USBD_CtlReceiveStatus(pdev);
 8001be2:	0020      	movs	r0, r4
 8001be4:	f000 fac6 	bl	8002174 <USBD_CtlReceiveStatus>
 8001be8:	e7ba      	b.n	8001b60 <USBD_LL_DataInStage+0x14>
        pep->rem_length -=  pep->maxpacket;
 8001bea:	1b52      	subs	r2, r2, r5
 8001bec:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8001bee:	0019      	movs	r1, r3
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	f000 fa93 	bl	800211c <USBD_CtlContinueSendData>
 8001bf6:	e7e2      	b.n	8001bbe <USBD_LL_DataInStage+0x72>
            pdev->pClass->EP0_TxSent(pdev); 
 8001bf8:	0020      	movs	r0, r4
 8001bfa:	4798      	blx	r3
 8001bfc:	e7f1      	b.n	8001be2 <USBD_LL_DataInStage+0x96>
 8001bfe:	46c0      	nop			; (mov r8, r8)

08001c00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001c00:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001c02:	2340      	movs	r3, #64	; 0x40
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
{
 8001c08:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev,
 8001c0a:	f002 f891 	bl	8003d30 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001c0e:	2388      	movs	r3, #136	; 0x88
 8001c10:	2540      	movs	r5, #64	; 0x40
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	50e5      	str	r5, [r4, r3]
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8001c16:	2200      	movs	r2, #0
 8001c18:	3bd0      	subs	r3, #208	; 0xd0
 8001c1a:	2180      	movs	r1, #128	; 0x80
 8001c1c:	0020      	movs	r0, r4
 8001c1e:	f002 f887 	bl	8003d30 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001c22:	23fe      	movs	r3, #254	; 0xfe
 8001c24:	2201      	movs	r2, #1
 8001c26:	005b      	lsls	r3, r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001c28:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8001c2a:	54e2      	strb	r2, [r4, r3]
  
  if (pdev->pClassData) 
 8001c2c:	331c      	adds	r3, #28
 8001c2e:	58e3      	ldr	r3, [r4, r3]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <USBD_LL_Reset+0x42>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001c34:	2385      	movs	r3, #133	; 0x85
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	58e3      	ldr	r3, [r4, r3]
 8001c3a:	7921      	ldrb	r1, [r4, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0020      	movs	r0, r4
 8001c40:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8001c42:	2000      	movs	r0, #0
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)

08001c48 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8001c48:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	4770      	bx	lr
 8001c4e:	46c0      	nop			; (mov r8, r8)

08001c50 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8001c50:	23fe      	movs	r3, #254	; 0xfe
 8001c52:	22fe      	movs	r2, #254	; 0xfe
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	5cc1      	ldrb	r1, [r0, r3]
 8001c58:	32ff      	adds	r2, #255	; 0xff
 8001c5a:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8001c5c:	3afa      	subs	r2, #250	; 0xfa
 8001c5e:	3aff      	subs	r2, #255	; 0xff
 8001c60:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8001c62:	2000      	movs	r0, #0
 8001c64:	4770      	bx	lr
 8001c66:	46c0      	nop			; (mov r8, r8)

08001c68 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8001c68:	23fe      	movs	r3, #254	; 0xfe
 8001c6a:	33ff      	adds	r3, #255	; 0xff
 8001c6c:	5cc2      	ldrb	r2, [r0, r3]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	54c2      	strb	r2, [r0, r3]
  return USBD_OK;
}
 8001c72:	2000      	movs	r0, #0
 8001c74:	4770      	bx	lr
 8001c76:	46c0      	nop			; (mov r8, r8)

08001c78 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001c78:	23fe      	movs	r3, #254	; 0xfe
{
 8001c7a:	b510      	push	{r4, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	5cc3      	ldrb	r3, [r0, r3]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d001      	beq.n	8001c88 <USBD_LL_SOF+0x10>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8001c84:	2000      	movs	r0, #0
 8001c86:	bd10      	pop	{r4, pc}
    if(pdev->pClass->SOF != NULL)
 8001c88:	2385      	movs	r3, #133	; 0x85
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	58c3      	ldr	r3, [r0, r3]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f7      	beq.n	8001c84 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
 8001c94:	4798      	blx	r3
 8001c96:	e7f5      	b.n	8001c84 <USBD_LL_SOF+0xc>

08001c98 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001c98:	b570      	push	{r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8001c9a:	784b      	ldrb	r3, [r1, #1]
{
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	0004      	movs	r4, r0
 8001ca0:	000d      	movs	r5, r1
  switch (req->bRequest) 
 8001ca2:	2b09      	cmp	r3, #9
 8001ca4:	d80a      	bhi.n	8001cbc <USBD_StdDevReq+0x24>
 8001ca6:	4aa9      	ldr	r2, [pc, #676]	; (8001f4c <USBD_StdDevReq+0x2b4>)
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	58d3      	ldr	r3, [r2, r3]
 8001cac:	469f      	mov	pc, r3
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8001cae:	888b      	ldrh	r3, [r1, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d103      	bne.n	8001cbc <USBD_StdDevReq+0x24>
 8001cb4:	88cb      	ldrh	r3, [r1, #6]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <USBD_StdDevReq+0x24>
 8001cba:	e077      	b.n	8001dac <USBD_StdDevReq+0x114>
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	f002 f858 	bl	8003d74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	0020      	movs	r0, r4
 8001cc8:	f002 f854 	bl	8003d74 <USBD_LL_StallEP>
}
 8001ccc:	2000      	movs	r0, #0
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
  cfgidx = (uint8_t)(req->wValue);                 
 8001cd2:	788b      	ldrb	r3, [r1, #2]
 8001cd4:	4d9e      	ldr	r5, [pc, #632]	; (8001f50 <USBD_StdDevReq+0x2b8>)
 8001cd6:	702b      	strb	r3, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d8ef      	bhi.n	8001cbc <USBD_StdDevReq+0x24>
    switch (pdev->dev_state) 
 8001cdc:	21fe      	movs	r1, #254	; 0xfe
 8001cde:	0049      	lsls	r1, r1, #1
 8001ce0:	5c42      	ldrb	r2, [r0, r1]
 8001ce2:	2a02      	cmp	r2, #2
 8001ce4:	d100      	bne.n	8001ce8 <USBD_StdDevReq+0x50>
 8001ce6:	e081      	b.n	8001dec <USBD_StdDevReq+0x154>
 8001ce8:	2a03      	cmp	r2, #3
 8001cea:	d1e7      	bne.n	8001cbc <USBD_StdDevReq+0x24>
      if (cfgidx == 0) 
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d100      	bne.n	8001cf2 <USBD_StdDevReq+0x5a>
 8001cf0:	e121      	b.n	8001f36 <USBD_StdDevReq+0x29e>
      else  if (cfgidx != pdev->dev_config) 
 8001cf2:	6841      	ldr	r1, [r0, #4]
 8001cf4:	2901      	cmp	r1, #1
 8001cf6:	d009      	beq.n	8001d0c <USBD_StdDevReq+0x74>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8001cf8:	b2c9      	uxtb	r1, r1
 8001cfa:	f7ff feaf 	bl	8001a5c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8001cfe:	7829      	ldrb	r1, [r5, #0]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001d00:	0020      	movs	r0, r4
        pdev->dev_config = cfgidx;
 8001d02:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001d04:	f7ff fe9e 	bl	8001a44 <USBD_SetClassConfig>
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d0d7      	beq.n	8001cbc <USBD_StdDevReq+0x24>
      USBD_CtlSendStatus(pdev);
 8001d0c:	0020      	movs	r0, r4
 8001d0e:	f000 fa25 	bl	800215c <USBD_CtlSendStatus>
 8001d12:	e7db      	b.n	8001ccc <USBD_StdDevReq+0x34>
  switch (pdev->dev_state) 
 8001d14:	23fe      	movs	r3, #254	; 0xfe
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	5cc3      	ldrb	r3, [r0, r3]
 8001d1a:	3b02      	subs	r3, #2
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d8cd      	bhi.n	8001cbc <USBD_StdDevReq+0x24>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8001d20:	2301      	movs	r3, #1
 8001d22:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8001d24:	2381      	movs	r3, #129	; 0x81
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	58c3      	ldr	r3, [r0, r3]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <USBD_StdDevReq+0x9a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8001d2e:	2303      	movs	r3, #3
 8001d30:	60c3      	str	r3, [r0, #12]
                      (uint8_t *)& pdev->dev_config_status,
 8001d32:	0021      	movs	r1, r4
    USBD_CtlSendData (pdev, 
 8001d34:	2202      	movs	r2, #2
                      (uint8_t *)& pdev->dev_config_status,
 8001d36:	310c      	adds	r1, #12
    USBD_CtlSendData (pdev, 
 8001d38:	0020      	movs	r0, r4
 8001d3a:	f000 f9e1 	bl	8002100 <USBD_CtlSendData>
 8001d3e:	e7c5      	b.n	8001ccc <USBD_StdDevReq+0x34>
  switch (pdev->dev_state)
 8001d40:	23fe      	movs	r3, #254	; 0xfe
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	5cc3      	ldrb	r3, [r0, r3]
 8001d46:	3b02      	subs	r3, #2
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d8b7      	bhi.n	8001cbc <USBD_StdDevReq+0x24>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8001d4c:	884b      	ldrh	r3, [r1, #2]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d1bc      	bne.n	8001ccc <USBD_StdDevReq+0x34>
      pdev->dev_remote_wakeup = 0; 
 8001d52:	2381      	movs	r3, #129	; 0x81
 8001d54:	2200      	movs	r2, #0
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	50c2      	str	r2, [r0, r3]
      pdev->pClass->Setup (pdev, req);   
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	e007      	b.n	8001d6e <USBD_StdDevReq+0xd6>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8001d5e:	884b      	ldrh	r3, [r1, #2]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d1b3      	bne.n	8001ccc <USBD_StdDevReq+0x34>
    pdev->dev_remote_wakeup = 1;  
 8001d64:	2281      	movs	r2, #129	; 0x81
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	5083      	str	r3, [r0, r2]
    pdev->pClass->Setup (pdev, req);   
 8001d6a:	2385      	movs	r3, #133	; 0x85
 8001d6c:	009b      	lsls	r3, r3, #2
      pdev->pClass->Setup (pdev, req);   
 8001d6e:	58e3      	ldr	r3, [r4, r3]
 8001d70:	0029      	movs	r1, r5
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	0020      	movs	r0, r4
 8001d76:	4798      	blx	r3
 8001d78:	e7c8      	b.n	8001d0c <USBD_StdDevReq+0x74>
 8001d7a:	884a      	ldrh	r2, [r1, #2]
  switch (req->wValue >> 8)
 8001d7c:	0a13      	lsrs	r3, r2, #8
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d89c      	bhi.n	8001cbc <USBD_StdDevReq+0x24>
 8001d82:	4974      	ldr	r1, [pc, #464]	; (8001f54 <USBD_StdDevReq+0x2bc>)
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	58cb      	ldr	r3, [r1, r3]
 8001d88:	469f      	mov	pc, r3
  if (req->wLength != 1) 
 8001d8a:	88cb      	ldrh	r3, [r1, #6]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d000      	beq.n	8001d92 <USBD_StdDevReq+0xfa>
 8001d90:	e794      	b.n	8001cbc <USBD_StdDevReq+0x24>
    switch (pdev->dev_state )  
 8001d92:	33fc      	adds	r3, #252	; 0xfc
 8001d94:	33ff      	adds	r3, #255	; 0xff
 8001d96:	5cc3      	ldrb	r3, [r0, r3]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d01f      	beq.n	8001ddc <USBD_StdDevReq+0x144>
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d000      	beq.n	8001da2 <USBD_StdDevReq+0x10a>
 8001da0:	e78c      	b.n	8001cbc <USBD_StdDevReq+0x24>
                        (uint8_t *)&pdev->dev_config,
 8001da2:	1d01      	adds	r1, r0, #4
      USBD_CtlSendData (pdev, 
 8001da4:	2201      	movs	r2, #1
 8001da6:	f000 f9ab 	bl	8002100 <USBD_CtlSendData>
 8001daa:	e78f      	b.n	8001ccc <USBD_StdDevReq+0x34>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001dac:	26fe      	movs	r6, #254	; 0xfe
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8001dae:	257f      	movs	r5, #127	; 0x7f
 8001db0:	884b      	ldrh	r3, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001db2:	0076      	lsls	r6, r6, #1
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8001db4:	401d      	ands	r5, r3
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001db6:	5d83      	ldrb	r3, [r0, r6]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d100      	bne.n	8001dbe <USBD_StdDevReq+0x126>
 8001dbc:	e77e      	b.n	8001cbc <USBD_StdDevReq+0x24>
      pdev->dev_address = dev_addr;
 8001dbe:	23ff      	movs	r3, #255	; 0xff
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	54c5      	strb	r5, [r0, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8001dc4:	0029      	movs	r1, r5
 8001dc6:	f002 f80d 	bl	8003de4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8001dca:	0020      	movs	r0, r4
 8001dcc:	f000 f9c6 	bl	800215c <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8001dd0:	2d00      	cmp	r5, #0
 8001dd2:	d100      	bne.n	8001dd6 <USBD_StdDevReq+0x13e>
 8001dd4:	e0a1      	b.n	8001f1a <USBD_StdDevReq+0x282>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	55a3      	strb	r3, [r4, r6]
 8001dda:	e777      	b.n	8001ccc <USBD_StdDevReq+0x34>
      pdev->dev_default_config = 0;
 8001ddc:	2300      	movs	r3, #0
                        (uint8_t *)&pdev->dev_default_config,
 8001dde:	0001      	movs	r1, r0
      pdev->dev_default_config = 0;
 8001de0:	6083      	str	r3, [r0, #8]
                        (uint8_t *)&pdev->dev_default_config,
 8001de2:	3108      	adds	r1, #8
      USBD_CtlSendData (pdev, 
 8001de4:	2201      	movs	r2, #1
 8001de6:	f000 f98b 	bl	8002100 <USBD_CtlSendData>
 8001dea:	e76f      	b.n	8001ccc <USBD_StdDevReq+0x34>
      if (cfgidx) 
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d08d      	beq.n	8001d0c <USBD_StdDevReq+0x74>
        pdev->dev_config = cfgidx;
 8001df0:	2301      	movs	r3, #1
 8001df2:	6043      	str	r3, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8001df4:	3302      	adds	r3, #2
 8001df6:	5443      	strb	r3, [r0, r1]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	f7ff fe23 	bl	8001a44 <USBD_SetClassConfig>
 8001dfe:	2802      	cmp	r0, #2
 8001e00:	d000      	beq.n	8001e04 <USBD_StdDevReq+0x16c>
 8001e02:	e783      	b.n	8001d0c <USBD_StdDevReq+0x74>
 8001e04:	e75a      	b.n	8001cbc <USBD_StdDevReq+0x24>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8001e06:	7c03      	ldrb	r3, [r0, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d000      	beq.n	8001e0e <USBD_StdDevReq+0x176>
 8001e0c:	e756      	b.n	8001cbc <USBD_StdDevReq+0x24>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8001e0e:	466b      	mov	r3, sp
 8001e10:	1d9e      	adds	r6, r3, #6
 8001e12:	2385      	movs	r3, #133	; 0x85
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	58c3      	ldr	r3, [r0, r3]
 8001e18:	0030      	movs	r0, r6
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	7043      	strb	r3, [r0, #1]
  if((len != 0)&& (req->wLength != 0))
 8001e22:	8833      	ldrh	r3, [r6, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d100      	bne.n	8001e2a <USBD_StdDevReq+0x192>
 8001e28:	e750      	b.n	8001ccc <USBD_StdDevReq+0x34>
 8001e2a:	88ea      	ldrh	r2, [r5, #6]
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	d100      	bne.n	8001e32 <USBD_StdDevReq+0x19a>
 8001e30:	e74c      	b.n	8001ccc <USBD_StdDevReq+0x34>
    len = MIN(len , req->wLength);
 8001e32:	1c19      	adds	r1, r3, #0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d900      	bls.n	8001e3a <USBD_StdDevReq+0x1a2>
 8001e38:	1c11      	adds	r1, r2, #0
 8001e3a:	b28a      	uxth	r2, r1
 8001e3c:	8031      	strh	r1, [r6, #0]
    USBD_CtlSendData (pdev, 
 8001e3e:	0001      	movs	r1, r0
 8001e40:	0020      	movs	r0, r4
 8001e42:	f000 f95d 	bl	8002100 <USBD_CtlSendData>
 8001e46:	e741      	b.n	8001ccc <USBD_StdDevReq+0x34>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8001e48:	7c03      	ldrb	r3, [r0, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d000      	beq.n	8001e50 <USBD_StdDevReq+0x1b8>
 8001e4e:	e735      	b.n	8001cbc <USBD_StdDevReq+0x24>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8001e50:	466b      	mov	r3, sp
 8001e52:	1d9e      	adds	r6, r3, #6
 8001e54:	2385      	movs	r3, #133	; 0x85
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	58c3      	ldr	r3, [r0, r3]
 8001e5a:	0030      	movs	r0, r6
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5e:	4798      	blx	r3
 8001e60:	e7df      	b.n	8001e22 <USBD_StdDevReq+0x18a>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8001e62:	466b      	mov	r3, sp
 8001e64:	1d9e      	adds	r6, r3, #6
 8001e66:	2384      	movs	r3, #132	; 0x84
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	58e3      	ldr	r3, [r4, r3]
 8001e6c:	0031      	movs	r1, r6
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	7c00      	ldrb	r0, [r0, #16]
 8001e72:	4798      	blx	r3
 8001e74:	e7d5      	b.n	8001e22 <USBD_StdDevReq+0x18a>
    switch ((uint8_t)(req->wValue))
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	2a05      	cmp	r2, #5
 8001e7a:	d900      	bls.n	8001e7e <USBD_StdDevReq+0x1e6>
 8001e7c:	e71e      	b.n	8001cbc <USBD_StdDevReq+0x24>
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <USBD_StdDevReq+0x2c0>)
 8001e80:	0092      	lsls	r2, r2, #2
 8001e82:	589b      	ldr	r3, [r3, r2]
 8001e84:	469f      	mov	pc, r3
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8001e86:	7c03      	ldrb	r3, [r0, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d149      	bne.n	8001f20 <USBD_StdDevReq+0x288>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	1d9e      	adds	r6, r3, #6
 8001e90:	2385      	movs	r3, #133	; 0x85
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	58c3      	ldr	r3, [r0, r3]
 8001e96:	0030      	movs	r0, r6
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	7043      	strb	r3, [r0, #1]
 8001ea0:	e7bf      	b.n	8001e22 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8001ea2:	466b      	mov	r3, sp
 8001ea4:	1d9e      	adds	r6, r3, #6
 8001ea6:	2384      	movs	r3, #132	; 0x84
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	58e3      	ldr	r3, [r4, r3]
 8001eac:	0031      	movs	r1, r6
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	7c00      	ldrb	r0, [r0, #16]
 8001eb2:	4798      	blx	r3
 8001eb4:	e7b5      	b.n	8001e22 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8001eb6:	466b      	mov	r3, sp
 8001eb8:	1d9e      	adds	r6, r3, #6
 8001eba:	2384      	movs	r3, #132	; 0x84
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	58e3      	ldr	r3, [r4, r3]
 8001ec0:	0031      	movs	r1, r6
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	7c00      	ldrb	r0, [r0, #16]
 8001ec6:	4798      	blx	r3
 8001ec8:	e7ab      	b.n	8001e22 <USBD_StdDevReq+0x18a>
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8001eca:	466b      	mov	r3, sp
 8001ecc:	1d9e      	adds	r6, r3, #6
 8001ece:	2384      	movs	r3, #132	; 0x84
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	58e3      	ldr	r3, [r4, r3]
 8001ed4:	0031      	movs	r1, r6
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	7c00      	ldrb	r0, [r0, #16]
 8001eda:	4798      	blx	r3
 8001edc:	e7a1      	b.n	8001e22 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8001ede:	466b      	mov	r3, sp
 8001ee0:	1d9e      	adds	r6, r3, #6
 8001ee2:	2384      	movs	r3, #132	; 0x84
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	58e3      	ldr	r3, [r4, r3]
 8001ee8:	0031      	movs	r1, r6
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	7c00      	ldrb	r0, [r0, #16]
 8001eee:	4798      	blx	r3
 8001ef0:	e797      	b.n	8001e22 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8001ef2:	466b      	mov	r3, sp
 8001ef4:	1d9e      	adds	r6, r3, #6
 8001ef6:	2384      	movs	r3, #132	; 0x84
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	58e3      	ldr	r3, [r4, r3]
 8001efc:	0031      	movs	r1, r6
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	7c00      	ldrb	r0, [r0, #16]
 8001f02:	4798      	blx	r3
 8001f04:	e78d      	b.n	8001e22 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8001f06:	466b      	mov	r3, sp
 8001f08:	1d9e      	adds	r6, r3, #6
 8001f0a:	2384      	movs	r3, #132	; 0x84
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	58e3      	ldr	r3, [r4, r3]
 8001f10:	0031      	movs	r1, r6
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	7c00      	ldrb	r0, [r0, #16]
 8001f16:	4798      	blx	r3
 8001f18:	e783      	b.n	8001e22 <USBD_StdDevReq+0x18a>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	55a3      	strb	r3, [r4, r6]
 8001f1e:	e6d5      	b.n	8001ccc <USBD_StdDevReq+0x34>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8001f20:	466b      	mov	r3, sp
 8001f22:	1d9e      	adds	r6, r3, #6
 8001f24:	2385      	movs	r3, #133	; 0x85
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	58c3      	ldr	r3, [r0, r3]
 8001f2a:	0030      	movs	r0, r6
 8001f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8001f30:	2302      	movs	r3, #2
 8001f32:	7043      	strb	r3, [r0, #1]
 8001f34:	e775      	b.n	8001e22 <USBD_StdDevReq+0x18a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8001f36:	2202      	movs	r2, #2
 8001f38:	5442      	strb	r2, [r0, r1]
        pdev->dev_config = cfgidx;          
 8001f3a:	6043      	str	r3, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	f7ff fd8d 	bl	8001a5c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8001f42:	0020      	movs	r0, r4
 8001f44:	f000 f90a 	bl	800215c <USBD_CtlSendStatus>
 8001f48:	e6c0      	b.n	8001ccc <USBD_StdDevReq+0x34>
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	0800405c 	.word	0x0800405c
 8001f50:	200001ad 	.word	0x200001ad
 8001f54:	08004084 	.word	0x08004084
 8001f58:	080040a4 	.word	0x080040a4

08001f5c <USBD_StdItfReq>:
  switch (pdev->dev_state) 
 8001f5c:	23fe      	movs	r3, #254	; 0xfe
{
 8001f5e:	b570      	push	{r4, r5, r6, lr}
  switch (pdev->dev_state) 
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	5cc3      	ldrb	r3, [r0, r3]
{
 8001f64:	0004      	movs	r4, r0
 8001f66:	000d      	movs	r5, r1
  switch (pdev->dev_state) 
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d102      	bne.n	8001f72 <USBD_StdItfReq+0x16>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8001f6c:	790b      	ldrb	r3, [r1, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d909      	bls.n	8001f86 <USBD_StdItfReq+0x2a>
  USBD_LL_StallEP(pdev , 0x80);
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	0020      	movs	r0, r4
 8001f76:	f001 fefd 	bl	8003d74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	f001 fef9 	bl	8003d74 <USBD_LL_StallEP>
}
 8001f82:	2000      	movs	r0, #0
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
      pdev->pClass->Setup (pdev, req); 
 8001f86:	2385      	movs	r3, #133	; 0x85
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	58c3      	ldr	r3, [r0, r3]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8001f90:	88eb      	ldrh	r3, [r5, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f5      	bne.n	8001f82 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8001f96:	0020      	movs	r0, r4
 8001f98:	f000 f8e0 	bl	800215c <USBD_CtlSendStatus>
 8001f9c:	e7f1      	b.n	8001f82 <USBD_StdItfReq+0x26>
 8001f9e:	46c0      	nop			; (mov r8, r8)

08001fa0 <USBD_StdEPReq>:
{
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	000c      	movs	r4, r1
  if ((req->bmRequest & 0x60) == 0x20)
 8001fa4:	2360      	movs	r3, #96	; 0x60
{
 8001fa6:	0005      	movs	r5, r0
  ep_addr  = LOBYTE(req->wIndex);   
 8001fa8:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8001faa:	7820      	ldrb	r0, [r4, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8001fac:	b2d1      	uxtb	r1, r2
  if ((req->bmRequest & 0x60) == 0x20)
 8001fae:	4003      	ands	r3, r0
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d05b      	beq.n	800206c <USBD_StdEPReq+0xcc>
  switch (req->bRequest) 
 8001fb4:	7863      	ldrb	r3, [r4, #1]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d039      	beq.n	800202e <USBD_StdEPReq+0x8e>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d01c      	beq.n	8001ff8 <USBD_StdEPReq+0x58>
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d118      	bne.n	8001ff4 <USBD_StdEPReq+0x54>
    switch (pdev->dev_state) 
 8001fc2:	33fa      	adds	r3, #250	; 0xfa
 8001fc4:	33ff      	adds	r3, #255	; 0xff
 8001fc6:	5ceb      	ldrb	r3, [r5, r3]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d035      	beq.n	8002038 <USBD_StdEPReq+0x98>
 8001fcc:	2b03      	cmp	r3, #3
 8001fce:	d144      	bne.n	800205a <USBD_StdEPReq+0xba>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8001fd0:	8863      	ldrh	r3, [r4, #2]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <USBD_StdEPReq+0x40>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001fd6:	064b      	lsls	r3, r1, #25
 8001fd8:	d002      	beq.n	8001fe0 <USBD_StdEPReq+0x40>
          USBD_LL_StallEP(pdev , ep_addr);
 8001fda:	0028      	movs	r0, r5
 8001fdc:	f001 feca 	bl	8003d74 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8001fe0:	2385      	movs	r3, #133	; 0x85
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	58eb      	ldr	r3, [r5, r3]
 8001fe6:	0021      	movs	r1, r4
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0028      	movs	r0, r5
 8001fec:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8001fee:	0028      	movs	r0, r5
 8001ff0:	f000 f8b4 	bl	800215c <USBD_CtlSendStatus>
}
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state) 
 8001ff8:	23fe      	movs	r3, #254	; 0xfe
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	5ceb      	ldrb	r3, [r5, r3]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d01a      	beq.n	8002038 <USBD_StdEPReq+0x98>
 8002002:	2b03      	cmp	r3, #3
 8002004:	d129      	bne.n	800205a <USBD_StdEPReq+0xba>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002006:	247f      	movs	r4, #127	; 0x7f
 8002008:	400c      	ands	r4, r1
 800200a:	0124      	lsls	r4, r4, #4
 800200c:	0613      	lsls	r3, r2, #24
 800200e:	d438      	bmi.n	8002082 <USBD_StdEPReq+0xe2>
 8002010:	3405      	adds	r4, #5
 8002012:	34ff      	adds	r4, #255	; 0xff
 8002014:	192c      	adds	r4, r5, r4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002016:	0028      	movs	r0, r5
 8002018:	f001 fecc 	bl	8003db4 <USBD_LL_IsStallEP>
 800201c:	2800      	cmp	r0, #0
 800201e:	d12d      	bne.n	800207c <USBD_StdEPReq+0xdc>
        pep->status = 0x0000;  
 8002020:	6020      	str	r0, [r4, #0]
      USBD_CtlSendData (pdev,
 8002022:	2202      	movs	r2, #2
 8002024:	0021      	movs	r1, r4
 8002026:	0028      	movs	r0, r5
 8002028:	f000 f86a 	bl	8002100 <USBD_CtlSendData>
      break;
 800202c:	e7e2      	b.n	8001ff4 <USBD_StdEPReq+0x54>
    switch (pdev->dev_state) 
 800202e:	23fe      	movs	r3, #254	; 0xfe
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	5ceb      	ldrb	r3, [r5, r3]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d105      	bne.n	8002044 <USBD_StdEPReq+0xa4>
      if ((ep_addr & 0x7F) != 0x00) 
 8002038:	064b      	lsls	r3, r1, #25
 800203a:	d0db      	beq.n	8001ff4 <USBD_StdEPReq+0x54>
  USBD_LL_StallEP(pdev , 0);
 800203c:	0028      	movs	r0, r5
 800203e:	f001 fe99 	bl	8003d74 <USBD_LL_StallEP>
 8002042:	e7d7      	b.n	8001ff4 <USBD_StdEPReq+0x54>
    switch (pdev->dev_state) 
 8002044:	2b03      	cmp	r3, #3
 8002046:	d108      	bne.n	800205a <USBD_StdEPReq+0xba>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002048:	8863      	ldrh	r3, [r4, #2]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1d2      	bne.n	8001ff4 <USBD_StdEPReq+0x54>
        if ((ep_addr & 0x7F) != 0x00) 
 800204e:	064b      	lsls	r3, r1, #25
 8002050:	d0cd      	beq.n	8001fee <USBD_StdEPReq+0x4e>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002052:	0028      	movs	r0, r5
 8002054:	f001 fe9e 	bl	8003d94 <USBD_LL_ClearStallEP>
 8002058:	e7c2      	b.n	8001fe0 <USBD_StdEPReq+0x40>
  USBD_LL_StallEP(pdev , 0x80);
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	0028      	movs	r0, r5
 800205e:	f001 fe89 	bl	8003d74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002062:	2100      	movs	r1, #0
 8002064:	0028      	movs	r0, r5
 8002066:	f001 fe85 	bl	8003d74 <USBD_LL_StallEP>
 800206a:	e7c3      	b.n	8001ff4 <USBD_StdEPReq+0x54>
    pdev->pClass->Setup (pdev, req);
 800206c:	33f5      	adds	r3, #245	; 0xf5
 800206e:	33ff      	adds	r3, #255	; 0xff
 8002070:	58eb      	ldr	r3, [r5, r3]
 8002072:	0021      	movs	r1, r4
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0028      	movs	r0, r5
 8002078:	4798      	blx	r3
    return USBD_OK;
 800207a:	e7bb      	b.n	8001ff4 <USBD_StdEPReq+0x54>
        pep->status = 0x0001;     
 800207c:	2301      	movs	r3, #1
 800207e:	6023      	str	r3, [r4, #0]
 8002080:	e7cf      	b.n	8002022 <USBD_StdEPReq+0x82>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002082:	3414      	adds	r4, #20
 8002084:	192c      	adds	r4, r5, r4
 8002086:	e7c6      	b.n	8002016 <USBD_StdEPReq+0x76>

08002088 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002088:	780b      	ldrb	r3, [r1, #0]
 800208a:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800208c:	784b      	ldrb	r3, [r1, #1]
 800208e:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8002090:	78ca      	ldrb	r2, [r1, #3]
 8002092:	788b      	ldrb	r3, [r1, #2]
 8002094:	0212      	lsls	r2, r2, #8
 8002096:	189b      	adds	r3, r3, r2
 8002098:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800209a:	794a      	ldrb	r2, [r1, #5]
 800209c:	790b      	ldrb	r3, [r1, #4]
 800209e:	0212      	lsls	r2, r2, #8
 80020a0:	189b      	adds	r3, r3, r2
 80020a2:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80020a4:	79ca      	ldrb	r2, [r1, #7]
 80020a6:	798b      	ldrb	r3, [r1, #6]
 80020a8:	0212      	lsls	r2, r2, #8
 80020aa:	189b      	adds	r3, r3, r2
 80020ac:	80c3      	strh	r3, [r0, #6]
}
 80020ae:	4770      	bx	lr

080020b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80020b0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d020      	beq.n	80020f8 <USBD_GetString+0x48>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80020b6:	7803      	ldrb	r3, [r0, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01e      	beq.n	80020fa <USBD_GetString+0x4a>
 80020bc:	0004      	movs	r4, r0
 80020be:	2300      	movs	r3, #0
    {
        len++;
        buf++;
 80020c0:	3401      	adds	r4, #1
    while (*buf != '\0') 
 80020c2:	7825      	ldrb	r5, [r4, #0]
        len++;
 80020c4:	3301      	adds	r3, #1
 80020c6:	b2db      	uxtb	r3, r3
    while (*buf != '\0') 
 80020c8:	2d00      	cmp	r5, #0
 80020ca:	d1f9      	bne.n	80020c0 <USBD_GetString+0x10>
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	3302      	adds	r3, #2
 80020d0:	b2dc      	uxtb	r4, r3
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80020d2:	8013      	strh	r3, [r2, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80020d4:	2303      	movs	r3, #3
    unicode[idx++] = *len;
 80020d6:	700c      	strb	r4, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80020d8:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0') 
 80020da:	7804      	ldrb	r4, [r0, #0]
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d00b      	beq.n	80020f8 <USBD_GetString+0x48>
      unicode[idx++] =  0x00;
 80020e0:	2500      	movs	r5, #0
    while (*desc != '\0') 
 80020e2:	3b01      	subs	r3, #1
      unicode[idx++] = *desc++;
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	54cc      	strb	r4, [r1, r3]
 80020ea:	3001      	adds	r0, #1
      unicode[idx++] =  0x00;
 80020ec:	548d      	strb	r5, [r1, r2]
    while (*desc != '\0') 
 80020ee:	7804      	ldrb	r4, [r0, #0]
      unicode[idx++] =  0x00;
 80020f0:	3302      	adds	r3, #2
 80020f2:	b2db      	uxtb	r3, r3
    while (*desc != '\0') 
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d1f5      	bne.n	80020e4 <USBD_GetString+0x34>
}
 80020f8:	bd30      	pop	{r4, r5, pc}
    while (*buf != '\0') 
 80020fa:	2402      	movs	r4, #2
 80020fc:	2302      	movs	r3, #2
 80020fe:	e7e8      	b.n	80020d2 <USBD_GetString+0x22>

08002100 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8002100:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002102:	22fa      	movs	r2, #250	; 0xfa
{
 8002104:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8002106:	2402      	movs	r4, #2
 8002108:	0052      	lsls	r2, r2, #1
 800210a:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800210c:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 800210e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 8002110:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002112:	2100      	movs	r1, #0
 8002114:	f001 fe76 	bl	8003e04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002118:	2000      	movs	r0, #0
 800211a:	bd10      	pop	{r4, pc}

0800211c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800211c:	b510      	push	{r4, lr}
 800211e:	0013      	movs	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8002120:	000a      	movs	r2, r1
 8002122:	2100      	movs	r1, #0
 8002124:	f001 fe6e 	bl	8003e04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002128:	2000      	movs	r0, #0
 800212a:	bd10      	pop	{r4, pc}

0800212c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800212c:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800212e:	22fa      	movs	r2, #250	; 0xfa
{
 8002130:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002132:	2403      	movs	r4, #3
 8002134:	0052      	lsls	r2, r2, #1
 8002136:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8002138:	3aec      	subs	r2, #236	; 0xec
 800213a:	5083      	str	r3, [r0, r2]
  pdev->ep_out[0].rem_length   = len;
 800213c:	3204      	adds	r2, #4
 800213e:	5083      	str	r3, [r0, r2]
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 8002140:	000a      	movs	r2, r1
 8002142:	2100      	movs	r1, #0
 8002144:	f001 fe6e 	bl	8003e24 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002148:	2000      	movs	r0, #0
 800214a:	bd10      	pop	{r4, pc}

0800214c <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800214c:	b510      	push	{r4, lr}
 800214e:	0013      	movs	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8002150:	000a      	movs	r2, r1
 8002152:	2100      	movs	r1, #0
 8002154:	f001 fe66 	bl	8003e24 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002158:	2000      	movs	r0, #0
 800215a:	bd10      	pop	{r4, pc}

0800215c <USBD_CtlSendStatus>:
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800215c:	23fa      	movs	r3, #250	; 0xfa
 800215e:	2204      	movs	r2, #4
{
 8002160:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002166:	2100      	movs	r1, #0
 8002168:	2300      	movs	r3, #0
 800216a:	2200      	movs	r2, #0
 800216c:	f001 fe4a 	bl	8003e04 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002170:	2000      	movs	r0, #0
 8002172:	bd10      	pop	{r4, pc}

08002174 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002174:	23fa      	movs	r3, #250	; 0xfa
 8002176:	2205      	movs	r2, #5
{
 8002178:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	50c2      	str	r2, [r0, r3]
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800217e:	2100      	movs	r1, #0
 8002180:	2300      	movs	r3, #0
 8002182:	2200      	movs	r2, #0
 8002184:	f001 fe4e 	bl	8003e24 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002188:	2000      	movs	r0, #0
 800218a:	bd10      	pop	{r4, pc}

0800218c <flash_mgmt_init>:
			.nSectorStart=0,
		};
flash_file_header_type sNextHeader;

uint8_t flash_mgmt_init()
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t nCurrentRecNum=0;
	//step 1: get the first header
	sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR,sizeof(flash_file_header_type),(uint8_t*)&(sNextHeader.Signature));
 800218e:	2080      	movs	r0, #128	; 0x80
{
 8002190:	46c6      	mov	lr, r8
	sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR,sizeof(flash_file_header_type),(uint8_t*)&(sNextHeader.Signature));
 8002192:	2690      	movs	r6, #144	; 0x90
 8002194:	4c22      	ldr	r4, [pc, #136]	; (8002220 <flash_mgmt_init+0x94>)
{
 8002196:	b500      	push	{lr}
	sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR,sizeof(flash_file_header_type),(uint8_t*)&(sNextHeader.Signature));
 8002198:	0022      	movs	r2, r4
 800219a:	2110      	movs	r1, #16
 800219c:	0200      	lsls	r0, r0, #8
 800219e:	f000 f8a9 	bl	80022f4 <sst_flash_read_cmd>

	//step 2: verify that sig exists.
	while(nCurrentRecNum < FLASH_MAX_HEADERS)
	{
		if(sNextHeader.Signature != FLASH_HEADER_SIG)
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <flash_mgmt_init+0x98>)
	sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR,sizeof(flash_file_header_type),(uint8_t*)&(sNextHeader.Signature));
 80021a4:	0236      	lsls	r6, r6, #8
	uint8_t nCurrentRecNum=0;
 80021a6:	2500      	movs	r5, #0
 80021a8:	4f1f      	ldr	r7, [pc, #124]	; (8002228 <flash_mgmt_init+0x9c>)
		if(sNextHeader.Signature != FLASH_HEADER_SIG)
 80021aa:	4698      	mov	r8, r3
 80021ac:	e011      	b.n	80021d2 <flash_mgmt_init+0x46>
			return 0;
		}
		else
		{
			//signature is okay, find the next header.
			sCurrentHeader=sNextHeader;
 80021ae:	2210      	movs	r2, #16
 80021b0:	0021      	movs	r1, r4
 80021b2:	0038      	movs	r0, r7
 80021b4:	f001 fef6 	bl	8003fa4 <memcpy>
			nCurrentRecNum++;
			sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR+(nCurrentRecNum*0x1000),sizeof(flash_file_header_type),(uint8_t*)&(sNextHeader.Signature));
 80021b8:	0030      	movs	r0, r6
 80021ba:	0022      	movs	r2, r4
 80021bc:	2110      	movs	r1, #16
 80021be:	f000 f899 	bl	80022f4 <sst_flash_read_cmd>
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	015b      	lsls	r3, r3, #5
 80021c6:	469c      	mov	ip, r3
			nCurrentRecNum++;
 80021c8:	3501      	adds	r5, #1
 80021ca:	b2ed      	uxtb	r5, r5
 80021cc:	4466      	add	r6, ip
	while(nCurrentRecNum < FLASH_MAX_HEADERS)
 80021ce:	2dc8      	cmp	r5, #200	; 0xc8
 80021d0:	d023      	beq.n	800221a <flash_mgmt_init+0x8e>
		if(sNextHeader.Signature != FLASH_HEADER_SIG)
 80021d2:	7862      	ldrb	r2, [r4, #1]
 80021d4:	7823      	ldrb	r3, [r4, #0]
 80021d6:	0212      	lsls	r2, r2, #8
 80021d8:	431a      	orrs	r2, r3
 80021da:	78a3      	ldrb	r3, [r4, #2]
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	431a      	orrs	r2, r3
 80021e0:	78e3      	ldrb	r3, [r4, #3]
 80021e2:	061b      	lsls	r3, r3, #24
 80021e4:	4313      	orrs	r3, r2
 80021e6:	4543      	cmp	r3, r8
 80021e8:	d0e1      	beq.n	80021ae <flash_mgmt_init+0x22>
			sCurrentHeader.Signature = FLASH_HEADER_SIG;
 80021ea:	4643      	mov	r3, r8
 80021ec:	603b      	str	r3, [r7, #0]
			sCurrentHeader.bLastRecording = 1;
 80021ee:	2301      	movs	r3, #1
 80021f0:	717b      	strb	r3, [r7, #5]
			sCurrentHeader.nRecordnum = nCurrentRecNum;
 80021f2:	713d      	strb	r5, [r7, #4]
			sCurrentHeader.nSectorStart  = sCurrentHeader.nSectorStart +((sCurrentHeader.nNumOfSamples)>>7);
 80021f4:	897b      	ldrh	r3, [r7, #10]
 80021f6:	893a      	ldrh	r2, [r7, #8]
 80021f8:	09d2      	lsrs	r2, r2, #7
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	817b      	strh	r3, [r7, #10]
			if(sCurrentHeader.nNumOfSamples%4096)
 8002200:	893b      	ldrh	r3, [r7, #8]
 8002202:	051b      	lsls	r3, r3, #20
 8002204:	d003      	beq.n	800220e <flash_mgmt_init+0x82>
				sCurrentHeader.nSectorStart++;
 8002206:	897b      	ldrh	r3, [r7, #10]
 8002208:	3301      	adds	r3, #1
 800220a:	b29b      	uxth	r3, r3
 800220c:	817b      	strh	r3, [r7, #10]
			sCurrentHeader.nNumOfSamples = 0;
 800220e:	2300      	movs	r3, #0
			return 0;
 8002210:	2000      	movs	r0, #0
			sCurrentHeader.nNumOfSamples = 0;
 8002212:	813b      	strh	r3, [r7, #8]

	//if we're here, we're full...
	return 1;


}
 8002214:	bc04      	pop	{r2}
 8002216:	4690      	mov	r8, r2
 8002218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 1;
 800221a:	2001      	movs	r0, #1
 800221c:	e7fa      	b.n	8002214 <flash_mgmt_init+0x88>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	20000a10 	.word	0x20000a10
 8002224:	feedabba 	.word	0xfeedabba
 8002228:	200001b0 	.word	0x200001b0

0800222c <flash_start_recording>:

uint8_t flash_start_recording(uint8_t nTimeDiff)
{
 800222c:	b510      	push	{r4, lr}


		//step 1: update previous header
		if(sCurrentHeader.nRecordnum != 0)
 800222e:	4a06      	ldr	r2, [pc, #24]	; (8002248 <flash_start_recording+0x1c>)

		//step 2: set the time diff in accordance
		sCurrentHeader.eTimeDiff = nTimeDiff;

		//step 3: write the initial header.
		sst_flash_write_cmd_blocking(FLASH_FILE_HEADERS_ADDR+(sCurrentHeader.nRecordnum)*0x1000,sizeof(flash_file_header_type),(uint8_t*)&(sCurrentHeader.Signature),10);
 8002230:	2110      	movs	r1, #16
		if(sCurrentHeader.nRecordnum != 0)
 8002232:	7913      	ldrb	r3, [r2, #4]
		sCurrentHeader.eTimeDiff = nTimeDiff;
 8002234:	7190      	strb	r0, [r2, #6]
		sst_flash_write_cmd_blocking(FLASH_FILE_HEADERS_ADDR+(sCurrentHeader.nRecordnum)*0x1000,sizeof(flash_file_header_type),(uint8_t*)&(sCurrentHeader.Signature),10);
 8002236:	7910      	ldrb	r0, [r2, #4]
 8002238:	230a      	movs	r3, #10
 800223a:	3008      	adds	r0, #8
 800223c:	0300      	lsls	r0, r0, #12
 800223e:	f000 f867 	bl	8002310 <sst_flash_write_cmd_blocking>
		//we are now allowed to record.
	return 0;
}
 8002242:	2000      	movs	r0, #0
 8002244:	bd10      	pop	{r4, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	200001b0 	.word	0x200001b0

0800224c <flash_save_sample>:
		return 0;
	}
}

uint8_t flash_save_sample(uint16_t nSample)
{
 800224c:	b530      	push	{r4, r5, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	466b      	mov	r3, sp

	uint32_t nAddr;

	uint16_t nVerify;
	nAddr = FLASH_FILES_ADDR + (sCurrentHeader.nSectorStart * 0x1000) + (sCurrentHeader.nNumOfSamples * 2);
 8002252:	4d14      	ldr	r5, [pc, #80]	; (80022a4 <flash_save_sample+0x58>)
{
 8002254:	1d9a      	adds	r2, r3, #6
 8002256:	8010      	strh	r0, [r2, #0]
	nAddr = FLASH_FILES_ADDR + (sCurrentHeader.nSectorStart * 0x1000) + (sCurrentHeader.nNumOfSamples * 2);
 8002258:	896c      	ldrh	r4, [r5, #10]
 800225a:	8929      	ldrh	r1, [r5, #8]
 800225c:	3401      	adds	r4, #1
 800225e:	34ff      	adds	r4, #255	; 0xff
 8002260:	02e4      	lsls	r4, r4, #11
 8002262:	1864      	adds	r4, r4, r1
 8002264:	0064      	lsls	r4, r4, #1


	//write sample to flash.
	sst_flash_write_cmd_blocking(nAddr,2,(uint8_t*)&nSample,10);
 8002266:	230a      	movs	r3, #10
 8002268:	2102      	movs	r1, #2
 800226a:	0020      	movs	r0, r4
 800226c:	f000 f850 	bl	8002310 <sst_flash_write_cmd_blocking>


	//readbback the samples.
	sst_flash_read_cmd(nAddr,2,&nVerify);
 8002270:	220e      	movs	r2, #14
 8002272:	2102      	movs	r1, #2
 8002274:	446a      	add	r2, sp
 8002276:	0020      	movs	r0, r4
 8002278:	f000 f83c 	bl	80022f4 <sst_flash_read_cmd>

	//update the amount of samples in header.
	sCurrentHeader.nNumOfSamples++;
 800227c:	892b      	ldrh	r3, [r5, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	b29b      	uxth	r3, r3
 8002282:	812b      	strh	r3, [r5, #8]




	//update header.
	sst_flash_erase_sector_blocking(FLASH_FILE_HEADERS_ADDR+(sCurrentHeader.nRecordnum)*0x1000);
 8002284:	7928      	ldrb	r0, [r5, #4]
 8002286:	3008      	adds	r0, #8
 8002288:	0300      	lsls	r0, r0, #12
 800228a:	f000 f935 	bl	80024f8 <sst_flash_erase_sector_blocking>
	sst_flash_write_cmd_blocking(FLASH_FILE_HEADERS_ADDR+(sCurrentHeader.nRecordnum)*0x1000,sizeof(flash_file_header_type),(uint8_t*)&(sCurrentHeader.Signature),10);
 800228e:	7928      	ldrb	r0, [r5, #4]
 8002290:	230a      	movs	r3, #10
 8002292:	3008      	adds	r0, #8
 8002294:	002a      	movs	r2, r5
 8002296:	2110      	movs	r1, #16
 8002298:	0300      	lsls	r0, r0, #12
 800229a:	f000 f839 	bl	8002310 <sst_flash_write_cmd_blocking>
	return 0;
}
 800229e:	2000      	movs	r0, #0
 80022a0:	b005      	add	sp, #20
 80022a2:	bd30      	pop	{r4, r5, pc}
 80022a4:	200001b0 	.word	0x200001b0

080022a8 <flash_invalidate_headers>:

	return 0;
}

uint8_t flash_invalidate_headers()
{
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	2480      	movs	r4, #128	; 0x80
	//delete all headers.
	uint8_t i ;


	for(i=0;i<FLASH_MAX_HEADERS;i++)
 80022ac:	25d0      	movs	r5, #208	; 0xd0
{
 80022ae:	0224      	lsls	r4, r4, #8
	for(i=0;i<FLASH_MAX_HEADERS;i++)
 80022b0:	032d      	lsls	r5, r5, #12
	{
		sst_flash_erase_sector_blocking(FLASH_FILE_HEADERS_ADDR+(i*0x1000));
 80022b2:	0020      	movs	r0, r4
 80022b4:	f000 f920 	bl	80024f8 <sst_flash_erase_sector_blocking>
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	015b      	lsls	r3, r3, #5
 80022bc:	469c      	mov	ip, r3
 80022be:	4464      	add	r4, ip
	for(i=0;i<FLASH_MAX_HEADERS;i++)
 80022c0:	42ac      	cmp	r4, r5
 80022c2:	d1f6      	bne.n	80022b2 <flash_invalidate_headers+0xa>
	}

	return 0;
}
 80022c4:	2000      	movs	r0, #0
 80022c6:	bd70      	pop	{r4, r5, r6, pc}

080022c8 <flash_erase_recordings>:

uint8_t flash_erase_recordings()
{
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	2480      	movs	r4, #128	; 0x80
	uint16_t i ;



	for(i=0;i<FLASH_RECORDING_SECTORS;i++)
 80022cc:	25c0      	movs	r5, #192	; 0xc0
{
 80022ce:	0364      	lsls	r4, r4, #13
	for(i=0;i<FLASH_RECORDING_SECTORS;i++)
 80022d0:	03ad      	lsls	r5, r5, #14
	{
		sst_flash_erase_sector_blocking(FLASH_FILES_ADDR+(i*0x1000));
 80022d2:	0020      	movs	r0, r4
 80022d4:	f000 f910 	bl	80024f8 <sst_flash_erase_sector_blocking>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	469c      	mov	ip, r3
 80022de:	4464      	add	r4, ip
	for(i=0;i<FLASH_RECORDING_SECTORS;i++)
 80022e0:	42ac      	cmp	r4, r5
 80022e2:	d1f6      	bne.n	80022d2 <flash_erase_recordings+0xa>
	}

	return 0;
}
 80022e4:	2000      	movs	r0, #0
 80022e6:	bd70      	pop	{r4, r5, r6, pc}

080022e8 <sst_flash_write_enable>:

 }


 void sst_flash_write_enable()
 {
 80022e8:	b510      	push	{r4, lr}
 	spi_write_single(SST_FLASH_CMD_WREN);
 80022ea:	2006      	movs	r0, #6
 80022ec:	f000 ff86 	bl	80031fc <spi_write_single>
 }
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)

080022f4 <sst_flash_read_cmd>:
 void sst_flash_write_disable()
 {
 	spi_write_single(SST_FLASH_CMD_WRDI);
 }
 uint8_t sst_flash_read_cmd(uint32_t nAddr,uint8_t nBytes,uint8_t* pData)
 {
 80022f4:	ba03      	rev	r3, r0
		//build the tx msg
		*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <sst_flash_read_cmd+0x18>)
 {
 80022f8:	b510      	push	{r4, lr}
		*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 80022fa:	6003      	str	r3, [r0, #0]
	            ((nAddr<<8)&0xff0000) | // move byte 1 to byte 2
	            ((nAddr>>8)&0xff00) | // move byte 2 to byte 1
	            ((nAddr<<24)&0xff000000); // byte 0 to byte 3;
		nWorking_buffer[0] = SST_FLASH_CMD_READ;
 80022fc:	2303      	movs	r3, #3
 80022fe:	7003      	strb	r3, [r0, #0]

		return spi_write_read(nWorking_buffer,4,pData,nBytes);
 8002300:	b28b      	uxth	r3, r1
 8002302:	2104      	movs	r1, #4
 8002304:	f000 ff94 	bl	8003230 <spi_write_read>
 8002308:	b2c0      	uxtb	r0, r0
 }
 800230a:	bd10      	pop	{r4, pc}
 800230c:	200001c0 	.word	0x200001c0

08002310 <sst_flash_write_cmd_blocking>:
		return spi_write_blocking(nWorking_buffer,nbytes+4);

 }

uint8_t sst_flash_write_cmd_blocking(uint32_t nAddr,uint8_t nbytes,uint8_t* pData,uint8_t nRefreshTicks)
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	46de      	mov	lr, fp
 8002314:	4657      	mov	r7, sl
 8002316:	464e      	mov	r6, r9
 8002318:	4645      	mov	r5, r8
 800231a:	b5e0      	push	{r5, r6, r7, lr}
 800231c:	b085      	sub	sp, #20
 800231e:	9000      	str	r0, [sp, #0]
 	spi_write_single(SST_FLASH_CMD_WREN);
 8002320:	2006      	movs	r0, #6
{
 8002322:	468b      	mov	fp, r1
 8002324:	9201      	str	r2, [sp, #4]
 8002326:	001f      	movs	r7, r3
 	spi_write_single(SST_FLASH_CMD_WREN);
 8002328:	f000 ff68 	bl	80031fc <spi_write_single>

}

void sst_flash_read_status()
{
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 800232c:	2305      	movs	r3, #5
 800232e:	4c51      	ldr	r4, [pc, #324]	; (8002474 <sst_flash_write_cmd_blocking+0x164>)

	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002330:	2101      	movs	r1, #1
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 8002332:	7023      	strb	r3, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002334:	1c62      	adds	r2, r4, #1
 8002336:	3b04      	subs	r3, #4
 8002338:	0020      	movs	r0, r4
 800233a:	f000 ff79 	bl	8003230 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 800233e:	7863      	ldrb	r3, [r4, #1]
 8002340:	4e4d      	ldr	r6, [pc, #308]	; (8002478 <sst_flash_write_cmd_blocking+0x168>)
 8002342:	7033      	strb	r3, [r6, #0]
	if(!sHandler.WEL)
 8002344:	6833      	ldr	r3, [r6, #0]
 8002346:	079b      	lsls	r3, r3, #30
 8002348:	d400      	bmi.n	800234c <sst_flash_write_cmd_blocking+0x3c>
 800234a:	e080      	b.n	800244e <sst_flash_write_cmd_blocking+0x13e>
 800234c:	9900      	ldr	r1, [sp, #0]
	 if(((nAddr&0x000000ff)+(uint32_t)nSize)&0xf00)
 800234e:	22f0      	movs	r2, #240	; 0xf0
 8002350:	ba0b      	rev	r3, r1
	*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 8002352:	6023      	str	r3, [r4, #0]
	nWorking_buffer[0] = SST_FLASH_CMD_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	7023      	strb	r3, [r4, #0]
	 if(((nAddr&0x000000ff)+(uint32_t)nSize)&0xf00)
 8002358:	33fd      	adds	r3, #253	; 0xfd
 800235a:	400b      	ands	r3, r1
 800235c:	445b      	add	r3, fp
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	4213      	tst	r3, r2
 8002362:	d000      	beq.n	8002366 <sst_flash_write_cmd_blocking+0x56>
 8002364:	e07d      	b.n	8002462 <sst_flash_write_cmd_blocking+0x152>
		 return 0;
 8002366:	2200      	movs	r2, #0
	 if(((nAddr&0x000000ff)+(uint32_t)nSize)&0xf00)
 8002368:	2300      	movs	r3, #0
		 return 0;
 800236a:	4692      	mov	sl, r2
	 if(((nAddr&0x000000ff)+(uint32_t)nSize)&0xf00)
 800236c:	9302      	str	r3, [sp, #8]
	memcpy(nWorking_buffer+4,pData,nbytes-nExtrabytes);
 800236e:	465a      	mov	r2, fp
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	001a      	movs	r2, r3
 8002374:	9901      	ldr	r1, [sp, #4]
 8002376:	1d20      	adds	r0, r4, #4
 8002378:	9303      	str	r3, [sp, #12]
 800237a:	f001 fe13 	bl	8003fa4 <memcpy>
	spi_write_blocking(nWorking_buffer,nbytes+4-nExtrabytes);
 800237e:	465b      	mov	r3, fp
 8002380:	1d19      	adds	r1, r3, #4
 8002382:	9b02      	ldr	r3, [sp, #8]
 8002384:	0020      	movs	r0, r4
 8002386:	1ac9      	subs	r1, r1, r3
 8002388:	b289      	uxth	r1, r1
 800238a:	f000 ff13 	bl	80031b4 <spi_write_blocking>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 800238e:	2305      	movs	r3, #5
 8002390:	4699      	mov	r9, r3
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002392:	1c63      	adds	r3, r4, #1
	spi_write_blocking(nWorking_buffer,nbytes+4-nExtrabytes);
 8002394:	003d      	movs	r5, r7
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002396:	4698      	mov	r8, r3
 8002398:	e004      	b.n	80023a4 <sst_flash_write_cmd_blocking+0x94>
		}while((nCurrentTicks--)&&(sHandler.BUSY1));
 800239a:	6833      	ldr	r3, [r6, #0]
 800239c:	3d01      	subs	r5, #1
 800239e:	b2ed      	uxtb	r5, r5
 80023a0:	07db      	lsls	r3, r3, #31
 80023a2:	d50e      	bpl.n	80023c2 <sst_flash_write_cmd_blocking+0xb2>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80023a4:	464b      	mov	r3, r9
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80023a6:	4642      	mov	r2, r8
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80023a8:	7023      	strb	r3, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80023aa:	2101      	movs	r1, #1
 80023ac:	2301      	movs	r3, #1
 80023ae:	0020      	movs	r0, r4
 80023b0:	f000 ff3e 	bl	8003230 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 80023b4:	7863      	ldrb	r3, [r4, #1]
			HAL_Delay(10);
 80023b6:	200a      	movs	r0, #10
	sHandler.nStatus_byte = nWorking_buffer[1];
 80023b8:	7033      	strb	r3, [r6, #0]
			HAL_Delay(10);
 80023ba:	f7fd ffa3 	bl	8000304 <HAL_Delay>
		}while((nCurrentTicks--)&&(sHandler.BUSY1));
 80023be:	2d00      	cmp	r5, #0
 80023c0:	d1eb      	bne.n	800239a <sst_flash_write_cmd_blocking+0x8a>
		if(sHandler.BUSY1)
 80023c2:	6833      	ldr	r3, [r6, #0]
 80023c4:	07db      	lsls	r3, r3, #31
 80023c6:	d442      	bmi.n	800244e <sst_flash_write_cmd_blocking+0x13e>
	if(nExtrabytes)
 80023c8:	4653      	mov	r3, sl
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d041      	beq.n	8002452 <sst_flash_write_cmd_blocking+0x142>
 	spi_write_single(SST_FLASH_CMD_WREN);
 80023ce:	2006      	movs	r0, #6
 80023d0:	f000 ff14 	bl	80031fc <spi_write_single>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80023d4:	2305      	movs	r3, #5
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80023d6:	1c65      	adds	r5, r4, #1
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80023d8:	7023      	strb	r3, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80023da:	002a      	movs	r2, r5
 80023dc:	3b04      	subs	r3, #4
 80023de:	2101      	movs	r1, #1
 80023e0:	0020      	movs	r0, r4
 80023e2:	f000 ff25 	bl	8003230 <spi_write_read>
		nAddr += nbytes-nExtrabytes;
 80023e6:	9a03      	ldr	r2, [sp, #12]
	sHandler.nStatus_byte = nWorking_buffer[1];
 80023e8:	7863      	ldrb	r3, [r4, #1]
		nAddr += nbytes-nExtrabytes;
 80023ea:	4694      	mov	ip, r2
	sHandler.nStatus_byte = nWorking_buffer[1];
 80023ec:	7033      	strb	r3, [r6, #0]
		nAddr += nbytes-nExtrabytes;
 80023ee:	9b00      	ldr	r3, [sp, #0]
		memcpy(nWorking_buffer+4,pData+nbytes-nExtrabytes,nExtrabytes);
 80023f0:	4652      	mov	r2, sl
		nAddr += nbytes-nExtrabytes;
 80023f2:	4463      	add	r3, ip
 80023f4:	ba1b      	rev	r3, r3
			*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 80023f6:	6023      	str	r3, [r4, #0]
			nWorking_buffer[0] = SST_FLASH_CMD_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	7023      	strb	r3, [r4, #0]
		memcpy(nWorking_buffer+4,pData+nbytes-nExtrabytes,nExtrabytes);
 80023fc:	465b      	mov	r3, fp
 80023fe:	1a99      	subs	r1, r3, r2
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	1d20      	adds	r0, r4, #4
 8002404:	469c      	mov	ip, r3
 8002406:	4461      	add	r1, ip
 8002408:	f001 fdcc 	bl	8003fa4 <memcpy>
		spi_write_blocking(nWorking_buffer,4+nExtrabytes);
 800240c:	9902      	ldr	r1, [sp, #8]
 800240e:	0020      	movs	r0, r4
 8002410:	3104      	adds	r1, #4
 8002412:	f000 fecf 	bl	80031b4 <spi_write_blocking>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 8002416:	2305      	movs	r3, #5
 8002418:	4698      	mov	r8, r3
 800241a:	e004      	b.n	8002426 <sst_flash_write_cmd_blocking+0x116>
		}while((nCurrentTicks--)&&(sHandler.BUSY1));
 800241c:	6833      	ldr	r3, [r6, #0]
 800241e:	3f01      	subs	r7, #1
 8002420:	b2ff      	uxtb	r7, r7
 8002422:	07db      	lsls	r3, r3, #31
 8002424:	d50e      	bpl.n	8002444 <sst_flash_write_cmd_blocking+0x134>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 8002426:	4643      	mov	r3, r8
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002428:	002a      	movs	r2, r5
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 800242a:	7023      	strb	r3, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 800242c:	2101      	movs	r1, #1
 800242e:	2301      	movs	r3, #1
 8002430:	0020      	movs	r0, r4
 8002432:	f000 fefd 	bl	8003230 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 8002436:	7863      	ldrb	r3, [r4, #1]
			HAL_Delay(10);
 8002438:	200a      	movs	r0, #10
	sHandler.nStatus_byte = nWorking_buffer[1];
 800243a:	7033      	strb	r3, [r6, #0]
			HAL_Delay(10);
 800243c:	f7fd ff62 	bl	8000304 <HAL_Delay>
		}while((nCurrentTicks--)&&(sHandler.BUSY1));
 8002440:	2f00      	cmp	r7, #0
 8002442:	d1eb      	bne.n	800241c <sst_flash_write_cmd_blocking+0x10c>
		if(sHandler.BUSY1)
 8002444:	6833      	ldr	r3, [r6, #0]
 8002446:	07db      	lsls	r3, r3, #31
 8002448:	0fdb      	lsrs	r3, r3, #31
 800244a:	469a      	mov	sl, r3
 800244c:	e001      	b.n	8002452 <sst_flash_write_cmd_blocking+0x142>
		return 1;
 800244e:	2301      	movs	r3, #1
 8002450:	469a      	mov	sl, r3
}
 8002452:	4650      	mov	r0, sl
 8002454:	b005      	add	sp, #20
 8002456:	bc3c      	pop	{r2, r3, r4, r5}
 8002458:	4690      	mov	r8, r2
 800245a:	4699      	mov	r9, r3
 800245c:	46a2      	mov	sl, r4
 800245e:	46ab      	mov	fp, r5
 8002460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ((nAddr&0x000000ff)+nSize)&0xff;
 8002462:	000a      	movs	r2, r1
 8002464:	4669      	mov	r1, sp
 8002466:	445a      	add	r2, fp
 8002468:	b2d3      	uxtb	r3, r2
 800246a:	810b      	strh	r3, [r1, #8]
 800246c:	890a      	ldrh	r2, [r1, #8]
 800246e:	469a      	mov	sl, r3
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	e77c      	b.n	800236e <sst_flash_write_cmd_blocking+0x5e>
 8002474:	200001c0 	.word	0x200001c0
 8002478:	200002c8 	.word	0x200002c8

0800247c <sst_flash_init>:
{
 800247c:	b570      	push	{r4, r5, r6, lr}
	 spi_write_single(SST_FLASH_CMD_RSTEN);
 800247e:	2066      	movs	r0, #102	; 0x66
 8002480:	f000 febc 	bl	80031fc <spi_write_single>
	 HAL_Delay(10);
 8002484:	200a      	movs	r0, #10
 8002486:	f7fd ff3d 	bl	8000304 <HAL_Delay>
	 spi_write_single(SST_FLASH_CMD_RST);
 800248a:	2099      	movs	r0, #153	; 0x99
 800248c:	f000 feb6 	bl	80031fc <spi_write_single>
	 HAL_Delay(100);
 8002490:	2064      	movs	r0, #100	; 0x64
 8002492:	f7fd ff37 	bl	8000304 <HAL_Delay>
 	nWorking_buffer[0] = SST_FLASH_CMD_JEDEC_ID;
 8002496:	239f      	movs	r3, #159	; 0x9f
 8002498:	4c0c      	ldr	r4, [pc, #48]	; (80024cc <sst_flash_init+0x50>)
 	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,4);
 800249a:	2101      	movs	r1, #1
 800249c:	1c65      	adds	r5, r4, #1
 800249e:	002a      	movs	r2, r5
 	nWorking_buffer[0] = SST_FLASH_CMD_JEDEC_ID;
 80024a0:	7023      	strb	r3, [r4, #0]
 	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,4);
 80024a2:	0020      	movs	r0, r4
 80024a4:	3b9b      	subs	r3, #155	; 0x9b
 80024a6:	f000 fec3 	bl	8003230 <spi_write_read>
	 HAL_Delay(10);
 80024aa:	200a      	movs	r0, #10
 80024ac:	f7fd ff2a 	bl	8000304 <HAL_Delay>
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80024b0:	2305      	movs	r3, #5
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80024b2:	002a      	movs	r2, r5
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 80024b4:	7023      	strb	r3, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 80024b6:	2101      	movs	r1, #1
 80024b8:	3b04      	subs	r3, #4
 80024ba:	0020      	movs	r0, r4
 80024bc:	f000 feb8 	bl	8003230 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 80024c0:	7862      	ldrb	r2, [r4, #1]
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <sst_flash_init+0x54>)
}
 80024c4:	2000      	movs	r0, #0
	sHandler.nStatus_byte = nWorking_buffer[1];
 80024c6:	701a      	strb	r2, [r3, #0]
}
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	200001c0 	.word	0x200001c0
 80024d0:	200002c8 	.word	0x200002c8

080024d4 <sst_flash_write_block_proc>:

}
void sst_flash_write_block_proc()
{
	uint8_t i;
	nWorking_buffer[0] = SST_FLASH_CMD_WBPR;
 80024d4:	4807      	ldr	r0, [pc, #28]	; (80024f4 <sst_flash_write_block_proc+0x20>)
 80024d6:	2342      	movs	r3, #66	; 0x42
 80024d8:	0001      	movs	r1, r0
	for(i=0;i<18;i++)
	{
		nWorking_buffer[1+i] = 0;
 80024da:	2200      	movs	r2, #0
{
 80024dc:	b510      	push	{r4, lr}
 80024de:	3113      	adds	r1, #19
	nWorking_buffer[0] = SST_FLASH_CMD_WBPR;
 80024e0:	7003      	strb	r3, [r0, #0]
 80024e2:	1c43      	adds	r3, r0, #1
		nWorking_buffer[1+i] = 0;
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	3301      	adds	r3, #1
	for(i=0;i<18;i++)
 80024e8:	428b      	cmp	r3, r1
 80024ea:	d1fb      	bne.n	80024e4 <sst_flash_write_block_proc+0x10>
	}
	spi_write_blocking(nWorking_buffer,19);
 80024ec:	2113      	movs	r1, #19
 80024ee:	f000 fe61 	bl	80031b4 <spi_write_blocking>

}
 80024f2:	bd10      	pop	{r4, pc}
 80024f4:	200001c0 	.word	0x200001c0

080024f8 <sst_flash_erase_sector_blocking>:
	spi_write_blocking(nWorking_buffer,4);

}

void sst_flash_erase_sector_blocking(uint32_t nAddr)
{
 80024f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fa:	0004      	movs	r4, r0
 	spi_write_single(SST_FLASH_CMD_WREN);
 80024fc:	2006      	movs	r0, #6
 80024fe:	f000 fe7d 	bl	80031fc <spi_write_single>
 8002502:	ba23      	rev	r3, r4

	sst_flash_write_enable();



	*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 8002504:	4c0d      	ldr	r4, [pc, #52]	; (800253c <sst_flash_erase_sector_blocking+0x44>)
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 8002506:	2705      	movs	r7, #5
	*((uint32_t*)nWorking_buffer) = ((nAddr>>24)&0xff) | // move byte 3 to byte 0
 8002508:	6023      	str	r3, [r4, #0]
			((nAddr<<8)&0xff0000) | // move byte 1 to byte 2
			((nAddr>>8)&0xff00) | // move byte 2 to byte 1
			((nAddr<<24)&0xff000000); // byte 0 to byte 3;
	nWorking_buffer[0] = SST_FLASH_CMD_SE;
 800250a:	2320      	movs	r3, #32

	spi_write_blocking(nWorking_buffer,4);
 800250c:	2104      	movs	r1, #4
 800250e:	0020      	movs	r0, r4
	nWorking_buffer[0] = SST_FLASH_CMD_SE;
 8002510:	7023      	strb	r3, [r4, #0]
	spi_write_blocking(nWorking_buffer,4);
 8002512:	f000 fe4f 	bl	80031b4 <spi_write_blocking>
 8002516:	4d0a      	ldr	r5, [pc, #40]	; (8002540 <sst_flash_erase_sector_blocking+0x48>)
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002518:	1c66      	adds	r6, r4, #1
 800251a:	2301      	movs	r3, #1
 800251c:	0032      	movs	r2, r6
 800251e:	2101      	movs	r1, #1
 8002520:	0020      	movs	r0, r4
	nWorking_buffer[0] = SST_FLASH_CMD_RDSR;
 8002522:	7027      	strb	r7, [r4, #0]
	spi_write_read(nWorking_buffer,1,nWorking_buffer+1,1);
 8002524:	f000 fe84 	bl	8003230 <spi_write_read>
	sHandler.nStatus_byte = nWorking_buffer[1];
 8002528:	7863      	ldrb	r3, [r4, #1]


	do{
		sst_flash_read_status();
		HAL_Delay(10);
 800252a:	200a      	movs	r0, #10
	sHandler.nStatus_byte = nWorking_buffer[1];
 800252c:	702b      	strb	r3, [r5, #0]
		HAL_Delay(10);
 800252e:	f7fd fee9 	bl	8000304 <HAL_Delay>
	}while(sHandler.BUSY1);
 8002532:	682b      	ldr	r3, [r5, #0]
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d4f0      	bmi.n	800251a <sst_flash_erase_sector_blocking+0x22>

}
 8002538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	200001c0 	.word	0x200001c0
 8002540:	200002c8 	.word	0x200002c8

08002544 <WaitForFlag.isra.0.part.1>:
#include "stm32f0xx_hal.h"

//i2c_handler_type sI2c_1;
volatile I2C_TypeDef* pI2c = I2C1;

static volatile uint8_t WaitForFlag(volatile uint32_t* pRegloc,uint32_t nFlag,uint8_t bFlagStateRequired,uint32_t nTimeoutVal,uint32_t nTickstart)
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	0004      	movs	r4, r0
 8002548:	000d      	movs	r5, r1
 800254a:	0017      	movs	r7, r2
 800254c:	4e09      	ldr	r6, [pc, #36]	; (8002574 <WaitForFlag.isra.0.part.1+0x30>)
 800254e:	6832      	ldr	r2, [r6, #0]
 8002550:	e001      	b.n	8002556 <WaitForFlag.isra.0.part.1+0x12>

	if(bFlagStateRequired)
	{
		while(((pI2c->ISR)&nFlag) != nFlag)
			{
 				if(nTimeoutVal != HAL_MAX_DELAY)
 8002552:	1c6b      	adds	r3, r5, #1
 8002554:	d105      	bne.n	8002562 <WaitForFlag.isra.0.part.1+0x1e>
		while(((pI2c->ISR)&nFlag) != nFlag)
 8002556:	6993      	ldr	r3, [r2, #24]
 8002558:	4023      	ands	r3, r4
 800255a:	429c      	cmp	r4, r3
 800255c:	d1f9      	bne.n	8002552 <WaitForFlag.isra.0.part.1+0xe>
						  }
						}
					}

	}
	return 0;
 800255e:	2000      	movs	r0, #0
}
 8002560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				      if((nTimeoutVal == 0U)||((HAL_GetTick() - nTickstart ) > nTimeoutVal))
 8002562:	2d00      	cmp	r5, #0
 8002564:	d004      	beq.n	8002570 <WaitForFlag.isra.0.part.1+0x2c>
 8002566:	f7fd fec7 	bl	80002f8 <HAL_GetTick>
 800256a:	1bc0      	subs	r0, r0, r7
 800256c:	4285      	cmp	r5, r0
 800256e:	d2ee      	bcs.n	800254e <WaitForFlag.isra.0.part.1+0xa>
				        return 1;
 8002570:	2001      	movs	r0, #1
 8002572:	e7f5      	b.n	8002560 <WaitForFlag.isra.0.part.1+0x1c>
 8002574:	20000110 	.word	0x20000110

08002578 <i2c_write_blocking>:



uint8_t i2c_write_blocking(uint8_t* pData,uint8_t nSize,uint32_t nTimeout,uint8_t nSlave_addr)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	46d6      	mov	lr, sl
 800257c:	464f      	mov	r7, r9
 800257e:	4646      	mov	r6, r8
 8002580:	b5c0      	push	{r6, r7, lr}
 8002582:	4680      	mov	r8, r0
 8002584:	000f      	movs	r7, r1
 8002586:	4691      	mov	r9, r2
 8002588:	469a      	mov	sl, r3
		while(((pI2c->ISR)&nFlag) != 0)
 800258a:	2480      	movs	r4, #128	; 0x80
	uint8_t i=nSize;
	uint32_t tickstart = 0;

	tickstart = HAL_GetTick();
 800258c:	f7fd feb4 	bl	80002f8 <HAL_GetTick>
		while(((pI2c->ISR)&nFlag) != 0)
 8002590:	0224      	lsls	r4, r4, #8
	tickstart = HAL_GetTick();
 8002592:	0006      	movs	r6, r0
 8002594:	4d28      	ldr	r5, [pc, #160]	; (8002638 <i2c_write_blocking+0xc0>)
 8002596:	e004      	b.n	80025a2 <i2c_write_blocking+0x2a>
						  if((nTimeoutVal == 0U)||((HAL_GetTick() - nTickstart ) > nTimeoutVal))
 8002598:	f7fd feae 	bl	80002f8 <HAL_GetTick>
 800259c:	1b80      	subs	r0, r0, r6
 800259e:	2819      	cmp	r0, #25
 80025a0:	d836      	bhi.n	8002610 <i2c_write_blocking+0x98>
		while(((pI2c->ISR)&nFlag) != 0)
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	4222      	tst	r2, r4
 80025a8:	d1f6      	bne.n	8002598 <i2c_write_blocking+0x20>
		//while(1);
		return 1;
	}

	//clear nbytes and set it to new value.
	pI2c->CR2 &= (~I2C_CR2_NBYTES_Msk);
 80025aa:	685a      	ldr	r2, [r3, #4]
 80025ac:	4923      	ldr	r1, [pc, #140]	; (800263c <i2c_write_blocking+0xc4>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
	pI2c->CR2 |= nSize <<  I2C_CR2_NBYTES_Pos;
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	043a      	lsls	r2, r7, #16
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]

	//configure the i2c device to Repeated Start.
	pI2c->CR2 |= I2C_CR2_AUTOEND_Msk;
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	0492      	lsls	r2, r2, #18
 80025c0:	430a      	orrs	r2, r1
	//pI2c->CR2 &= ~I2C_CR2_AUTOEND_Msk;

	//set the target address.
	pI2c->CR2 &= (~I2C_CR2_SADD_Msk);
	pI2c->CR2 |= (nSlave_addr&I2C_CR2_SADD_Msk)<<I2C_CR2_SADD_Pos;
 80025c2:	4651      	mov	r1, sl
	pI2c->CR2 |= I2C_CR2_AUTOEND_Msk;
 80025c4:	605a      	str	r2, [r3, #4]
	pI2c->CR2 &= (~I2C_CR2_SADD_Msk);
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	0a92      	lsrs	r2, r2, #10
 80025ca:	0292      	lsls	r2, r2, #10
 80025cc:	605a      	str	r2, [r3, #4]
	pI2c->CR2 |= (nSlave_addr&I2C_CR2_SADD_Msk)<<I2C_CR2_SADD_Pos;
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4311      	orrs	r1, r2
 80025d2:	6059      	str	r1, [r3, #4]

	//set the controller to write mode.
	pI2c->CR2 &= ~I2C_CR2_RD_WRN_Msk;
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	491a      	ldr	r1, [pc, #104]	; (8002640 <i2c_write_blocking+0xc8>)
 80025d8:	400a      	ands	r2, r1
 80025da:	605a      	str	r2, [r3, #4]

	//wait for the controller to send start.
	pI2c->CR2 |=  I2C_CR2_START_Msk;
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	6859      	ldr	r1, [r3, #4]
 80025e0:	0192      	lsls	r2, r2, #6
 80025e2:	430a      	orrs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]




	while (i > 0)
 80025e6:	2f00      	cmp	r7, #0
 80025e8:	d018      	beq.n	800261c <i2c_write_blocking+0xa4>
 80025ea:	4644      	mov	r4, r8
 80025ec:	3f01      	subs	r7, #1
 80025ee:	b2ff      	uxtb	r7, r7
 80025f0:	3701      	adds	r7, #1
 80025f2:	19e7      	adds	r7, r4, r7
 80025f4:	e005      	b.n	8002602 <i2c_write_blocking+0x8a>
		{
			//while(1);
			return 1;
		}

		pI2c->TXDR = *(pData + (nSize - i));
 80025f6:	7822      	ldrb	r2, [r4, #0]
 80025f8:	682b      	ldr	r3, [r5, #0]
 80025fa:	3401      	adds	r4, #1
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
	while (i > 0)
 80025fe:	42bc      	cmp	r4, r7
 8002600:	d00c      	beq.n	800261c <i2c_write_blocking+0xa4>
 8002602:	0032      	movs	r2, r6
 8002604:	4649      	mov	r1, r9
 8002606:	2002      	movs	r0, #2
 8002608:	f7ff ff9c 	bl	8002544 <WaitForFlag.isra.0.part.1>
		if (WaitForFlag(&(pI2c->ISR), I2C_ISR_TXIS_Msk, 1,nTimeout, tickstart) != 0)
 800260c:	2800      	cmp	r0, #0
 800260e:	d0f2      	beq.n	80025f6 <i2c_write_blocking+0x7e>
		return 1;
 8002610:	2001      	movs	r0, #1
	//generate stop condition
	//pI2c->CR2 |= I2C_CR2_STOP_Msk;
	pI2c->ISR &= ~I2C_ISR_STOPF_Msk;

	return 0;
}
 8002612:	bc1c      	pop	{r2, r3, r4}
 8002614:	4690      	mov	r8, r2
 8002616:	4699      	mov	r9, r3
 8002618:	46a2      	mov	sl, r4
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	0032      	movs	r2, r6
 800261e:	4649      	mov	r1, r9
 8002620:	2020      	movs	r0, #32
 8002622:	f7ff ff8f 	bl	8002544 <WaitForFlag.isra.0.part.1>
	if(WaitForFlag(&(pI2c->ISR),I2C_ISR_STOPF_Msk,1,nTimeout,tickstart) != 0)
 8002626:	2800      	cmp	r0, #0
 8002628:	d1f2      	bne.n	8002610 <i2c_write_blocking+0x98>
	pI2c->ISR &= ~I2C_ISR_STOPF_Msk;
 800262a:	2120      	movs	r1, #32
 800262c:	682a      	ldr	r2, [r5, #0]
 800262e:	6993      	ldr	r3, [r2, #24]
 8002630:	438b      	bics	r3, r1
 8002632:	6193      	str	r3, [r2, #24]
	return 0;
 8002634:	e7ed      	b.n	8002612 <i2c_write_blocking+0x9a>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000110 	.word	0x20000110
 800263c:	ff00ffff 	.word	0xff00ffff
 8002640:	fffffbff 	.word	0xfffffbff

08002644 <i2c_read_blocking>:

uint8_t i2c_read_blocking(uint8_t* pData,uint8_t nSize,uint32_t nTimeout,uint8_t nSlave_addr)
{
 8002644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002646:	46d6      	mov	lr, sl
 8002648:	464f      	mov	r7, r9
 800264a:	4646      	mov	r6, r8
 800264c:	b5c0      	push	{r6, r7, lr}
 800264e:	4680      	mov	r8, r0
 8002650:	000f      	movs	r7, r1
 8002652:	4691      	mov	r9, r2
 8002654:	469a      	mov	sl, r3
		while(((pI2c->ISR)&nFlag) != 0)
 8002656:	2480      	movs	r4, #128	; 0x80
	uint8_t i=0;
	uint32_t tickstart=0;

	tickstart = HAL_GetTick();
 8002658:	f7fd fe4e 	bl	80002f8 <HAL_GetTick>
		while(((pI2c->ISR)&nFlag) != 0)
 800265c:	0224      	lsls	r4, r4, #8
	tickstart = HAL_GetTick();
 800265e:	0006      	movs	r6, r0
 8002660:	4d29      	ldr	r5, [pc, #164]	; (8002708 <i2c_read_blocking+0xc4>)
 8002662:	e004      	b.n	800266e <i2c_read_blocking+0x2a>
						  if((nTimeoutVal == 0U)||((HAL_GetTick() - nTickstart ) > nTimeoutVal))
 8002664:	f7fd fe48 	bl	80002f8 <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	2819      	cmp	r0, #25
 800266c:	d837      	bhi.n	80026de <i2c_read_blocking+0x9a>
		while(((pI2c->ISR)&nFlag) != 0)
 800266e:	682b      	ldr	r3, [r5, #0]
 8002670:	699a      	ldr	r2, [r3, #24]
 8002672:	4222      	tst	r2, r4
 8002674:	d1f6      	bne.n	8002664 <i2c_read_blocking+0x20>
	{
		return 1;
	}

	//clear nbytes and set it to new value.
	pI2c->CR2 &= (~I2C_CR2_NBYTES_Msk);
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	4924      	ldr	r1, [pc, #144]	; (800270c <i2c_read_blocking+0xc8>)
 800267a:	400a      	ands	r2, r1
 800267c:	605a      	str	r2, [r3, #4]
	pI2c->CR2 |= nSize <<  I2C_CR2_NBYTES_Pos;
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	043a      	lsls	r2, r7, #16
 8002682:	430a      	orrs	r2, r1
 8002684:	605a      	str	r2, [r3, #4]

	//configure the i2c device to Repeated Start.
	pI2c->CR2 |= I2C_CR2_AUTOEND_Msk;
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	0492      	lsls	r2, r2, #18
 800268c:	430a      	orrs	r2, r1
	//pI2c->CR2 &= ~I2C_CR2_AUTOEND_Msk;

	//set the target address.
	pI2c->CR2 &= (~I2C_CR2_SADD_Msk);
	pI2c->CR2 |= (nSlave_addr&I2C_CR2_SADD_Msk)<<I2C_CR2_SADD_Pos;
 800268e:	4651      	mov	r1, sl
	pI2c->CR2 |= I2C_CR2_AUTOEND_Msk;
 8002690:	605a      	str	r2, [r3, #4]
	pI2c->CR2 &= (~I2C_CR2_SADD_Msk);
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	0a92      	lsrs	r2, r2, #10
 8002696:	0292      	lsls	r2, r2, #10
 8002698:	605a      	str	r2, [r3, #4]
	pI2c->CR2 |= (nSlave_addr&I2C_CR2_SADD_Msk)<<I2C_CR2_SADD_Pos;
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4311      	orrs	r1, r2

	//set the i2c controller to read mode.
	pI2c->CR2 |= I2C_CR2_RD_WRN_Msk;
 800269e:	2280      	movs	r2, #128	; 0x80
	pI2c->CR2 |= (nSlave_addr&I2C_CR2_SADD_Msk)<<I2C_CR2_SADD_Pos;
 80026a0:	6059      	str	r1, [r3, #4]
	pI2c->CR2 |= I2C_CR2_RD_WRN_Msk;
 80026a2:	6859      	ldr	r1, [r3, #4]
 80026a4:	00d2      	lsls	r2, r2, #3
 80026a6:	430a      	orrs	r2, r1
 80026a8:	605a      	str	r2, [r3, #4]

	//wait for the controller to send start.
	pI2c->CR2 |=  I2C_CR2_START_Msk;
 80026aa:	2280      	movs	r2, #128	; 0x80
 80026ac:	6859      	ldr	r1, [r3, #4]
 80026ae:	0192      	lsls	r2, r2, #6
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]



	i=nSize;
		while (i)
 80026b4:	2f00      	cmp	r7, #0
 80026b6:	d019      	beq.n	80026ec <i2c_read_blocking+0xa8>
 80026b8:	4644      	mov	r4, r8
 80026ba:	3f01      	subs	r7, #1
 80026bc:	b2ff      	uxtb	r7, r7
 80026be:	3701      	adds	r7, #1
 80026c0:	19e7      	adds	r7, r4, r7
 80026c2:	e005      	b.n	80026d0 <i2c_read_blocking+0x8c>
		{
			//wait for current transfer to complete.
			if (WaitForFlag(&(pI2c->ISR), I2C_ISR_RXNE_Msk, 1,nTimeout, tickstart)) {
				return 1;
			}
			*(pData + (nSize - i)) = pI2c->RXDR;
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	7023      	strb	r3, [r4, #0]
 80026ca:	3401      	adds	r4, #1
		while (i)
 80026cc:	42bc      	cmp	r4, r7
 80026ce:	d00c      	beq.n	80026ea <i2c_read_blocking+0xa6>
 80026d0:	0032      	movs	r2, r6
 80026d2:	4649      	mov	r1, r9
 80026d4:	2004      	movs	r0, #4
 80026d6:	f7ff ff35 	bl	8002544 <WaitForFlag.isra.0.part.1>
			if (WaitForFlag(&(pI2c->ISR), I2C_ISR_RXNE_Msk, 1,nTimeout, tickstart)) {
 80026da:	2800      	cmp	r0, #0
 80026dc:	d0f2      	beq.n	80026c4 <i2c_read_blocking+0x80>
		return 1;
 80026de:	2001      	movs	r0, #1

	//generate stop condition
	//pI2c->CR2 |= I2C_CR2_STOP_Msk;

	return 0;
}
 80026e0:	bc1c      	pop	{r2, r3, r4}
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	46a2      	mov	sl, r4
 80026e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ea:	682b      	ldr	r3, [r5, #0]
		while(((pI2c->ISR)&nFlag) != 0)
 80026ec:	2410      	movs	r4, #16
 80026ee:	e005      	b.n	80026fc <i2c_read_blocking+0xb8>
						  if((nTimeoutVal == 0U)||((HAL_GetTick() - nTickstart ) > nTimeoutVal))
 80026f0:	f7fd fe02 	bl	80002f8 <HAL_GetTick>
 80026f4:	1b80      	subs	r0, r0, r6
 80026f6:	2819      	cmp	r0, #25
 80026f8:	d8f1      	bhi.n	80026de <i2c_read_blocking+0x9a>
 80026fa:	682b      	ldr	r3, [r5, #0]
		while(((pI2c->ISR)&nFlag) != 0)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	421c      	tst	r4, r3
 8002700:	d1f6      	bne.n	80026f0 <i2c_read_blocking+0xac>
	return 0;
 8002702:	2000      	movs	r0, #0
 8002704:	e7ec      	b.n	80026e0 <i2c_read_blocking+0x9c>
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000110 	.word	0x20000110
 800270c:	ff00ffff 	.word	0xff00ffff

08002710 <lm75_get_temp_raw>:
#include "i2c_driver.h"


uint16_t lm75_get_temp_raw()
{
	uint8_t buf[2] =
 8002710:	2300      	movs	r3, #0
			{0,0};

	//read the temprerture from the sensor.
	i2c_read_blocking(buf,sizeof(buf),1000,LM75_I2C_ADDR);
 8002712:	22fa      	movs	r2, #250	; 0xfa
{
 8002714:	b510      	push	{r4, lr}
 8002716:	b082      	sub	sp, #8
	uint8_t buf[2] =
 8002718:	ac01      	add	r4, sp, #4
 800271a:	7023      	strb	r3, [r4, #0]
 800271c:	7063      	strb	r3, [r4, #1]
	i2c_read_blocking(buf,sizeof(buf),1000,LM75_I2C_ADDR);
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	339e      	adds	r3, #158	; 0x9e
 8002722:	2102      	movs	r1, #2
 8002724:	0020      	movs	r0, r4
 8002726:	f7ff ff8d 	bl	8002644 <i2c_read_blocking>

	return (buf[1]|(buf[0]<<8));
 800272a:	7823      	ldrb	r3, [r4, #0]
 800272c:	7860      	ldrb	r0, [r4, #1]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	4318      	orrs	r0, r3
}
 8002732:	b002      	add	sp, #8
 8002734:	bd10      	pop	{r4, pc}
 8002736:	46c0      	nop			; (mov r8, r8)

08002738 <EXTI0_1_IRQHandler>:
volatile uint32_t nBtnPressTick;
volatile uint8_t bBtnPressed=0;
volatile uint8_t bDoLog=0;
//user btn intterupt
void EXTI0_1_IRQHandler()
{
 8002738:	b570      	push	{r4, r5, r6, lr}
	uint32_t nCurrenttick = HAL_GetTick();
 800273a:	f7fd fddd 	bl	80002f8 <HAL_GetTick>
 800273e:	0006      	movs	r6, r0
	uint32_t nDiff=0;

	//clear the interrupt
	HAL_NVIC_ClearPendingIRQ(EXTI0_1_IRQn);
 8002740:	2005      	movs	r0, #5
 8002742:	f7fd fe47 	bl	80003d4 <HAL_NVIC_ClearPendingIRQ>
	pEXTI->PR = 1; //clear the pr reg.
 8002746:	2201      	movs	r2, #1
 8002748:	4d1f      	ldr	r5, [pc, #124]	; (80027c8 <EXTI0_1_IRQHandler+0x90>)
	//check if the button was pressed or released.
	if(bBtnPressed)
 800274a:	4c20      	ldr	r4, [pc, #128]	; (80027cc <EXTI0_1_IRQHandler+0x94>)
	pEXTI->PR = 1; //clear the pr reg.
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	615a      	str	r2, [r3, #20]
	if(bBtnPressed)
 8002750:	7821      	ldrb	r1, [r4, #0]
 8002752:	2900      	cmp	r1, #0
 8002754:	d016      	beq.n	8002784 <EXTI0_1_IRQHandler+0x4c>
	{
		//this interrupt is a release, check if this is a long press or short.
		nDiff = nCurrenttick-nBtnPressTick;
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <EXTI0_1_IRQHandler+0x98>)
		if(nDiff >= BTN_PRESS_LONG_TIME)
		{
			sSysHandler.nBtnPressed = BTN_PRESS_LONG;
 8002758:	491e      	ldr	r1, [pc, #120]	; (80027d4 <EXTI0_1_IRQHandler+0x9c>)
		nDiff = nCurrenttick-nBtnPressTick;
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	1ab6      	subs	r6, r6, r2
		if(nDiff >= BTN_PRESS_LONG_TIME)
 800275e:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <EXTI0_1_IRQHandler+0xa0>)
 8002760:	4296      	cmp	r6, r2
 8002762:	d919      	bls.n	8002798 <EXTI0_1_IRQHandler+0x60>
			sSysHandler.nBtnPressed = BTN_PRESS_LONG;
 8002764:	200c      	movs	r0, #12
 8002766:	7a0a      	ldrb	r2, [r1, #8]
 8002768:	4382      	bics	r2, r0
 800276a:	2008      	movs	r0, #8
 800276c:	4302      	orrs	r2, r0
 800276e:	720a      	strb	r2, [r1, #8]
			else
			{
				sSysHandler.nBtnPressed = BTN_PRESS_SHORT;
			}
		}
		bBtnPressed = 0;
 8002770:	2200      	movs	r2, #0
		pEXTI->FTSR |= 1;
 8002772:	2101      	movs	r1, #1
		bBtnPressed = 0;
 8002774:	7022      	strb	r2, [r4, #0]
		pEXTI->FTSR |= 1;
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]
		pEXTI->RTSR &= ~((uint32_t)1);
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	438a      	bics	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e008      	b.n	8002796 <EXTI0_1_IRQHandler+0x5e>
	}
	else
	{
		//this is a falling edge, save the current press tick and wait for user to release button.
		bBtnPressed =1;
		nBtnPressTick = nCurrenttick;
 8002784:	4912      	ldr	r1, [pc, #72]	; (80027d0 <EXTI0_1_IRQHandler+0x98>)
		bBtnPressed =1;
 8002786:	7022      	strb	r2, [r4, #0]
		nBtnPressTick = nCurrenttick;
 8002788:	600e      	str	r6, [r1, #0]
		pEXTI->RTSR |= 1;
 800278a:	6899      	ldr	r1, [r3, #8]
 800278c:	4311      	orrs	r1, r2
 800278e:	6099      	str	r1, [r3, #8]
		pEXTI->FTSR &= ~((uint32_t)1);
 8002790:	68d9      	ldr	r1, [r3, #12]
 8002792:	4391      	bics	r1, r2
 8002794:	60d9      	str	r1, [r3, #12]
	}
}
 8002796:	bd70      	pop	{r4, r5, r6, pc}
			if(sSysHandler.bLcdoff && (sSysHandler.eMainstate == main_screen_state))
 8002798:	688a      	ldr	r2, [r1, #8]
 800279a:	06d2      	lsls	r2, r2, #27
 800279c:	d502      	bpl.n	80027a4 <EXTI0_1_IRQHandler+0x6c>
 800279e:	780a      	ldrb	r2, [r1, #0]
 80027a0:	2a01      	cmp	r2, #1
 80027a2:	d006      	beq.n	80027b2 <EXTI0_1_IRQHandler+0x7a>
				sSysHandler.nBtnPressed = BTN_PRESS_SHORT;
 80027a4:	200c      	movs	r0, #12
 80027a6:	7a0a      	ldrb	r2, [r1, #8]
 80027a8:	4382      	bics	r2, r0
 80027aa:	2004      	movs	r0, #4
 80027ac:	4302      	orrs	r2, r0
 80027ae:	720a      	strb	r2, [r1, #8]
 80027b0:	e7de      	b.n	8002770 <EXTI0_1_IRQHandler+0x38>
				sSysHandler.bLcdoff = 0;
 80027b2:	7a0b      	ldrb	r3, [r1, #8]
 80027b4:	320f      	adds	r2, #15
 80027b6:	4393      	bics	r3, r2
 80027b8:	720b      	strb	r3, [r1, #8]
				SSD1306_WRITECOMMAND(0xAF);
 80027ba:	329f      	adds	r2, #159	; 0x9f
 80027bc:	2100      	movs	r1, #0
 80027be:	2078      	movs	r0, #120	; 0x78
 80027c0:	f001 fba0 	bl	8003f04 <TM_I2C_Write>
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	e7d3      	b.n	8002770 <EXTI0_1_IRQHandler+0x38>
 80027c8:	20000124 	.word	0x20000124
 80027cc:	200002d0 	.word	0x200002d0
 80027d0:	20000a38 	.word	0x20000a38
 80027d4:	200009e0 	.word	0x200009e0
 80027d8:	000002bb 	.word	0x000002bb

080027dc <TIM14_IRQHandler>:
//timer interrupt handler
void TIM14_IRQHandler()
{
	//if we're here, device should have woken up.
	//clear the interrupt and let the device go.
	_TIMER14_CLEAR_IRQ();
 80027dc:	2202      	movs	r2, #2
{
 80027de:	b510      	push	{r4, lr}
	_TIMER14_CLEAR_IRQ();
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <TIM14_IRQHandler+0x30>)

	HAL_NVIC_ClearPendingIRQ(TIM14_IRQn);
 80027e2:	2013      	movs	r0, #19
	_TIMER14_CLEAR_IRQ();
 80027e4:	6923      	ldr	r3, [r4, #16]
 80027e6:	4393      	bics	r3, r2
 80027e8:	6123      	str	r3, [r4, #16]
	HAL_NVIC_ClearPendingIRQ(TIM14_IRQn);
 80027ea:	f7fd fdf3 	bl	80003d4 <HAL_NVIC_ClearPendingIRQ>
	//reset stop the counter and reset its value.

	//todo: values needed for 1,5,20,60 secs of delay per timer.


	_TIMER14_STOP();
 80027ee:	2201      	movs	r2, #1
 80027f0:	6823      	ldr	r3, [r4, #0]
	_TIMER14_SET_COUNTER(0);

	//set internal clk back to 8Mhz.
	RCC->CFGR &= ~(RCC_CFGR_HPRE_3|RCC_CFGR_HPRE_0);
 80027f2:	2090      	movs	r0, #144	; 0x90
	_TIMER14_STOP();
 80027f4:	4393      	bics	r3, r2
 80027f6:	6023      	str	r3, [r4, #0]
	_TIMER14_SET_COUNTER(0);
 80027f8:	2300      	movs	r3, #0
	RCC->CFGR &= ~(RCC_CFGR_HPRE_3|RCC_CFGR_HPRE_0);
 80027fa:	4905      	ldr	r1, [pc, #20]	; (8002810 <TIM14_IRQHandler+0x34>)
	_TIMER14_SET_COUNTER(0);
 80027fc:	6263      	str	r3, [r4, #36]	; 0x24
	RCC->CFGR &= ~(RCC_CFGR_HPRE_3|RCC_CFGR_HPRE_0);
 80027fe:	684b      	ldr	r3, [r1, #4]
 8002800:	4383      	bics	r3, r0
 8002802:	604b      	str	r3, [r1, #4]

	bDoLog= 1;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <TIM14_IRQHandler+0x38>)
 8002806:	701a      	strb	r2, [r3, #0]

}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	40002000 	.word	0x40002000
 8002810:	40021000 	.word	0x40021000
 8002814:	200002d1 	.word	0x200002d1

08002818 <ReportToPC>:
  /* USER CODE END 3 */

}

void ReportToPC()
{
 8002818:	b510      	push	{r4, lr}
	static uint32_t nLastTempReport=0;
	uint32_t nCurrentTime =HAL_GetTick();
 800281a:	f7fd fd6d 	bl	80002f8 <HAL_GetTick>



	if((nCurrentTime - nLastTempReport) > 1000)
 800281e:	23fa      	movs	r3, #250	; 0xfa
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4298      	cmp	r0, r3
 8002824:	d901      	bls.n	800282a <ReportToPC+0x12>
	{
		BuildAndSendStatusMsg();
 8002826:	f001 f8d3 	bl	80039d0 <BuildAndSendStatusMsg>





}
 800282a:	bd10      	pop	{r4, pc}

0800282c <update_lcd>:

void update_lcd()
{
 800282c:	b570      	push	{r4, r5, r6, lr}
	uint8_t bColor=0;
	switch(sSysHandler.eMainstate)
 800282e:	4ce1      	ldr	r4, [pc, #900]	; (8002bb4 <update_lcd+0x388>)
{
 8002830:	b082      	sub	sp, #8
	switch(sSysHandler.eMainstate)
 8002832:	7823      	ldrb	r3, [r4, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b08      	cmp	r3, #8
 8002838:	d900      	bls.n	800283c <update_lcd+0x10>
 800283a:	e081      	b.n	8002940 <update_lcd+0x114>
 800283c:	4ade      	ldr	r2, [pc, #888]	; (8002bb8 <update_lcd+0x38c>)
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	58d3      	ldr	r3, [r2, r3]
 8002842:	469f      	mov	pc, r3



		TM_SSD1306_GotoXY(30,0);
		TM_SSD1306_Puts("Settings",&TM_Font_7x10,SSD1306_COLOR_WHITE);
		TM_SSD1306_DrawLine(0,11,128,11,SSD1306_COLOR_WHITE);
 8002844:	2601      	movs	r6, #1
		TM_SSD1306_GotoXY(30,0);
 8002846:	2100      	movs	r1, #0
 8002848:	201e      	movs	r0, #30
 800284a:	f000 fe5b 	bl	8003504 <TM_SSD1306_GotoXY>
		TM_SSD1306_Puts("Settings",&TM_Font_7x10,SSD1306_COLOR_WHITE);
 800284e:	4ddb      	ldr	r5, [pc, #876]	; (8002bbc <update_lcd+0x390>)
 8002850:	2201      	movs	r2, #1
 8002852:	0029      	movs	r1, r5
 8002854:	48da      	ldr	r0, [pc, #872]	; (8002bc0 <update_lcd+0x394>)
 8002856:	f000 fed3 	bl	8003600 <TM_SSD1306_Puts>
		TM_SSD1306_DrawLine(0,11,128,11,SSD1306_COLOR_WHITE);
 800285a:	230b      	movs	r3, #11
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	210b      	movs	r1, #11
 8002860:	2000      	movs	r0, #0
 8002862:	9600      	str	r6, [sp, #0]
 8002864:	f000 fee4 	bl	8003630 <TM_SSD1306_DrawLine>

		//menu items
		TM_SSD1306_GotoXY(14,12);
 8002868:	210c      	movs	r1, #12
 800286a:	200e      	movs	r0, #14
 800286c:	f000 fe4a 	bl	8003504 <TM_SSD1306_GotoXY>

		if(sSysHandler.nCurrentmenuitem == 0)
 8002870:	68a3      	ldr	r3, [r4, #8]
 8002872:	065b      	lsls	r3, r3, #25
 8002874:	0f9b      	lsrs	r3, r3, #30
 8002876:	d000      	beq.n	800287a <update_lcd+0x4e>
 8002878:	e18d      	b.n	8002b96 <update_lcd+0x36a>
		{
			TM_SSD1306_DrawFilledRectangle(0,12,128,10,SSD1306_COLOR_WHITE);
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	9600      	str	r6, [sp, #0]
 800287e:	330a      	adds	r3, #10
 8002880:	210c      	movs	r1, #12
 8002882:	2000      	movs	r0, #0
 8002884:	f000 ff9e 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=0;
 8002888:	2200      	movs	r2, #0
		{
			TM_SSD1306_DrawFilledRectangle(0,12,128,10,SSD1306_COLOR_BLACK);
			bColor=1;
		}

		if(sSysHandler.bRecordingFull)
 800288a:	7923      	ldrb	r3, [r4, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d000      	beq.n	8002892 <update_lcd+0x66>
 8002890:	e1b8      	b.n	8002c04 <update_lcd+0x3d8>
		{
			TM_SSD1306_Puts("Recordings Full",&TM_Font_7x10,bColor);
		}
		else if(sSysHandler.bLog)
 8002892:	68a3      	ldr	r3, [r4, #8]
		{
			TM_SSD1306_Puts("Stop Recording",&TM_Font_7x10,bColor);
 8002894:	0029      	movs	r1, r5
		else if(sSysHandler.bLog)
 8002896:	07db      	lsls	r3, r3, #31
 8002898:	d500      	bpl.n	800289c <update_lcd+0x70>
 800289a:	e186      	b.n	8002baa <update_lcd+0x37e>
		}
		else
		{
			TM_SSD1306_Puts("Start Recording",&TM_Font_7x10,bColor);
 800289c:	48c9      	ldr	r0, [pc, #804]	; (8002bc4 <update_lcd+0x398>)
 800289e:	f000 feaf 	bl	8003600 <TM_SSD1306_Puts>
		}


		TM_SSD1306_GotoXY(14,22);
 80028a2:	2116      	movs	r1, #22
 80028a4:	200e      	movs	r0, #14
 80028a6:	f000 fe2d 	bl	8003504 <TM_SSD1306_GotoXY>
		if(sSysHandler.nCurrentmenuitem == 1)
 80028aa:	68a3      	ldr	r3, [r4, #8]
 80028ac:	065b      	lsls	r3, r3, #25
 80028ae:	0f9b      	lsrs	r3, r3, #30
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d100      	bne.n	80028b6 <update_lcd+0x8a>
 80028b4:	e1fc      	b.n	8002cb0 <update_lcd+0x484>
			TM_SSD1306_DrawFilledRectangle(0,22,128,10,SSD1306_COLOR_WHITE);
			bColor=0;
		}
		else
		{
			TM_SSD1306_DrawFilledRectangle(0,22,128,10,SSD1306_COLOR_BLACK);
 80028b6:	2300      	movs	r3, #0
 80028b8:	2280      	movs	r2, #128	; 0x80
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2116      	movs	r1, #22
 80028be:	330a      	adds	r3, #10
 80028c0:	2000      	movs	r0, #0
 80028c2:	f000 ff7f 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=1;
 80028c6:	2201      	movs	r2, #1
		}
		TM_SSD1306_Puts("Recording Setup",&TM_Font_7x10,bColor);
 80028c8:	0029      	movs	r1, r5
 80028ca:	48bf      	ldr	r0, [pc, #764]	; (8002bc8 <update_lcd+0x39c>)
 80028cc:	f000 fe98 	bl	8003600 <TM_SSD1306_Puts>

		TM_SSD1306_GotoXY(42,32);
 80028d0:	2120      	movs	r1, #32
 80028d2:	202a      	movs	r0, #42	; 0x2a
 80028d4:	f000 fe16 	bl	8003504 <TM_SSD1306_GotoXY>
		if(sSysHandler.nCurrentmenuitem == 2)
 80028d8:	68a3      	ldr	r3, [r4, #8]
 80028da:	065b      	lsls	r3, r3, #25
 80028dc:	0f9b      	lsrs	r3, r3, #30
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d100      	bne.n	80028e4 <update_lcd+0xb8>
 80028e2:	e1db      	b.n	8002c9c <update_lcd+0x470>
			TM_SSD1306_DrawFilledRectangle(0,32,128,10,SSD1306_COLOR_WHITE);
			bColor=0;
		}
		else
		{
			TM_SSD1306_DrawFilledRectangle(0,32,128,10,SSD1306_COLOR_BLACK);
 80028e4:	2300      	movs	r3, #0
 80028e6:	2280      	movs	r2, #128	; 0x80
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2120      	movs	r1, #32
 80028ec:	330a      	adds	r3, #10
 80028ee:	2000      	movs	r0, #0
 80028f0:	f000 ff68 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=1;
 80028f4:	2201      	movs	r2, #1
		}
		TM_SSD1306_Puts("Exit",&TM_Font_7x10,bColor);
 80028f6:	0029      	movs	r1, r5
 80028f8:	48b4      	ldr	r0, [pc, #720]	; (8002bcc <update_lcd+0x3a0>)
 80028fa:	f000 fe81 	bl	8003600 <TM_SSD1306_Puts>

		//check button presses.
		if(sSysHandler.nBtnPressed == BTN_PRESS_LONG)
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	071b      	lsls	r3, r3, #28
 8002902:	0f9b      	lsrs	r3, r3, #30
 8002904:	2b02      	cmp	r3, #2
 8002906:	d100      	bne.n	800290a <update_lcd+0xde>
 8002908:	e188      	b.n	8002c1c <update_lcd+0x3f0>
					break;
				}
				//button press was caught, remove press.
				sSysHandler.nBtnPressed = BTN_PRESS_NONE;
			}
		else if(sSysHandler.nBtnPressed == BTN_PRESS_SHORT)
 800290a:	68a3      	ldr	r3, [r4, #8]
 800290c:	071b      	lsls	r3, r3, #28
 800290e:	0f9b      	lsrs	r3, r3, #30
 8002910:	2b01      	cmp	r3, #1
 8002912:	d115      	bne.n	8002940 <update_lcd+0x114>
			{
			sSysHandler.nCurrentmenuitem == 2 ? sSysHandler.nCurrentmenuitem=0:sSysHandler.nCurrentmenuitem++;
 8002914:	68a3      	ldr	r3, [r4, #8]
 8002916:	065b      	lsls	r3, r3, #25
 8002918:	0f9b      	lsrs	r3, r3, #30
 800291a:	2b02      	cmp	r3, #2
 800291c:	d100      	bne.n	8002920 <update_lcd+0xf4>
 800291e:	e0a4      	b.n	8002a6a <update_lcd+0x23e>
						sSysHandler.nBtnPressed = BTN_PRESS_NONE;
					}
				else if(sSysHandler.nBtnPressed == BTN_PRESS_SHORT)
					{
						//move to the next item
					sSysHandler.nCurrentmenuitem == 3 ? sSysHandler.nCurrentmenuitem=0:sSysHandler.nCurrentmenuitem++;
 8002920:	2203      	movs	r2, #3
 8002922:	2160      	movs	r1, #96	; 0x60
 8002924:	68a3      	ldr	r3, [r4, #8]
 8002926:	065b      	lsls	r3, r3, #25
 8002928:	0f9b      	lsrs	r3, r3, #30
 800292a:	3301      	adds	r3, #1
 800292c:	401a      	ands	r2, r3
 800292e:	7a23      	ldrb	r3, [r4, #8]
 8002930:	0152      	lsls	r2, r2, #5
 8002932:	438b      	bics	r3, r1
 8002934:	4313      	orrs	r3, r2
 8002936:	7223      	strb	r3, [r4, #8]
					//button press was caught, remove press.
					sSysHandler.nBtnPressed = BTN_PRESS_NONE;
 8002938:	220c      	movs	r2, #12
 800293a:	7a23      	ldrb	r3, [r4, #8]
 800293c:	4393      	bics	r3, r2
 800293e:	7223      	strb	r3, [r4, #8]

		//what?
	}

	}
	if((sSysHandler.bLcdoff) == 0)
 8002940:	68a3      	ldr	r3, [r4, #8]
 8002942:	06db      	lsls	r3, r3, #27
 8002944:	d401      	bmi.n	800294a <update_lcd+0x11e>
	{
	TM_SSD1306_UpdateScreen();
 8002946:	f000 fd45 	bl	80033d4 <TM_SSD1306_UpdateScreen>
	}


}
 800294a:	b002      	add	sp, #8
 800294c:	bd70      	pop	{r4, r5, r6, pc}
				TM_SSD1306_DrawLine(0,11,128,11,SSD1306_COLOR_WHITE);
 800294e:	2601      	movs	r6, #1
		TM_SSD1306_GotoXY(30,0);
 8002950:	2100      	movs	r1, #0
 8002952:	201e      	movs	r0, #30
 8002954:	f000 fdd6 	bl	8003504 <TM_SSD1306_GotoXY>
				TM_SSD1306_Puts("recording setup",&TM_Font_7x10,SSD1306_COLOR_WHITE);
 8002958:	4d98      	ldr	r5, [pc, #608]	; (8002bbc <update_lcd+0x390>)
 800295a:	2201      	movs	r2, #1
 800295c:	0029      	movs	r1, r5
 800295e:	489c      	ldr	r0, [pc, #624]	; (8002bd0 <update_lcd+0x3a4>)
 8002960:	f000 fe4e 	bl	8003600 <TM_SSD1306_Puts>
				TM_SSD1306_DrawLine(0,11,128,11,SSD1306_COLOR_WHITE);
 8002964:	230b      	movs	r3, #11
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	210b      	movs	r1, #11
 800296a:	2000      	movs	r0, #0
 800296c:	9600      	str	r6, [sp, #0]
 800296e:	f000 fe5f 	bl	8003630 <TM_SSD1306_DrawLine>
				TM_SSD1306_GotoXY(14,12);
 8002972:	210c      	movs	r1, #12
 8002974:	200e      	movs	r0, #14
 8002976:	f000 fdc5 	bl	8003504 <TM_SSD1306_GotoXY>
				if(sSysHandler.nCurrentmenuitem == 0)
 800297a:	68a3      	ldr	r3, [r4, #8]
 800297c:	065b      	lsls	r3, r3, #25
 800297e:	0f9b      	lsrs	r3, r3, #30
 8002980:	d000      	beq.n	8002984 <update_lcd+0x158>
 8002982:	e0fe      	b.n	8002b82 <update_lcd+0x356>
					TM_SSD1306_DrawFilledRectangle(0,12,128,10,SSD1306_COLOR_WHITE);
 8002984:	9600      	str	r6, [sp, #0]
 8002986:	330a      	adds	r3, #10
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	210c      	movs	r1, #12
 800298c:	2000      	movs	r0, #0
 800298e:	f000 ff19 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=0;
 8002992:	2600      	movs	r6, #0
					TM_SSD1306_Puts("record diff ",&TM_Font_7x10,bColor);
 8002994:	0032      	movs	r2, r6
 8002996:	0029      	movs	r1, r5
 8002998:	488e      	ldr	r0, [pc, #568]	; (8002bd4 <update_lcd+0x3a8>)
 800299a:	f000 fe31 	bl	8003600 <TM_SSD1306_Puts>
					TM_SSD1306_Puts(itoa(nTimediffs[sSysHandler.nSecondsBetweenSamplesidx],cWorkingStr,10),&TM_Font_7x10,bColor);
 800299e:	7863      	ldrb	r3, [r4, #1]
 80029a0:	4a8d      	ldr	r2, [pc, #564]	; (8002bd8 <update_lcd+0x3ac>)
 80029a2:	498e      	ldr	r1, [pc, #568]	; (8002bdc <update_lcd+0x3b0>)
 80029a4:	5cd0      	ldrb	r0, [r2, r3]
 80029a6:	220a      	movs	r2, #10
 80029a8:	f001 faf8 	bl	8003f9c <itoa>
 80029ac:	0032      	movs	r2, r6
 80029ae:	0029      	movs	r1, r5
 80029b0:	f000 fe26 	bl	8003600 <TM_SSD1306_Puts>
				TM_SSD1306_GotoXY(14,22);
 80029b4:	2116      	movs	r1, #22
 80029b6:	200e      	movs	r0, #14
 80029b8:	f000 fda4 	bl	8003504 <TM_SSD1306_GotoXY>
				if(sSysHandler.nCurrentmenuitem == 1)
 80029bc:	68a3      	ldr	r3, [r4, #8]
 80029be:	065b      	lsls	r3, r3, #25
 80029c0:	0f9b      	lsrs	r3, r3, #30
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d100      	bne.n	80029c8 <update_lcd+0x19c>
 80029c6:	e160      	b.n	8002c8a <update_lcd+0x45e>
					TM_SSD1306_DrawFilledRectangle(0,22,128,10,SSD1306_COLOR_BLACK);
 80029c8:	2300      	movs	r3, #0
 80029ca:	2280      	movs	r2, #128	; 0x80
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2116      	movs	r1, #22
 80029d0:	330a      	adds	r3, #10
 80029d2:	2000      	movs	r0, #0
 80029d4:	f000 fef6 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=1;
 80029d8:	2201      	movs	r2, #1
				if(sSysHandler.bLedon)
 80029da:	68a3      	ldr	r3, [r4, #8]
					TM_SSD1306_Puts("Led on",&TM_Font_7x10,bColor);
 80029dc:	0029      	movs	r1, r5
				if(sSysHandler.bLedon)
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	d400      	bmi.n	80029e4 <update_lcd+0x1b8>
 80029e2:	e0ca      	b.n	8002b7a <update_lcd+0x34e>
					TM_SSD1306_Puts("Led on",&TM_Font_7x10,bColor);
 80029e4:	487e      	ldr	r0, [pc, #504]	; (8002be0 <update_lcd+0x3b4>)
 80029e6:	f000 fe0b 	bl	8003600 <TM_SSD1306_Puts>
				TM_SSD1306_GotoXY(14,32);
 80029ea:	2120      	movs	r1, #32
 80029ec:	200e      	movs	r0, #14
 80029ee:	f000 fd89 	bl	8003504 <TM_SSD1306_GotoXY>
				if(sSysHandler.nCurrentmenuitem == 2)
 80029f2:	68a3      	ldr	r3, [r4, #8]
 80029f4:	065b      	lsls	r3, r3, #25
 80029f6:	0f9b      	lsrs	r3, r3, #30
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d100      	bne.n	80029fe <update_lcd+0x1d2>
 80029fc:	e13b      	b.n	8002c76 <update_lcd+0x44a>
					TM_SSD1306_DrawFilledRectangle(0,32,128,10,SSD1306_COLOR_BLACK);
 80029fe:	2300      	movs	r3, #0
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	2120      	movs	r1, #32
 8002a06:	330a      	adds	r3, #10
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f000 fedb 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=1;
 8002a0e:	2201      	movs	r2, #1
				TM_SSD1306_Puts("Delete Recs",&TM_Font_7x10,bColor);
 8002a10:	0029      	movs	r1, r5
 8002a12:	4874      	ldr	r0, [pc, #464]	; (8002be4 <update_lcd+0x3b8>)
 8002a14:	f000 fdf4 	bl	8003600 <TM_SSD1306_Puts>
				TM_SSD1306_GotoXY(42,42);
 8002a18:	212a      	movs	r1, #42	; 0x2a
 8002a1a:	202a      	movs	r0, #42	; 0x2a
 8002a1c:	f000 fd72 	bl	8003504 <TM_SSD1306_GotoXY>
				if(sSysHandler.nCurrentmenuitem == 3)
 8002a20:	68a3      	ldr	r3, [r4, #8]
 8002a22:	065b      	lsls	r3, r3, #25
 8002a24:	0f9b      	lsrs	r3, r3, #30
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d100      	bne.n	8002a2c <update_lcd+0x200>
 8002a2a:	e11a      	b.n	8002c62 <update_lcd+0x436>
					TM_SSD1306_DrawFilledRectangle(0,42,128,10,SSD1306_COLOR_BLACK);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	212a      	movs	r1, #42	; 0x2a
 8002a34:	330a      	adds	r3, #10
 8002a36:	2000      	movs	r0, #0
 8002a38:	f000 fec4 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=1;
 8002a3c:	2201      	movs	r2, #1
				TM_SSD1306_Puts("Exit",&TM_Font_7x10,bColor);
 8002a3e:	0029      	movs	r1, r5
 8002a40:	4862      	ldr	r0, [pc, #392]	; (8002bcc <update_lcd+0x3a0>)
 8002a42:	f000 fddd 	bl	8003600 <TM_SSD1306_Puts>
				if(sSysHandler.nBtnPressed == BTN_PRESS_LONG)
 8002a46:	68a3      	ldr	r3, [r4, #8]
 8002a48:	071b      	lsls	r3, r3, #28
 8002a4a:	0f9b      	lsrs	r3, r3, #30
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d100      	bne.n	8002a52 <update_lcd+0x226>
 8002a50:	e0ed      	b.n	8002c2e <update_lcd+0x402>
				else if(sSysHandler.nBtnPressed == BTN_PRESS_SHORT)
 8002a52:	68a3      	ldr	r3, [r4, #8]
 8002a54:	071b      	lsls	r3, r3, #28
 8002a56:	0f9b      	lsrs	r3, r3, #30
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d000      	beq.n	8002a5e <update_lcd+0x232>
 8002a5c:	e770      	b.n	8002940 <update_lcd+0x114>
					sSysHandler.nCurrentmenuitem == 3 ? sSysHandler.nCurrentmenuitem=0:sSysHandler.nCurrentmenuitem++;
 8002a5e:	68a3      	ldr	r3, [r4, #8]
 8002a60:	065b      	lsls	r3, r3, #25
 8002a62:	0f9b      	lsrs	r3, r3, #30
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d000      	beq.n	8002a6a <update_lcd+0x23e>
 8002a68:	e75a      	b.n	8002920 <update_lcd+0xf4>
							sSysHandler.nCurrentmenuitem = 0;
 8002a6a:	2260      	movs	r2, #96	; 0x60
 8002a6c:	7a23      	ldrb	r3, [r4, #8]
 8002a6e:	4393      	bics	r3, r2
 8002a70:	7223      	strb	r3, [r4, #8]
							break;
 8002a72:	e761      	b.n	8002938 <update_lcd+0x10c>
		flash_invalidate_headers();
 8002a74:	f7ff fc18 	bl	80022a8 <flash_invalidate_headers>
		flash_erase_recordings();
 8002a78:	f7ff fc26 	bl	80022c8 <flash_erase_recordings>
		sSysHandler.bRecordingFull = flash_mgmt_init();
 8002a7c:	f7ff fb86 	bl	800218c <flash_mgmt_init>
 8002a80:	7120      	strb	r0, [r4, #4]
		TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 fd08 	bl	8003498 <TM_SSD1306_Fill>
		sSysHandler.eMainstate = main_screen_state;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	7023      	strb	r3, [r4, #0]
		break;
 8002a8c:	e758      	b.n	8002940 <update_lcd+0x114>
		TM_SSD1306_GotoXY(40,0);
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2028      	movs	r0, #40	; 0x28
 8002a92:	f000 fd37 	bl	8003504 <TM_SSD1306_GotoXY>
		TM_SSD1306_Puts("Tempo",&TM_Font_7x10,SSD1306_COLOR_WHITE);
 8002a96:	4d49      	ldr	r5, [pc, #292]	; (8002bbc <update_lcd+0x390>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	4852      	ldr	r0, [pc, #328]	; (8002be8 <update_lcd+0x3bc>)
 8002a9e:	f000 fdaf 	bl	8003600 <TM_SSD1306_Puts>
		TM_SSD1306_DrawLine(0,11,128,11,SSD1306_COLOR_WHITE);
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	210b      	movs	r1, #11
 8002aaa:	330a      	adds	r3, #10
 8002aac:	2000      	movs	r0, #0
 8002aae:	f000 fdbf 	bl	8003630 <TM_SSD1306_DrawLine>
		if(sSysHandler.bLog)
 8002ab2:	68a3      	ldr	r3, [r4, #8]
 8002ab4:	07db      	lsls	r3, r3, #31
 8002ab6:	d500      	bpl.n	8002aba <update_lcd+0x28e>
 8002ab8:	e0a9      	b.n	8002c0e <update_lcd+0x3e2>
		itoa((((sSysHandler.nCurrentTemp)&0xff00)>>8),cWorkingStr,10);
 8002aba:	4e48      	ldr	r6, [pc, #288]	; (8002bdc <update_lcd+0x3b0>)
 8002abc:	8860      	ldrh	r0, [r4, #2]
 8002abe:	220a      	movs	r2, #10
 8002ac0:	0031      	movs	r1, r6
 8002ac2:	0a00      	lsrs	r0, r0, #8
 8002ac4:	f001 fa6a 	bl	8003f9c <itoa>
		TM_SSD1306_GotoXY(40,30);
 8002ac8:	211e      	movs	r1, #30
 8002aca:	2028      	movs	r0, #40	; 0x28
 8002acc:	f000 fd1a 	bl	8003504 <TM_SSD1306_GotoXY>
		TM_SSD1306_Puts(cWorkingStr,&TM_Font_16x26,SSD1306_COLOR_WHITE);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4946      	ldr	r1, [pc, #280]	; (8002bec <update_lcd+0x3c0>)
 8002ad4:	0030      	movs	r0, r6
 8002ad6:	f000 fd93 	bl	8003600 <TM_SSD1306_Puts>
		TM_SSD1306_GotoXY(0,52);
 8002ada:	2134      	movs	r1, #52	; 0x34
 8002adc:	2000      	movs	r0, #0
 8002ade:	f000 fd11 	bl	8003504 <TM_SSD1306_GotoXY>
		itoa(sCurrentHeader.nRecordnum,cWorkingStr,10);
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <update_lcd+0x3c4>)
 8002ae4:	220a      	movs	r2, #10
 8002ae6:	7918      	ldrb	r0, [r3, #4]
 8002ae8:	0031      	movs	r1, r6
 8002aea:	b2c0      	uxtb	r0, r0
 8002aec:	f001 fa56 	bl	8003f9c <itoa>
		strcat(cWorkingStr,"/200");
 8002af0:	0030      	movs	r0, r6
 8002af2:	f7fd fb09 	bl	8000108 <strlen>
 8002af6:	2205      	movs	r2, #5
 8002af8:	493e      	ldr	r1, [pc, #248]	; (8002bf4 <update_lcd+0x3c8>)
 8002afa:	1980      	adds	r0, r0, r6
 8002afc:	f001 fa52 	bl	8003fa4 <memcpy>
		TM_SSD1306_Puts(cWorkingStr,&TM_Font_7x10,SSD1306_COLOR_WHITE);
 8002b00:	2201      	movs	r2, #1
 8002b02:	0029      	movs	r1, r5
 8002b04:	0030      	movs	r0, r6
 8002b06:	f000 fd7b 	bl	8003600 <TM_SSD1306_Puts>
		if(sSysHandler.nBtnPressed == BTN_PRESS_LONG)
 8002b0a:	68a3      	ldr	r3, [r4, #8]
 8002b0c:	071b      	lsls	r3, r3, #28
 8002b0e:	0f9b      	lsrs	r3, r3, #30
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d100      	bne.n	8002b16 <update_lcd+0x2ea>
 8002b14:	e0db      	b.n	8002cce <update_lcd+0x4a2>
		else if(sSysHandler.nBtnPressed == BTN_PRESS_SHORT)
 8002b16:	68a3      	ldr	r3, [r4, #8]
 8002b18:	071b      	lsls	r3, r3, #28
 8002b1a:	0f9b      	lsrs	r3, r3, #30
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d000      	beq.n	8002b22 <update_lcd+0x2f6>
 8002b20:	e70e      	b.n	8002940 <update_lcd+0x114>
			if(sSysHandler.bLcdoff)
 8002b22:	68a3      	ldr	r3, [r4, #8]
 8002b24:	06db      	lsls	r3, r3, #27
 8002b26:	d400      	bmi.n	8002b2a <update_lcd+0x2fe>
 8002b28:	e0db      	b.n	8002ce2 <update_lcd+0x4b6>
				SSD1306_WRITECOMMAND(0xAF);
 8002b2a:	22af      	movs	r2, #175	; 0xaf
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2078      	movs	r0, #120	; 0x78
 8002b30:	f001 f9e8 	bl	8003f04 <TM_I2C_Write>
				sSysHandler.bLcdoff =0;
 8002b34:	2210      	movs	r2, #16
 8002b36:	7a23      	ldrb	r3, [r4, #8]
 8002b38:	4393      	bics	r3, r2
 8002b3a:	7223      	strb	r3, [r4, #8]
 8002b3c:	e6fc      	b.n	8002938 <update_lcd+0x10c>
		TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 fcaa 	bl	8003498 <TM_SSD1306_Fill>
		sSysHandler.bUsbconnected = 1;
 8002b44:	2202      	movs	r2, #2
 8002b46:	7a23      	ldrb	r3, [r4, #8]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	7223      	strb	r3, [r4, #8]
		sSysHandler.eMainstate = usb_state;
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	7023      	strb	r3, [r4, #0]
		break;
 8002b50:	e6f6      	b.n	8002940 <update_lcd+0x114>
		TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b52:	2000      	movs	r0, #0
 8002b54:	f000 fca0 	bl	8003498 <TM_SSD1306_Fill>
		sSysHandler.bUsbconnected = 0;
 8002b58:	2202      	movs	r2, #2
 8002b5a:	7a23      	ldrb	r3, [r4, #8]
 8002b5c:	4393      	bics	r3, r2
 8002b5e:	7223      	strb	r3, [r4, #8]
		sSysHandler.eMainstate = main_screen_state;
 8002b60:	2301      	movs	r3, #1
 8002b62:	7023      	strb	r3, [r4, #0]
		break;
 8002b64:	e6ec      	b.n	8002940 <update_lcd+0x114>
		TM_SSD1306_GotoXY(0,22);
 8002b66:	2116      	movs	r1, #22
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f000 fccb 	bl	8003504 <TM_SSD1306_GotoXY>
		TM_SSD1306_Puts("USB Connected.",&TM_Font_7x10,SSD1306_COLOR_WHITE);
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <update_lcd+0x390>)
 8002b72:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <update_lcd+0x3cc>)
 8002b74:	f000 fd44 	bl	8003600 <TM_SSD1306_Puts>
 8002b78:	e6e2      	b.n	8002940 <update_lcd+0x114>
					TM_SSD1306_Puts("Led off",&TM_Font_7x10,bColor);
 8002b7a:	4820      	ldr	r0, [pc, #128]	; (8002bfc <update_lcd+0x3d0>)
 8002b7c:	f000 fd40 	bl	8003600 <TM_SSD1306_Puts>
 8002b80:	e733      	b.n	80029ea <update_lcd+0x1be>
					TM_SSD1306_DrawFilledRectangle(0,12,128,10,SSD1306_COLOR_BLACK);
 8002b82:	2300      	movs	r3, #0
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	210c      	movs	r1, #12
 8002b8a:	330a      	adds	r3, #10
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f000 fe19 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=1;
 8002b92:	2601      	movs	r6, #1
 8002b94:	e6fe      	b.n	8002994 <update_lcd+0x168>
			TM_SSD1306_DrawFilledRectangle(0,12,128,10,SSD1306_COLOR_BLACK);
 8002b96:	2300      	movs	r3, #0
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	210c      	movs	r1, #12
 8002b9e:	330a      	adds	r3, #10
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f000 fe0f 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=1;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	e66f      	b.n	800288a <update_lcd+0x5e>
			TM_SSD1306_Puts("Stop Recording",&TM_Font_7x10,bColor);
 8002baa:	4815      	ldr	r0, [pc, #84]	; (8002c00 <update_lcd+0x3d4>)
 8002bac:	f000 fd28 	bl	8003600 <TM_SSD1306_Puts>
 8002bb0:	e677      	b.n	80028a2 <update_lcd+0x76>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	200009e0 	.word	0x200009e0
 8002bb8:	080040bc 	.word	0x080040bc
 8002bbc:	20000144 	.word	0x20000144
 8002bc0:	08004110 	.word	0x08004110
 8002bc4:	0800413c 	.word	0x0800413c
 8002bc8:	0800414c 	.word	0x0800414c
 8002bcc:	0800415c 	.word	0x0800415c
 8002bd0:	08004164 	.word	0x08004164
 8002bd4:	08004174 	.word	0x08004174
 8002bd8:	080040f8 	.word	0x080040f8
 8002bdc:	20000a2c 	.word	0x20000a2c
 8002be0:	08004184 	.word	0x08004184
 8002be4:	08004194 	.word	0x08004194
 8002be8:	08004100 	.word	0x08004100
 8002bec:	2000013c 	.word	0x2000013c
 8002bf0:	200001b0 	.word	0x200001b0
 8002bf4:	08004108 	.word	0x08004108
 8002bf8:	080041b0 	.word	0x080041b0
 8002bfc:	0800418c 	.word	0x0800418c
 8002c00:	0800412c 	.word	0x0800412c
			TM_SSD1306_Puts("Recordings Full",&TM_Font_7x10,bColor);
 8002c04:	0029      	movs	r1, r5
 8002c06:	485c      	ldr	r0, [pc, #368]	; (8002d78 <update_lcd+0x54c>)
 8002c08:	f000 fcfa 	bl	8003600 <TM_SSD1306_Puts>
 8002c0c:	e649      	b.n	80028a2 <update_lcd+0x76>
			TM_SSD1306_DrawFilledCircle(90,5,4,SSD1306_COLOR_WHITE);
 8002c0e:	2301      	movs	r3, #1
 8002c10:	2204      	movs	r2, #4
 8002c12:	2105      	movs	r1, #5
 8002c14:	205a      	movs	r0, #90	; 0x5a
 8002c16:	f000 fe0b 	bl	8003830 <TM_SSD1306_DrawFilledCircle>
 8002c1a:	e74e      	b.n	8002aba <update_lcd+0x28e>
				switch(sSysHandler.nCurrentmenuitem)
 8002c1c:	68a3      	ldr	r3, [r4, #8]
 8002c1e:	065b      	lsls	r3, r3, #25
 8002c20:	0f9b      	lsrs	r3, r3, #30
 8002c22:	d06d      	beq.n	8002d00 <update_lcd+0x4d4>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d14c      	bne.n	8002cc2 <update_lcd+0x496>
					sSysHandler.eMainstate = record_setup_state;
 8002c28:	2306      	movs	r3, #6
							sSysHandler.eMainstate = flash_earse_state;
 8002c2a:	7023      	strb	r3, [r4, #0]
 8002c2c:	e71d      	b.n	8002a6a <update_lcd+0x23e>
						switch(sSysHandler.nCurrentmenuitem)
 8002c2e:	68a3      	ldr	r3, [r4, #8]
 8002c30:	065b      	lsls	r3, r3, #25
 8002c32:	0f9b      	lsrs	r3, r3, #30
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	2a01      	cmp	r2, #1
 8002c38:	d100      	bne.n	8002c3c <update_lcd+0x410>
 8002c3a:	e080      	b.n	8002d3e <update_lcd+0x512>
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d076      	beq.n	8002d2e <update_lcd+0x502>
 8002c40:	2a02      	cmp	r2, #2
 8002c42:	d13e      	bne.n	8002cc2 <update_lcd+0x496>
							TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f000 fc27 	bl	8003498 <TM_SSD1306_Fill>
							TM_SSD1306_GotoXY(0,30);
 8002c4a:	211e      	movs	r1, #30
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f000 fc59 	bl	8003504 <TM_SSD1306_GotoXY>
							TM_SSD1306_Puts("Please Wait...",&TM_Font_7x10,SSD1306_COLOR_WHITE);
 8002c52:	2201      	movs	r2, #1
 8002c54:	0029      	movs	r1, r5
 8002c56:	4849      	ldr	r0, [pc, #292]	; (8002d7c <update_lcd+0x550>)
 8002c58:	f000 fcd2 	bl	8003600 <TM_SSD1306_Puts>
							sSysHandler.eMainstate = flash_earse_state;
 8002c5c:	2308      	movs	r3, #8
 8002c5e:	7023      	strb	r3, [r4, #0]
 8002c60:	e703      	b.n	8002a6a <update_lcd+0x23e>
					TM_SSD1306_DrawFilledRectangle(0,42,128,10,SSD1306_COLOR_WHITE);
 8002c62:	3b02      	subs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	3309      	adds	r3, #9
 8002c6a:	212a      	movs	r1, #42	; 0x2a
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f000 fda9 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=0;
 8002c72:	2200      	movs	r2, #0
 8002c74:	e6e3      	b.n	8002a3e <update_lcd+0x212>
					TM_SSD1306_DrawFilledRectangle(0,32,128,10,SSD1306_COLOR_WHITE);
 8002c76:	3b01      	subs	r3, #1
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2280      	movs	r2, #128	; 0x80
 8002c7c:	3309      	adds	r3, #9
 8002c7e:	2120      	movs	r1, #32
 8002c80:	2000      	movs	r0, #0
 8002c82:	f000 fd9f 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=0;
 8002c86:	2200      	movs	r2, #0
 8002c88:	e6c2      	b.n	8002a10 <update_lcd+0x1e4>
					TM_SSD1306_DrawFilledRectangle(0,22,128,10,SSD1306_COLOR_WHITE);
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2280      	movs	r2, #128	; 0x80
 8002c8e:	3309      	adds	r3, #9
 8002c90:	2116      	movs	r1, #22
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 fd96 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
					bColor=0;
 8002c98:	2200      	movs	r2, #0
 8002c9a:	e69e      	b.n	80029da <update_lcd+0x1ae>
			TM_SSD1306_DrawFilledRectangle(0,32,128,10,SSD1306_COLOR_WHITE);
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	3309      	adds	r3, #9
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f000 fd8c 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=0;
 8002cac:	2200      	movs	r2, #0
 8002cae:	e622      	b.n	80028f6 <update_lcd+0xca>
			TM_SSD1306_DrawFilledRectangle(0,22,128,10,SSD1306_COLOR_WHITE);
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	3309      	adds	r3, #9
 8002cb6:	2116      	movs	r1, #22
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f000 fd83 	bl	80037c4 <TM_SSD1306_DrawFilledRectangle>
			bColor=0;
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	e602      	b.n	80028c8 <update_lcd+0x9c>
							TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f000 fbe8 	bl	8003498 <TM_SSD1306_Fill>
							sSysHandler.eMainstate = main_screen_state;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	7023      	strb	r3, [r4, #0]
							break;
 8002ccc:	e634      	b.n	8002938 <update_lcd+0x10c>
			sSysHandler.eMainstate = config_state;
 8002cce:	3303      	adds	r3, #3
			TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002cd0:	2000      	movs	r0, #0
			sSysHandler.eMainstate = config_state;
 8002cd2:	7023      	strb	r3, [r4, #0]
			TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002cd4:	f000 fbe0 	bl	8003498 <TM_SSD1306_Fill>
			sSysHandler.nBtnPressed = BTN_PRESS_NONE;
 8002cd8:	220c      	movs	r2, #12
 8002cda:	7a23      	ldrb	r3, [r4, #8]
 8002cdc:	4393      	bics	r3, r2
 8002cde:	7223      	strb	r3, [r4, #8]
 8002ce0:	e62e      	b.n	8002940 <update_lcd+0x114>
				TM_SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	f000 fbd8 	bl	8003498 <TM_SSD1306_Fill>
				TM_SSD1306_UpdateScreen();
 8002ce8:	f000 fb74 	bl	80033d4 <TM_SSD1306_UpdateScreen>
				SSD1306_WRITECOMMAND(0xAE);
 8002cec:	22ae      	movs	r2, #174	; 0xae
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2078      	movs	r0, #120	; 0x78
 8002cf2:	f001 f907 	bl	8003f04 <TM_I2C_Write>
				sSysHandler.bLcdoff =1;
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	7a23      	ldrb	r3, [r4, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	7223      	strb	r3, [r4, #8]
 8002cfe:	e61b      	b.n	8002938 <update_lcd+0x10c>
					if(!sSysHandler.bRecordingFull)
 8002d00:	7923      	ldrb	r3, [r4, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d000      	beq.n	8002d08 <update_lcd+0x4dc>
 8002d06:	e617      	b.n	8002938 <update_lcd+0x10c>
						if(sSysHandler.bLog)
 8002d08:	68a5      	ldr	r5, [r4, #8]
 8002d0a:	07ed      	lsls	r5, r5, #31
 8002d0c:	0fed      	lsrs	r5, r5, #31
 8002d0e:	d023      	beq.n	8002d58 <update_lcd+0x52c>
							sSysHandler.bRecordingFull = flash_mgmt_init();
 8002d10:	f7ff fa3c 	bl	800218c <flash_mgmt_init>
 8002d14:	7120      	strb	r0, [r4, #4]
						sSysHandler.bLog ? sSysHandler.bLog--:sSysHandler.bLog++;
 8002d16:	2101      	movs	r1, #1
 8002d18:	68a3      	ldr	r3, [r4, #8]
 8002d1a:	68a3      	ldr	r3, [r4, #8]
 8002d1c:	7a22      	ldrb	r2, [r4, #8]
 8002d1e:	07db      	lsls	r3, r3, #31
 8002d20:	0fdb      	lsrs	r3, r3, #31
 8002d22:	3301      	adds	r3, #1
 8002d24:	400b      	ands	r3, r1
 8002d26:	438a      	bics	r2, r1
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	7223      	strb	r3, [r4, #8]
 8002d2c:	e604      	b.n	8002938 <update_lcd+0x10c>
							sSysHandler.nSecondsBetweenSamplesidx == (sizeof(nTimediffs)-1) ? sSysHandler.nSecondsBetweenSamplesidx=0:sSysHandler.nSecondsBetweenSamplesidx++;
 8002d2e:	7862      	ldrb	r2, [r4, #1]
 8002d30:	2a04      	cmp	r2, #4
 8002d32:	d002      	beq.n	8002d3a <update_lcd+0x50e>
 8002d34:	7863      	ldrb	r3, [r4, #1]
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	7063      	strb	r3, [r4, #1]
 8002d3c:	e5fc      	b.n	8002938 <update_lcd+0x10c>
							sSysHandler.bLedon ? sSysHandler.bLedon--:sSysHandler.bLedon++;
 8002d3e:	68a3      	ldr	r3, [r4, #8]
 8002d40:	68a3      	ldr	r3, [r4, #8]
 8002d42:	7a21      	ldrb	r1, [r4, #8]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	0fdb      	lsrs	r3, r3, #31
 8002d48:	3301      	adds	r3, #1
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	237f      	movs	r3, #127	; 0x7f
 8002d4e:	01d2      	lsls	r2, r2, #7
 8002d50:	400b      	ands	r3, r1
 8002d52:	431a      	orrs	r2, r3
 8002d54:	7222      	strb	r2, [r4, #8]
 8002d56:	e5ef      	b.n	8002938 <update_lcd+0x10c>
							flash_start_recording(sSysHandler.nSecondsBetweenSamplesidx);
 8002d58:	7860      	ldrb	r0, [r4, #1]
 8002d5a:	b2c0      	uxtb	r0, r0
 8002d5c:	f7ff fa66 	bl	800222c <flash_start_recording>
							_TIMER14_START();
 8002d60:	2101      	movs	r1, #1
							_TIMER14_SET_COMPARE(nTim8MhzValues[sSysHandler.nSecondsBetweenSamplesidx]);
 8002d62:	7863      	ldrb	r3, [r4, #1]
 8002d64:	4a06      	ldr	r2, [pc, #24]	; (8002d80 <update_lcd+0x554>)
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	5a9a      	ldrh	r2, [r3, r2]
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <update_lcd+0x558>)
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34
							_TIMER14_SET_COUNTER(0);
 8002d6e:	625d      	str	r5, [r3, #36]	; 0x24
							_TIMER14_START();
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e7ce      	b.n	8002d16 <update_lcd+0x4ea>
 8002d78:	0800411c 	.word	0x0800411c
 8002d7c:	080041a0 	.word	0x080041a0
 8002d80:	080040ec 	.word	0x080040ec
 8002d84:	40002000 	.word	0x40002000

08002d88 <logTemp>:




void logTemp()
{
 8002d88:	b510      	push	{r4, lr}
	//check if temp logging is enabled
	if(sSysHandler.bLog)
 8002d8a:	4c11      	ldr	r4, [pc, #68]	; (8002dd0 <logTemp+0x48>)
 8002d8c:	68a3      	ldr	r3, [r4, #8]
 8002d8e:	07db      	lsls	r3, r3, #31
 8002d90:	d515      	bpl.n	8002dbe <logTemp+0x36>
	{
		//check if required delta between samples has passed.
		if(bDoLog)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <logTemp+0x4c>)
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d011      	beq.n	8002dbe <logTemp+0x36>
		{
			bDoLog = 0;
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]

			if(sSysHandler.bLedon)
 8002d9e:	68a3      	ldr	r3, [r4, #8]
 8002da0:	061b      	lsls	r3, r3, #24
 8002da2:	d40d      	bmi.n	8002dc0 <logTemp+0x38>
			{
				pGP_LED->ODR |= GPIO_ODR_3;
			}
			//log current temperature;
			flash_save_sample(sSysHandler.nCurrentTemp);
 8002da4:	8860      	ldrh	r0, [r4, #2]
 8002da6:	b280      	uxth	r0, r0
 8002da8:	f7ff fa50 	bl	800224c <flash_save_sample>
			if(sSysHandler.bLedon)
 8002dac:	68a3      	ldr	r3, [r4, #8]
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	d505      	bpl.n	8002dbe <logTemp+0x36>
			{
				pGP_LED->ODR &= ~GPIO_ODR_3;
 8002db2:	2108      	movs	r1, #8
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <logTemp+0x50>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	6953      	ldr	r3, [r2, #20]
 8002dba:	438b      	bics	r3, r1
 8002dbc:	6153      	str	r3, [r2, #20]
			}
		}
	}
}
 8002dbe:	bd10      	pop	{r4, pc}
				pGP_LED->ODR |= GPIO_ODR_3;
 8002dc0:	2108      	movs	r1, #8
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <logTemp+0x50>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	6953      	ldr	r3, [r2, #20]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6153      	str	r3, [r2, #20]
 8002dcc:	e7ea      	b.n	8002da4 <logTemp+0x1c>
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	200009e0 	.word	0x200009e0
 8002dd4:	200002d1 	.word	0x200002d1
 8002dd8:	2000011c 	.word	0x2000011c

08002ddc <main>:
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dde:	46d6      	mov	lr, sl
 8002de0:	464f      	mov	r7, r9
 8002de2:	4646      	mov	r6, r8
 8002de4:	b5c0      	push	{r6, r7, lr}
  HAL_Init();
 8002de6:	f7fd fa6f 	bl	80002c8 <HAL_Init>
  SystemClock_Config();
 8002dea:	f000 f863 	bl	8002eb4 <SystemClock_Config>
  MX_GPIO_Init();
 8002dee:	f000 f96f 	bl	80030d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002df2:	f000 f89b 	bl	8002f2c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002df6:	f000 f8eb 	bl	8002fd0 <MX_SPI1_Init>
  TIM14_init();
 8002dfa:	f000 f945 	bl	8003088 <TIM14_init>
  MX_USB_DEVICE_Init();
 8002dfe:	f000 fe6b 	bl	8003ad8 <MX_USB_DEVICE_Init>
  TM_SSD1306_Init();
 8002e02:	f000 fb23 	bl	800344c <TM_SSD1306_Init>
  res = sst_flash_init();
 8002e06:	f7ff fb39 	bl	800247c <sst_flash_init>
 8002e0a:	4b23      	ldr	r3, [pc, #140]	; (8002e98 <main+0xbc>)
	  _TIMER14_START();
 8002e0c:	2601      	movs	r6, #1
  res = sst_flash_init();
 8002e0e:	7018      	strb	r0, [r3, #0]
  sSysHandler.bRecordingFull = flash_mgmt_init();
 8002e10:	f7ff f9bc 	bl	800218c <flash_mgmt_init>
 8002e14:	4c21      	ldr	r4, [pc, #132]	; (8002e9c <main+0xc0>)
	  _TIMER14_START();
 8002e16:	4d22      	ldr	r5, [pc, #136]	; (8002ea0 <main+0xc4>)
  sSysHandler.bRecordingFull = flash_mgmt_init();
 8002e18:	7120      	strb	r0, [r4, #4]
  sst_flash_write_enable();
 8002e1a:	f7ff fa65 	bl	80022e8 <sst_flash_write_enable>
  sst_flash_write_block_proc();
 8002e1e:	f7ff fb59 	bl	80024d4 <sst_flash_write_block_proc>
  init_icd();
 8002e22:	f000 fda7 	bl	8003974 <init_icd>
  sSysHandler.eMainstate = main_screen_state;
 8002e26:	2201      	movs	r2, #1
  sSysHandler.bLcdoff = 0;
 8002e28:	2110      	movs	r1, #16
  sSysHandler.eMainstate = main_screen_state;
 8002e2a:	7022      	strb	r2, [r4, #0]
  sSysHandler.bLcdoff = 0;
 8002e2c:	7a23      	ldrb	r3, [r4, #8]
 8002e2e:	4f1d      	ldr	r7, [pc, #116]	; (8002ea4 <main+0xc8>)
 8002e30:	438b      	bics	r3, r1
 8002e32:	7223      	strb	r3, [r4, #8]
  sSysHandler.bLog = 0;
 8002e34:	7a23      	ldrb	r3, [r4, #8]
 8002e36:	4393      	bics	r3, r2
 8002e38:	7223      	strb	r3, [r4, #8]
 8002e3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <main+0xcc>)
 8002e3c:	469a      	mov	sl, r3
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <main+0xd0>)
 8002e40:	4699      	mov	r9, r3
		  RCC->CFGR |= RCC_CFGR_HPRE_3|RCC_CFGR_HPRE_0;
 8002e42:	4b1b      	ldr	r3, [pc, #108]	; (8002eb0 <main+0xd4>)
 8002e44:	4698      	mov	r8, r3
	  sSysHandler.nCurrentTemp = lm75_get_temp_raw();
 8002e46:	f7ff fc63 	bl	8002710 <lm75_get_temp_raw>
 8002e4a:	8060      	strh	r0, [r4, #2]
	  logTemp();
 8002e4c:	f7ff ff9c 	bl	8002d88 <logTemp>
	  nCurrentseconds = HAL_GetTick();
 8002e50:	f7fd fa52 	bl	80002f8 <HAL_GetTick>
 8002e54:	6038      	str	r0, [r7, #0]
	  _TIMER14_START();
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	4333      	orrs	r3, r6
 8002e5a:	602b      	str	r3, [r5, #0]
		  ReportToPC();
 8002e5c:	f7ff fcdc 	bl	8002818 <ReportToPC>
	  if(sSysHandler.bLcdoff && sSysHandler.bLog)
 8002e60:	68a3      	ldr	r3, [r4, #8]
 8002e62:	06db      	lsls	r3, r3, #27
 8002e64:	d50f      	bpl.n	8002e86 <main+0xaa>
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	07db      	lsls	r3, r3, #31
 8002e6a:	d50c      	bpl.n	8002e86 <main+0xaa>
		  RCC->CFGR |= RCC_CFGR_HPRE_3|RCC_CFGR_HPRE_0;
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	2290      	movs	r2, #144	; 0x90
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	4642      	mov	r2, r8
 8002e76:	6053      	str	r3, [r2, #4]
		  _TIMER14_SET_COUNTER(nTim1MhzValues[sSysHandler.nSecondsBetweenSamplesidx]);
 8002e78:	4652      	mov	r2, sl
 8002e7a:	7863      	ldrb	r3, [r4, #1]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	5ad3      	ldrh	r3, [r2, r3]
 8002e80:	626b      	str	r3, [r5, #36]	; 0x24
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002e82:	bf30      	wfi
 8002e84:	e7df      	b.n	8002e46 <main+0x6a>
		  _TIMER14_SET_COUNTER(nTim8MhzValues[sSysHandler.nSecondsBetweenSamplesidx]);
 8002e86:	464a      	mov	r2, r9
 8002e88:	7863      	ldrb	r3, [r4, #1]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	5ad3      	ldrh	r3, [r2, r3]
 8002e8e:	626b      	str	r3, [r5, #36]	; 0x24
		  update_lcd(); //todo: stop lcd communication while usb is connected.
 8002e90:	f7ff fccc 	bl	800282c <update_lcd>
 8002e94:	e7d7      	b.n	8002e46 <main+0x6a>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	20000a34 	.word	0x20000a34
 8002e9c:	200009e0 	.word	0x200009e0
 8002ea0:	40002000 	.word	0x40002000
 8002ea4:	20000a20 	.word	0x20000a20
 8002ea8:	080040e0 	.word	0x080040e0
 8002eac:	080040ec 	.word	0x080040ec
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <SystemClock_Config>:
    /**Initializes the CPU, AHB and APB busses clocks
    */


  //step one: turn on used clocks.
  RCC->CR |= RCC_CR_HSION_Msk;
 8002eb4:	2201      	movs	r2, #1
{
 8002eb6:	b570      	push	{r4, r5, r6, lr}
  RCC->CR2 |= RCC_CR2_HSI48ON_Msk|RCC_CR2_HSI14ON_Msk;
  RCC->CSR |= RCC_CSR_LSION_Msk;

  //step two: calibrate all clocks
  RCC->CR &= ~RCC_CR_HSITRIM_Msk;
 8002eb8:	25f8      	movs	r5, #248	; 0xf8
  RCC->CR |= 16<<RCC_CR_HSITRIM_Pos;
 8002eba:	2480      	movs	r4, #128	; 0x80
  RCC->CR |= RCC_CR_HSION_Msk;
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <SystemClock_Config+0x70>)
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	6019      	str	r1, [r3, #0]
  RCC->CR2 |= RCC_CR2_HSI48ON_Msk|RCC_CR2_HSI14ON_Msk;
 8002ec4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ec6:	4918      	ldr	r1, [pc, #96]	; (8002f28 <SystemClock_Config+0x74>)
 8002ec8:	4301      	orrs	r1, r0
 8002eca:	6359      	str	r1, [r3, #52]	; 0x34
  RCC->CSR |= RCC_CSR_LSION_Msk;
 8002ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	6259      	str	r1, [r3, #36]	; 0x24
  RCC->CR &= ~RCC_CR_HSITRIM_Msk;
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	43a9      	bics	r1, r5
 8002ed6:	6019      	str	r1, [r3, #0]
  RCC->CR |= 16<<RCC_CR_HSITRIM_Pos;
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	4320      	orrs	r0, r4
 8002edc:	6018      	str	r0, [r3, #0]
  RCC->CR2 &= ~RCC_CR2_HSI14TRIM_Msk;
 8002ede:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002ee0:	43a8      	bics	r0, r5
 8002ee2:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->CR2|= 16<<RCC_CR2_HSI14TRIM_Pos;
 8002ee4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ee6:	4321      	orrs	r1, r4
 8002ee8:	6359      	str	r1, [r3, #52]	; 0x34

  //step three: setup pll values
  RCC->CFGR &= ~RCC_CFGR_SWS_Msk|~RCC_CFGR_PLLMUL_Msk;
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	6059      	str	r1, [r3, #4]
  RCC->CFGR |=  RCC_CFGR_SWS_HSI|RCC_PLL_MUL4;
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	6858      	ldr	r0, [r3, #4]
 8002ef2:	0309      	lsls	r1, r1, #12
 8002ef4:	4301      	orrs	r1, r0
 8002ef6:	6059      	str	r1, [r3, #4]
  RCC->CFGR2 = RCC_PREDIV_DIV2;
 8002ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  //while(!((RCC->CR)&RCC_CR_PLLRDY_Msk));

  //at this point all basic setup was complete, now to setup peripheral clocks.

  //set the system clk to the pll output.
  RCC->CFGR |= RCC_CFGR_SW_HSI;
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	605a      	str	r2, [r3, #4]


    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002efe:	f7fe fc15 	bl	800172c <HAL_RCC_GetHCLKFreq>
 8002f02:	21fa      	movs	r1, #250	; 0xfa
 8002f04:	0089      	lsls	r1, r1, #2
 8002f06:	f7fd f907 	bl	8000118 <__udivsi3>
 8002f0a:	f7fd fa47 	bl	800039c <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002f0e:	2004      	movs	r0, #4
 8002f10:	f7fd fa6c 	bl	80003ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002f14:	2001      	movs	r0, #1
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4240      	negs	r0, r0
 8002f1c:	f7fd fa00 	bl	8000320 <HAL_NVIC_SetPriority>
}
 8002f20:	bd70      	pop	{r4, r5, r6, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	00010001 	.word	0x00010001

08002f2c <MX_I2C1_Init>:
}

/* I2C1 init function */
 void MX_I2C1_Init(void)
{
	__I2C1_CLK_ENABLE();
 8002f2c:	2280      	movs	r2, #128	; 0x80
 8002f2e:	4b23      	ldr	r3, [pc, #140]	; (8002fbc <MX_I2C1_Init+0x90>)
{
 8002f30:	b530      	push	{r4, r5, lr}
	__I2C1_CLK_ENABLE();
 8002f32:	69d9      	ldr	r1, [r3, #28]
 8002f34:	0392      	lsls	r2, r2, #14
 8002f36:	4311      	orrs	r1, r2
 8002f38:	61d9      	str	r1, [r3, #28]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
{
 8002f3c:	b083      	sub	sp, #12
	__I2C1_CLK_ENABLE();
 8002f3e:	4011      	ands	r1, r2
 8002f40:	9101      	str	r1, [sp, #4]
 8002f42:	9901      	ldr	r1, [sp, #4]

	__I2C1_FORCE_RESET();
 8002f44:	6919      	ldr	r1, [r3, #16]
	__I2C1_RELEASE_RESET();

	pI2c->CR1 = 0;//disable the peripheral before configuring.

	//set the relevant pins to i2c mode.
	pGP_I2C->AFR9 = GPIO_AF4_I2C1;
 8002f46:	250f      	movs	r5, #15
	__I2C1_FORCE_RESET();
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	611a      	str	r2, [r3, #16]
	__I2C1_RELEASE_RESET();
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	491c      	ldr	r1, [pc, #112]	; (8002fc0 <MX_I2C1_Init+0x94>)
	pGP_I2C->AFR9 = GPIO_AF4_I2C1;
 8002f50:	2040      	movs	r0, #64	; 0x40
	__I2C1_RELEASE_RESET();
 8002f52:	400a      	ands	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
	pI2c->CR1 = 0;//disable the peripheral before configuring.
 8002f56:	2200      	movs	r2, #0
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <MX_I2C1_Init+0x98>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	601a      	str	r2, [r3, #0]
	pGP_I2C->AFR9 = GPIO_AF4_I2C1;
 8002f5e:	4a1a      	ldr	r2, [pc, #104]	; (8002fc8 <MX_I2C1_Init+0x9c>)
 8002f60:	6811      	ldr	r1, [r2, #0]
 8002f62:	000c      	movs	r4, r1
 8002f64:	3420      	adds	r4, #32
 8002f66:	7922      	ldrb	r2, [r4, #4]
 8002f68:	402a      	ands	r2, r5
 8002f6a:	4302      	orrs	r2, r0
	pGP_I2C->AFR10 = GPIO_AF4_I2C1;
 8002f6c:	7960      	ldrb	r0, [r4, #5]
	pGP_I2C->AFR9 = GPIO_AF4_I2C1;
 8002f6e:	7122      	strb	r2, [r4, #4]
	pGP_I2C->AFR10 = GPIO_AF4_I2C1;
 8002f70:	43a8      	bics	r0, r5
 8002f72:	2504      	movs	r5, #4
 8002f74:	4328      	orrs	r0, r5
 8002f76:	7160      	strb	r0, [r4, #5]
	pGP_I2C->MODER9 = 0b10;
 8002f78:	200c      	movs	r0, #12
 8002f7a:	788a      	ldrb	r2, [r1, #2]
 8002f7c:	4382      	bics	r2, r0
 8002f7e:	2008      	movs	r0, #8
 8002f80:	4302      	orrs	r2, r0
	pGP_I2C->MODER10 = 0b10;
 8002f82:	20cf      	movs	r0, #207	; 0xcf
 8002f84:	4002      	ands	r2, r0
 8002f86:	2020      	movs	r0, #32
 8002f88:	4302      	orrs	r2, r0
	pGP_I2C->OT9 = 1;
 8002f8a:	2002      	movs	r0, #2
	pGP_I2C->MODER10 = 0b10;
 8002f8c:	708a      	strb	r2, [r1, #2]
	pGP_I2C->OT9 = 1;
 8002f8e:	794a      	ldrb	r2, [r1, #5]
 8002f90:	4302      	orrs	r2, r0
	pGP_I2C->OT10 = 1;
 8002f92:	432a      	orrs	r2, r5
 8002f94:	714a      	strb	r2, [r1, #5]


	//set the timing for 400khz clk.

	//todo: timing seems to be wrong, clk pulses look bad.
	pI2c->TIMINGR |= 11<<I2C_TIMINGR_SCLL_Pos;
 8002f96:	210b      	movs	r1, #11
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	611a      	str	r2, [r3, #16]
	pI2c->TIMINGR |= 2 <<I2C_TIMINGR_SCLH_Pos;
 8002f9e:	2280      	movs	r2, #128	; 0x80
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	611a      	str	r2, [r3, #16]

	pI2c->CR2 &= ~I2C_CR2_ADD10_Msk;
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <MX_I2C1_Init+0xa0>)
 8002fac:	400a      	ands	r2, r1

	pI2c->CR1 |= I2C_PECR_PEC_Msk;
 8002fae:	21ff      	movs	r1, #255	; 0xff
	pI2c->CR2 &= ~I2C_CR2_ADD10_Msk;
 8002fb0:	605a      	str	r2, [r3, #4]
	pI2c->CR1 |= I2C_PECR_PEC_Msk;
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
}
 8002fb8:	b003      	add	sp, #12
 8002fba:	bd30      	pop	{r4, r5, pc}
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	ffdfffff 	.word	0xffdfffff
 8002fc4:	20000110 	.word	0x20000110
 8002fc8:	20000118 	.word	0x20000118
 8002fcc:	fffff7ff 	.word	0xfffff7ff

08002fd0 <MX_SPI1_Init>:


/* SPI1 init function */
 void MX_SPI1_Init(void)
{
	 __SPI1_CLK_ENABLE();
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	4b29      	ldr	r3, [pc, #164]	; (8003078 <MX_SPI1_Init+0xa8>)
{
 8002fd4:	b570      	push	{r4, r5, r6, lr}
	 __SPI1_CLK_ENABLE();
 8002fd6:	6999      	ldr	r1, [r3, #24]
 8002fd8:	0152      	lsls	r2, r2, #5
 8002fda:	4311      	orrs	r1, r2
 8002fdc:	6199      	str	r1, [r3, #24]
 8002fde:	6999      	ldr	r1, [r3, #24]
{
 8002fe0:	b082      	sub	sp, #8
	 __SPI1_CLK_ENABLE();
 8002fe2:	4011      	ands	r1, r2
 8002fe4:	9101      	str	r1, [sp, #4]
 8002fe6:	9901      	ldr	r1, [sp, #4]


	 __SPI1_FORCE_RESET();
 8002fe8:	68d9      	ldr	r1, [r3, #12]
	 __SPI1_RELEASE_RESET();

	 //configure the spi ios

	 //set afr to spi
	 pGP_SPI-> AFR3 = GPIO_AF0_SPI1;
 8002fea:	240f      	movs	r4, #15
	 __SPI1_FORCE_RESET();
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]
	 __SPI1_RELEASE_RESET();
 8002ff0:	68da      	ldr	r2, [r3, #12]
 8002ff2:	4922      	ldr	r1, [pc, #136]	; (800307c <MX_SPI1_Init+0xac>)
	 pGP_SPI->OT4 = 0;
	 pGP_SPI->OT5 = 0;

	 //set pins to high speed
	 pGP_SPI->OSPEEDR3 = GPIO_SPEED_FREQ_HIGH;
	 pGP_SPI->OSPEEDR4 = GPIO_SPEED_FREQ_HIGH;
 8002ff4:	2503      	movs	r5, #3
	 __SPI1_RELEASE_RESET();
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	60da      	str	r2, [r3, #12]
	 pGP_SPI-> AFR3 = GPIO_AF0_SPI1;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <MX_SPI1_Init+0xb0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	001a      	movs	r2, r3
 8003000:	3220      	adds	r2, #32
 8003002:	7851      	ldrb	r1, [r2, #1]
 8003004:	4021      	ands	r1, r4
 8003006:	7051      	strb	r1, [r2, #1]
	 pGP_SPI->AFR5 = GPIO_AF0_SPI1;
 8003008:	2100      	movs	r1, #0
 800300a:	7091      	strb	r1, [r2, #2]
	 pGP_SPI->MODER3 = 0b10;
 800300c:	2280      	movs	r2, #128	; 0x80
 800300e:	7818      	ldrb	r0, [r3, #0]
 8003010:	313f      	adds	r1, #63	; 0x3f
 8003012:	4008      	ands	r0, r1
 8003014:	4252      	negs	r2, r2
 8003016:	4302      	orrs	r2, r0
	 pGP_SPI->MODER4=	 0b10;
 8003018:	2003      	movs	r0, #3
	 pGP_SPI->MODER3 = 0b10;
 800301a:	701a      	strb	r2, [r3, #0]
	 pGP_SPI->MODER4=	 0b10;
 800301c:	785a      	ldrb	r2, [r3, #1]
 800301e:	4382      	bics	r2, r0
 8003020:	2002      	movs	r0, #2
 8003022:	4302      	orrs	r2, r0
	 pGP_SPI->MODER5 = 0b10;
 8003024:	20f3      	movs	r0, #243	; 0xf3
 8003026:	4002      	ands	r2, r0
 8003028:	2008      	movs	r0, #8
 800302a:	4302      	orrs	r2, r0
	 pGP_SPI->OT5 = 0;
 800302c:	20c7      	movs	r0, #199	; 0xc7
	 pGP_SPI->MODER5 = 0b10;
 800302e:	705a      	strb	r2, [r3, #1]
	 pGP_SPI->OT3 = 0;
 8003030:	791a      	ldrb	r2, [r3, #4]
	 pGP_SPI->OT5 = 0;
 8003032:	4002      	ands	r2, r0
 8003034:	711a      	strb	r2, [r3, #4]
	 pGP_SPI->OSPEEDR3 = GPIO_SPEED_FREQ_HIGH;
 8003036:	3808      	subs	r0, #8
 8003038:	7a1a      	ldrb	r2, [r3, #8]
 800303a:	38ff      	subs	r0, #255	; 0xff
 800303c:	4302      	orrs	r2, r0
 800303e:	721a      	strb	r2, [r3, #8]
	 pGP_SPI->OSPEEDR4 = GPIO_SPEED_FREQ_HIGH;
 8003040:	7a5a      	ldrb	r2, [r3, #9]
 8003042:	432a      	orrs	r2, r5
	 pGP_SPI->OSPEEDR5 = GPIO_SPEED_FREQ_HIGH;
 8003044:	250c      	movs	r5, #12
 8003046:	432a      	orrs	r2, r5
 8003048:	725a      	strb	r2, [r3, #9]


	 pGP_I2C->AFR15 = 0;
 800304a:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <MX_SPI1_Init+0xb4>)
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	0015      	movs	r5, r2
 8003050:	3520      	adds	r5, #32
 8003052:	79ee      	ldrb	r6, [r5, #7]
 8003054:	4034      	ands	r4, r6
 8003056:	71ec      	strb	r4, [r5, #7]
	 pGP_I2C->MODER15 = 0b01;
 8003058:	78d4      	ldrb	r4, [r2, #3]
 800305a:	4021      	ands	r1, r4
 800305c:	2440      	movs	r4, #64	; 0x40
 800305e:	4321      	orrs	r1, r4
 8003060:	70d1      	strb	r1, [r2, #3]
	 pGP_I2C->OT15 = 0;
 8003062:	217f      	movs	r1, #127	; 0x7f
 8003064:	7954      	ldrb	r4, [r2, #5]
 8003066:	4021      	ands	r1, r4
 8003068:	7151      	strb	r1, [r2, #5]
	 pGP_SPI->OSPEEDR15 = GPIO_SPEED_FREQ_HIGH;
 800306a:	7ada      	ldrb	r2, [r3, #11]
 800306c:	4310      	orrs	r0, r2
 800306e:	72d8      	strb	r0, [r3, #11]

	 spi_init();
 8003070:	f000 f882 	bl	8003178 <spi_init>


}
 8003074:	b002      	add	sp, #8
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	ffffefff 	.word	0xffffefff
 8003080:	20000120 	.word	0x20000120
 8003084:	20000118 	.word	0x20000118

08003088 <TIM14_init>:


void TIM14_init()
{
	//enable clk for timer.
	__HAL_RCC_TIM14_CLK_ENABLE();
 8003088:	2080      	movs	r0, #128	; 0x80
 800308a:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <TIM14_init+0x40>)
 800308c:	0040      	lsls	r0, r0, #1
 800308e:	69d1      	ldr	r1, [r2, #28]
{
 8003090:	b500      	push	{lr}
	__HAL_RCC_TIM14_CLK_ENABLE();
 8003092:	4301      	orrs	r1, r0
 8003094:	61d1      	str	r1, [r2, #28]


	//enable interrupt for timer 14
	pTIM14->DIER |= 2;
 8003096:	2102      	movs	r1, #2
	__HAL_RCC_TIM14_CLK_ENABLE();
 8003098:	69d3      	ldr	r3, [r2, #28]
{
 800309a:	b083      	sub	sp, #12
	__HAL_RCC_TIM14_CLK_ENABLE();
 800309c:	4003      	ands	r3, r0
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	9b01      	ldr	r3, [sp, #4]
	pTIM14->DIER |= 2;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <TIM14_init+0x44>)

	//set prescaler to 64k
	pTIM14->PSC = 64000;


	HAL_NVIC_SetPriority(TIM14_IRQn,1,0);
 80030a4:	38ed      	subs	r0, #237	; 0xed
	pTIM14->DIER |= 2;
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
	pTIM14->PSC = 64000;
 80030ae:	22fa      	movs	r2, #250	; 0xfa
 80030b0:	0212      	lsls	r2, r2, #8
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_NVIC_SetPriority(TIM14_IRQn,1,0);
 80030b4:	3901      	subs	r1, #1
 80030b6:	2200      	movs	r2, #0
 80030b8:	f7fd f932 	bl	8000320 <HAL_NVIC_SetPriority>

	//enable interrupt in nvic.


	HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80030bc:	2013      	movs	r0, #19
 80030be:	f7fd f963 	bl	8000388 <HAL_NVIC_EnableIRQ>





}
 80030c2:	b003      	add	sp, #12
 80030c4:	bd00      	pop	{pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	40021000 	.word	0x40021000
 80030cc:	2000012c 	.word	0x2000012c

080030d0 <MX_GPIO_Init>:

 void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	2080      	movs	r0, #128	; 0x80
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <MX_GPIO_Init+0x90>)
 80030d4:	0280      	lsls	r0, r0, #10
 80030d6:	6959      	ldr	r1, [r3, #20]
{
 80030d8:	b500      	push	{lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	4301      	orrs	r1, r0
 80030dc:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e0:	695a      	ldr	r2, [r3, #20]
{
 80030e2:	b083      	sub	sp, #12
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e4:	4002      	ands	r2, r0
 80030e6:	9200      	str	r2, [sp, #0]
 80030e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ea:	695a      	ldr	r2, [r3, #20]
 80030ec:	02c9      	lsls	r1, r1, #11
 80030ee:	430a      	orrs	r2, r1
 80030f0:	615a      	str	r2, [r3, #20]

  /*Configure GPIO pin : GP_LED_Pin */
  pGP_LED->MODER3 = GPIO_MODE_OUTPUT_PP;
 80030f2:	223f      	movs	r2, #63	; 0x3f
 80030f4:	2040      	movs	r0, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	400b      	ands	r3, r1
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	9b01      	ldr	r3, [sp, #4]
  pGP_LED->MODER3 = GPIO_MODE_OUTPUT_PP;
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <MX_GPIO_Init+0x94>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	7819      	ldrb	r1, [r3, #0]
 8003104:	4011      	ands	r1, r2
 8003106:	4301      	orrs	r1, r0
 8003108:	7019      	strb	r1, [r3, #0]
  pGP_LED->PUPDR3 =GPIO_NOPULL;
 800310a:	7b19      	ldrb	r1, [r3, #12]
  //pEXTI->RTSR 	|= 1;
  pEXTI->FTSR 	|= 1;

  //turn on exti0 interrupt

  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800310c:	2005      	movs	r0, #5
  pGP_LED->PUPDR3 =GPIO_NOPULL;
 800310e:	4011      	ands	r1, r2
 8003110:	7319      	strb	r1, [r3, #12]
  pGP_LED->OSPEEDR3 = GPIO_SPEED_FREQ_LOW;
 8003112:	7a19      	ldrb	r1, [r3, #8]
 8003114:	400a      	ands	r2, r1
  pGP_BTN->MODER0 = GPIO_MODE_INPUT;
 8003116:	2103      	movs	r1, #3
  pGP_LED->OSPEEDR3 = GPIO_SPEED_FREQ_LOW;
 8003118:	721a      	strb	r2, [r3, #8]
  pGP_BTN->MODER0 = GPIO_MODE_INPUT;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_GPIO_Init+0x98>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	438a      	bics	r2, r1
 8003122:	701a      	strb	r2, [r3, #0]
  pGP_BTN->PUPDR0 =GPIO_NOPULL;
 8003124:	7b1a      	ldrb	r2, [r3, #12]
 8003126:	438a      	bics	r2, r1
 8003128:	731a      	strb	r2, [r3, #12]
  pGP_BTN->OSPEEDR0 = GPIO_SPEED_FREQ_LOW;
 800312a:	7a1a      	ldrb	r2, [r3, #8]
 800312c:	438a      	bics	r2, r1
 800312e:	721a      	strb	r2, [r3, #8]
  pSYSCFG->EXTICR[0] |= 1;
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_GPIO_Init+0x9c>)
 8003132:	3902      	subs	r1, #2
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	6893      	ldr	r3, [r2, #8]
 8003138:	430b      	orrs	r3, r1
 800313a:	6093      	str	r3, [r2, #8]
  pEXTI->IMR 	|= 1;
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <MX_GPIO_Init+0xa0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
  pEXTI->FTSR 	|= 1;
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800314c:	2100      	movs	r1, #0
 800314e:	2200      	movs	r2, #0
 8003150:	f7fd f8e6 	bl	8000320 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003154:	2005      	movs	r0, #5
 8003156:	f7fd f917 	bl	8000388 <HAL_NVIC_EnableIRQ>

  //unmask interrupt


}
 800315a:	b003      	add	sp, #12
 800315c:	bd00      	pop	{pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	40021000 	.word	0x40021000
 8003164:	2000011c 	.word	0x2000011c
 8003168:	20000114 	.word	0x20000114
 800316c:	20000128 	.word	0x20000128
 8003170:	20000124 	.word	0x20000124

08003174 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	e7fe      	b.n	8003174 <Error_Handler>
 8003176:	46c0      	nop			; (mov r8, r8)

08003178 <spi_init>:
	 * baud rate is pclk/8
	 * spi is master
	 * clk is 0 when idle
	 * clk will rise on the first data bit.
	 */
	pSPI->CR1 &= (~SPI_CR1_BIDIMODE)&(~SPI_CR1_BIDIOE)&(~SPI_CR1_CRCEN)&(~SPI_CR1_RXONLY)&(~SPI_CR1_SSM)&(~SPI_CR1_LSBFIRST)&(~SPI_CR1_CPOL)&(~SPI_CR1_CPHA);
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <spi_init+0x34>)
 800317a:	490d      	ldr	r1, [pc, #52]	; (80031b0 <spi_init+0x38>)
 800317c:	681b      	ldr	r3, [r3, #0]

	//enable the spi module.
	pSPI->CR1 |= (SPI_CR1_SPE);

	return 0;
}
 800317e:	2000      	movs	r0, #0
	pSPI->CR1 &= (~SPI_CR1_BIDIMODE)&(~SPI_CR1_BIDIOE)&(~SPI_CR1_CRCEN)&(~SPI_CR1_RXONLY)&(~SPI_CR1_SSM)&(~SPI_CR1_LSBFIRST)&(~SPI_CR1_CPOL)&(~SPI_CR1_CPHA);
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	400a      	ands	r2, r1
	pSPI->CR1 |= (SPI_CR1_MSTR)|(2<<SPI_CR1_BR_Pos);
 8003184:	2114      	movs	r1, #20
	pSPI->CR1 &= (~SPI_CR1_BIDIMODE)&(~SPI_CR1_BIDIOE)&(~SPI_CR1_CRCEN)&(~SPI_CR1_RXONLY)&(~SPI_CR1_SSM)&(~SPI_CR1_LSBFIRST)&(~SPI_CR1_CPOL)&(~SPI_CR1_CPHA);
 8003186:	601a      	str	r2, [r3, #0]
	pSPI->CR1 |= (SPI_CR1_MSTR)|(2<<SPI_CR1_BR_Pos);
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]
	pSPI->CR2 &= (~SPI_CR2_TXEIE)&(~SPI_CR2_RXNEIE)&(~SPI_CR2_ERRIE)&(~SPI_CR2_FRF)&(~SPI_CR2_TXDMAEN)&(~SPI_CR2_RXDMAEN);
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	31df      	adds	r1, #223	; 0xdf
 8003192:	438a      	bics	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
	pSPI->CR2 |= (SPI_CR2_NSSP)|(7<<SPI_CR2_DS_Pos);
 8003196:	22e1      	movs	r2, #225	; 0xe1
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	00d2      	lsls	r2, r2, #3
 800319c:	430a      	orrs	r2, r1
	pSPI->CR1 |= (SPI_CR1_SPE);
 800319e:	2140      	movs	r1, #64	; 0x40
	pSPI->CR2 |= (SPI_CR2_NSSP)|(7<<SPI_CR2_DS_Pos);
 80031a0:	605a      	str	r2, [r3, #4]
	pSPI->CR1 |= (SPI_CR1_SPE);
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
}
 80031a8:	4770      	bx	lr
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	20000134 	.word	0x20000134
 80031b0:	ffff197c 	.word	0xffff197c

080031b4 <spi_write_blocking>:

int spi_write_blocking(uint8_t* pData,uint16_t nSize)
{
	uint16_t i;
	pGP_NSS->BR15 = 1;
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <spi_write_blocking+0x40>)
{
 80031b6:	b530      	push	{r4, r5, lr}
	pGP_NSS->BR15 = 1;
 80031b8:	681d      	ldr	r5, [r3, #0]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	7eea      	ldrb	r2, [r5, #27]
 80031be:	425b      	negs	r3, r3
 80031c0:	4313      	orrs	r3, r2
 80031c2:	76eb      	strb	r3, [r5, #27]
	for(i=0;i<nSize;i++)
 80031c4:	2900      	cmp	r1, #0
 80031c6:	d00e      	beq.n	80031e6 <spi_write_blocking+0x32>
 80031c8:	3901      	subs	r1, #1
 80031ca:	b28c      	uxth	r4, r1
	{

		//send data to buffer
		   *((__IO uint8_t *)&pSPI->DR) = *(pData+i);
		 //block until data was sent.
		while(pSPI->SR & SPI_SR_BSY_Msk);
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <spi_write_blocking+0x44>)
 80031d0:	3401      	adds	r4, #1
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	1904      	adds	r4, r0, r4
		   *((__IO uint8_t *)&pSPI->DR) = *(pData+i);
 80031d6:	7803      	ldrb	r3, [r0, #0]
 80031d8:	7313      	strb	r3, [r2, #12]
		while(pSPI->SR & SPI_SR_BSY_Msk);
 80031da:	6893      	ldr	r3, [r2, #8]
 80031dc:	4219      	tst	r1, r3
 80031de:	d1fc      	bne.n	80031da <spi_write_blocking+0x26>
 80031e0:	3001      	adds	r0, #1
	for(i=0;i<nSize;i++)
 80031e2:	42a0      	cmp	r0, r4
 80031e4:	d1f7      	bne.n	80031d6 <spi_write_blocking+0x22>

	}
	pGP_NSS->BS15 = 1;
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	7e6a      	ldrb	r2, [r5, #25]
 80031ea:	425b      	negs	r3, r3
 80031ec:	4313      	orrs	r3, r2
 80031ee:	766b      	strb	r3, [r5, #25]
	return 0;
}
 80031f0:	2000      	movs	r0, #0
 80031f2:	bd30      	pop	{r4, r5, pc}
 80031f4:	20000130 	.word	0x20000130
 80031f8:	20000134 	.word	0x20000134

080031fc <spi_write_single>:
	 pGP_NSS->BS15 = 1;
	return 0;
}
int spi_write_single(uint8_t nData)
{
	pGP_NSS->BR15 = 1;
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <spi_write_single+0x2c>)
{
 80031fe:	b510      	push	{r4, lr}
	pGP_NSS->BR15 = 1;
 8003200:	681c      	ldr	r4, [r3, #0]
 8003202:	2380      	movs	r3, #128	; 0x80
	   *((__IO uint8_t *)&pSPI->DR) = nData;
	   while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8003204:	2180      	movs	r1, #128	; 0x80
	pGP_NSS->BR15 = 1;
 8003206:	7ee2      	ldrb	r2, [r4, #27]
 8003208:	425b      	negs	r3, r3
 800320a:	4313      	orrs	r3, r2
 800320c:	76e3      	strb	r3, [r4, #27]
	   *((__IO uint8_t *)&pSPI->DR) = nData;
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <spi_write_single+0x30>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	7310      	strb	r0, [r2, #12]
	   while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8003214:	6893      	ldr	r3, [r2, #8]
 8003216:	4219      	tst	r1, r3
 8003218:	d1fc      	bne.n	8003214 <spi_write_single+0x18>

	   pGP_NSS->BS15 = 1;
 800321a:	2380      	movs	r3, #128	; 0x80
 800321c:	7e62      	ldrb	r2, [r4, #25]
 800321e:	425b      	negs	r3, r3
 8003220:	4313      	orrs	r3, r2
	return 0;
}
 8003222:	2000      	movs	r0, #0
	   pGP_NSS->BS15 = 1;
 8003224:	7663      	strb	r3, [r4, #25]
}
 8003226:	bd10      	pop	{r4, pc}
 8003228:	20000130 	.word	0x20000130
 800322c:	20000134 	.word	0x20000134

08003230 <spi_write_read>:
	//pull data from buffer
	return  *((__IO uint8_t *)&pSPI->DR);
	pGP_NSS->BS15 = 1;
}
int spi_write_read(uint8_t* pTxdata,uint16_t nTx_size,uint8_t* pRxdata,uint16_t nRx_size)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	4647      	mov	r7, r8
 8003234:	46ce      	mov	lr, r9
 8003236:	b580      	push	{r7, lr}
 8003238:	4690      	mov	r8, r2
	uint16_t i=0;
	//lower the nss line.
	pGP_NSS->BR15 = 1;
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <spi_write_read+0xa4>)
 800323c:	4f26      	ldr	r7, [pc, #152]	; (80032d8 <spi_write_read+0xa8>)
 800323e:	4694      	mov	ip, r2
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	7ed4      	ldrb	r4, [r2, #27]
 8003244:	4691      	mov	r9, r2
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	4252      	negs	r2, r2
 800324a:	4322      	orrs	r2, r4
 800324c:	464c      	mov	r4, r9
 800324e:	76e2      	strb	r2, [r4, #27]
	//write the required data to the device.
	for(i=0;i<nTx_size;i++)
 8003250:	2900      	cmp	r1, #0
 8003252:	d03b      	beq.n	80032cc <spi_write_read+0x9c>
	{
		//send data to buffer
		   *((__IO uint8_t *)&pSPI->DR) = *(pTxdata+i);
		 //block until data was sent.
		while(pSPI->SR & SPI_SR_BSY_Msk);
 8003254:	2680      	movs	r6, #128	; 0x80
 8003256:	3901      	subs	r1, #1
 8003258:	b28a      	uxth	r2, r1
 800325a:	3201      	adds	r2, #1
 800325c:	683d      	ldr	r5, [r7, #0]
 800325e:	1882      	adds	r2, r0, r2
		   *((__IO uint8_t *)&pSPI->DR) = *(pTxdata+i);
 8003260:	7804      	ldrb	r4, [r0, #0]
 8003262:	732c      	strb	r4, [r5, #12]
		while(pSPI->SR & SPI_SR_BSY_Msk);
 8003264:	68ac      	ldr	r4, [r5, #8]
 8003266:	4226      	tst	r6, r4
 8003268:	d1fc      	bne.n	8003264 <spi_write_read+0x34>
 800326a:	3001      	adds	r0, #1
	for(i=0;i<nTx_size;i++)
 800326c:	4290      	cmp	r0, r2
 800326e:	d1f7      	bne.n	8003260 <spi_write_read+0x30>
//	}while((pSPI->SR & SPI_SR_FRLVL_Msk) != 0);

	do
	{
		*((__IO uint8_t *)&pSPI->DR);
	}while(i--);
 8003270:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <spi_write_read+0xac>)
 8003272:	e000      	b.n	8003276 <spi_write_read+0x46>
 8003274:	3901      	subs	r1, #1
 8003276:	b289      	uxth	r1, r1
		*((__IO uint8_t *)&pSPI->DR);
 8003278:	7b28      	ldrb	r0, [r5, #12]
	}while(i--);
 800327a:	4291      	cmp	r1, r2
 800327c:	d1fa      	bne.n	8003274 <spi_write_read+0x44>
//	}



	//read data from dev
	for(i=0;i<nRx_size;i++)
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <spi_write_read+0x84>
 8003282:	4642      	mov	r2, r8
	{
		//send dummy write to get clocks on the bus.
		 *((__IO uint8_t *)&pSPI->DR) = 0;
		 while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
		//ensure data is waiting in the buffer
		while((pSPI->SR&SPI_SR_FRLVL_Msk) == 0);
 8003284:	20c0      	movs	r0, #192	; 0xc0
		 *((__IO uint8_t *)&pSPI->DR) = 0;
 8003286:	2600      	movs	r6, #0
		 while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8003288:	2480      	movs	r4, #128	; 0x80
 800328a:	3b01      	subs	r3, #1
 800328c:	b29d      	uxth	r5, r3
 800328e:	3501      	adds	r5, #1
 8003290:	1955      	adds	r5, r2, r5
		while((pSPI->SR&SPI_SR_FRLVL_Msk) == 0);
 8003292:	00c0      	lsls	r0, r0, #3
		 *((__IO uint8_t *)&pSPI->DR) = 0;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	731e      	strb	r6, [r3, #12]
		 while(pSPI->SR & SPI_SR_BSY_Msk); //wait for the data to be sent.
 8003298:	6899      	ldr	r1, [r3, #8]
 800329a:	420c      	tst	r4, r1
 800329c:	d1fc      	bne.n	8003298 <spi_write_read+0x68>
		while((pSPI->SR&SPI_SR_FRLVL_Msk) == 0);
 800329e:	6899      	ldr	r1, [r3, #8]
 80032a0:	4201      	tst	r1, r0
 80032a2:	d0fc      	beq.n	800329e <spi_write_read+0x6e>
		//pull data from buffer
		*(pRxdata + i) = *((__IO uint8_t *)&pSPI->DR);
 80032a4:	7b1b      	ldrb	r3, [r3, #12]
 80032a6:	7013      	strb	r3, [r2, #0]
 80032a8:	3201      	adds	r2, #1
	for(i=0;i<nRx_size;i++)
 80032aa:	42aa      	cmp	r2, r5
 80032ac:	d1f2      	bne.n	8003294 <spi_write_read+0x64>
 80032ae:	4663      	mov	r3, ip
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4699      	mov	r9, r3
//	{
//		*(pRxdata) = *((__IO uint8_t *)&pSPI->DR);
//	}

	//raise the nss line.
	pGP_NSS->BS15 = 1;
 80032b4:	464b      	mov	r3, r9
 80032b6:	7e5a      	ldrb	r2, [r3, #25]
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	425b      	negs	r3, r3
 80032bc:	4313      	orrs	r3, r2
 80032be:	464a      	mov	r2, r9
	return 0;
}
 80032c0:	2000      	movs	r0, #0
	pGP_NSS->BS15 = 1;
 80032c2:	7653      	strb	r3, [r2, #25]
}
 80032c4:	bc0c      	pop	{r2, r3}
 80032c6:	4690      	mov	r8, r2
 80032c8:	4699      	mov	r9, r3
 80032ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*((__IO uint8_t *)&pSPI->DR);
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	7b12      	ldrb	r2, [r2, #12]
 80032d0:	e7d5      	b.n	800327e <spi_write_read+0x4e>
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	20000130 	.word	0x20000130
 80032d8:	20000134 	.word	0x20000134
 80032dc:	0000ffff 	.word	0x0000ffff

080032e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e0:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80032e2:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e4:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_MspInit+0x40>)
{
 80032e6:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e8:	6991      	ldr	r1, [r2, #24]
{
 80032ea:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ec:	4319      	orrs	r1, r3
 80032ee:	6191      	str	r1, [r2, #24]
 80032f0:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80032f2:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f4:	4013      	ands	r3, r2
 80032f6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80032f8:	2200      	movs	r2, #0
 80032fa:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80032fe:	f7fd f80f 	bl	8000320 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003302:	2002      	movs	r0, #2
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	4240      	negs	r0, r0
 800330a:	f7fd f809 	bl	8000320 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800330e:	2001      	movs	r0, #1
 8003310:	2200      	movs	r2, #0
 8003312:	2100      	movs	r1, #0
 8003314:	4240      	negs	r0, r0
 8003316:	f7fd f803 	bl	8000320 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331a:	b003      	add	sp, #12
 800331c:	bd00      	pop	{pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40021000 	.word	0x40021000

08003324 <NMI_Handler>:
 8003324:	4770      	bx	lr
 8003326:	46c0      	nop			; (mov r8, r8)

08003328 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003328:	e7fe      	b.n	8003328 <HardFault_Handler>
 800332a:	46c0      	nop			; (mov r8, r8)

0800332c <SVC_Handler>:
 800332c:	4770      	bx	lr
 800332e:	46c0      	nop			; (mov r8, r8)

08003330 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003330:	4770      	bx	lr
 8003332:	46c0      	nop			; (mov r8, r8)

08003334 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003334:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003336:	f7fc ffd7 	bl	80002e8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800333a:	f7fd f867 	bl	800040c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333e:	bd10      	pop	{r4, pc}

08003340 <USB_IRQHandler>:

/**
* @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
*/
void USB_IRQHandler(void)
{
 8003340:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003342:	4802      	ldr	r0, [pc, #8]	; (800334c <USB_IRQHandler+0xc>)
 8003344:	f7fd fdac 	bl	8000ea0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8003348:	bd10      	pop	{r4, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	20000cb0 	.word	0x20000cb0

08003350 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003350:	2101      	movs	r1, #1
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003354:	4811      	ldr	r0, [pc, #68]	; (800339c <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	4002      	ands	r2, r0
 8003360:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	480e      	ldr	r0, [pc, #56]	; (80033a0 <SystemInit+0x50>)
 8003366:	4002      	ands	r2, r0
 8003368:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	480d      	ldr	r0, [pc, #52]	; (80033a4 <SystemInit+0x54>)
 800336e:	4002      	ands	r2, r0
 8003370:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <SystemInit+0x58>)
 8003376:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003378:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800337a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4382      	bics	r2, r0
 8003380:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
 8003382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003384:	4809      	ldr	r0, [pc, #36]	; (80033ac <SystemInit+0x5c>)
 8003386:	4002      	ands	r2, r0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	438a      	bics	r2, r1
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]

}
 8003394:	4770      	bx	lr
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40021000 	.word	0x40021000
 800339c:	08ffb80c 	.word	0x08ffb80c
 80033a0:	fef6ffff 	.word	0xfef6ffff
 80033a4:	fffbffff 	.word	0xfffbffff
 80033a8:	ffc0ffff 	.word	0xffc0ffff
 80033ac:	fffffe2c 	.word	0xfffffe2c

080033b0 <Fonts_getfromflash>:
	2,
	TM_Font16x26
};

void Fonts_getfromflash(uint8_t nCh,uint8_t nSize,uint8_t* nCharbuf)
{
 80033b0:	b510      	push	{r4, lr}
	uint8_t nBytestojump;
	uint16_t nFontofst =0;

	//choose the jump size in flash.
	switch(nSize)
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d009      	beq.n	80033ca <Fonts_getfromflash+0x1a>
 80033b6:	24c0      	movs	r4, #192	; 0xc0
 80033b8:	2334      	movs	r3, #52	; 0x34
		break;
	case 1:
		nBytestojump = 36;
		nFontofst = FLASH_JUMP_MEDIUM;
	default:
		nBytestojump = 52;
 80033ba:	2134      	movs	r1, #52	; 0x34
	switch(nSize)
 80033bc:	01e4      	lsls	r4, r4, #7
		nFontofst = FLASH_JUMP_LARGE;
	}
	//get the data!
	sst_flash_read_cmd(nFontofst + (nCh-32)*nBytestojump,nBytestojump,nCharbuf);
 80033be:	3820      	subs	r0, #32
 80033c0:	4358      	muls	r0, r3
 80033c2:	1900      	adds	r0, r0, r4
 80033c4:	f7fe ff96 	bl	80022f4 <sst_flash_read_cmd>

}
 80033c8:	bd10      	pop	{r4, pc}
	switch(nSize)
 80033ca:	2480      	movs	r4, #128	; 0x80
 80033cc:	2314      	movs	r3, #20
 80033ce:	01a4      	lsls	r4, r4, #6
		nBytestojump = 20;
 80033d0:	3114      	adds	r1, #20
 80033d2:	e7f4      	b.n	80033be <Fonts_getfromflash+0xe>

080033d4 <TM_SSD1306_UpdateScreen>:
	
	/* Return OK */
	return 0;
}

void TM_SSD1306_UpdateScreen(void) {
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	4647      	mov	r7, r8
 80033d8:	46ce      	mov	lr, r9
 80033da:	b580      	push	{r7, lr}
	uint8_t m;
	uint8_t nTemp[]= {0x00,0xb0,0x00,0x00,0x00,0x10};
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <TM_SSD1306_UpdateScreen+0x70>)
void TM_SSD1306_UpdateScreen(void) {
 80033de:	b0a5      	sub	sp, #148	; 0x94
	uint8_t nTemp[]= {0x00,0xb0,0x00,0x00,0x00,0x10};
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	ae01      	add	r6, sp, #4
 80033e4:	9201      	str	r2, [sp, #4]
 80033e6:	889b      	ldrh	r3, [r3, #4]
 80033e8:	25b0      	movs	r5, #176	; 0xb0
 80033ea:	80b3      	strh	r3, [r6, #4]
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <TM_SSD1306_UpdateScreen+0x74>)
 80033ee:	af03      	add	r7, sp, #12
 80033f0:	4698      	mov	r8, r3
		for(i=0;i<(sizeof(nTemp)/2);i++)
		{
			i2c_write_blocking(nTemp+i,2,100,SSD1306_I2C_ADDR);
		}
		/* Write multi data */
		nScreen_buf[0]=0x40;
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	4699      	mov	r9, r3
		nTemp[1] = 0xb0+m;
 80033f6:	2400      	movs	r4, #0
 80033f8:	7075      	strb	r5, [r6, #1]
			i2c_write_blocking(nTemp+i,2,100,SSD1306_I2C_ADDR);
 80033fa:	1930      	adds	r0, r6, r4
 80033fc:	2378      	movs	r3, #120	; 0x78
 80033fe:	2264      	movs	r2, #100	; 0x64
 8003400:	2102      	movs	r1, #2
 8003402:	3401      	adds	r4, #1
 8003404:	f7ff f8b8 	bl	8002578 <i2c_write_blocking>
		for(i=0;i<(sizeof(nTemp)/2);i++)
 8003408:	2c03      	cmp	r4, #3
 800340a:	d1f6      	bne.n	80033fa <TM_SSD1306_UpdateScreen+0x26>
		nScreen_buf[0]=0x40;
 800340c:	464b      	mov	r3, r9
 800340e:	703b      	strb	r3, [r7, #0]
		memcpy(&(nScreen_buf[1]),&SSD1306_Buffer[SSD1306_WIDTH * m],SSD1306_WIDTH);
 8003410:	230d      	movs	r3, #13
 8003412:	446b      	add	r3, sp
 8003414:	4641      	mov	r1, r8
 8003416:	2280      	movs	r2, #128	; 0x80
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fdc3 	bl	8003fa4 <memcpy>

		i2c_write_blocking(nScreen_buf, SSD1306_WIDTH+1,10,SSD1306_I2C_ADDR);
 800341e:	2378      	movs	r3, #120	; 0x78
 8003420:	220a      	movs	r2, #10
 8003422:	2181      	movs	r1, #129	; 0x81
 8003424:	0038      	movs	r0, r7
 8003426:	f7ff f8a7 	bl	8002578 <i2c_write_blocking>
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	469c      	mov	ip, r3
 800342e:	3501      	adds	r5, #1
 8003430:	b2ed      	uxtb	r5, r5
 8003432:	44e0      	add	r8, ip
	for (m = 0; m < 8; m++) {
 8003434:	2db8      	cmp	r5, #184	; 0xb8
 8003436:	d1de      	bne.n	80033f6 <TM_SSD1306_UpdateScreen+0x22>


	}
}
 8003438:	b025      	add	sp, #148	; 0x94
 800343a:	bc0c      	pop	{r2, r3}
 800343c:	4690      	mov	r8, r2
 800343e:	4699      	mov	r9, r3
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	08004054 	.word	0x08004054
 8003448:	200002dc 	.word	0x200002dc

0800344c <TM_SSD1306_Init>:
uint8_t TM_SSD1306_Init(void) {
 800344c:	b570      	push	{r4, r5, r6, lr}
	HAL_Delay(100);
 800344e:	2064      	movs	r0, #100	; 0x64
 8003450:	f7fc ff58 	bl	8000304 <HAL_Delay>
 8003454:	4c0d      	ldr	r4, [pc, #52]	; (800348c <TM_SSD1306_Init+0x40>)
 8003456:	0025      	movs	r5, r4
 8003458:	353a      	adds	r5, #58	; 0x3a
	i2c_write_blocking((nSetup_bytes + i*2),2,100,SSD1306_I2C_ADDR);
 800345a:	0020      	movs	r0, r4
 800345c:	2378      	movs	r3, #120	; 0x78
 800345e:	2264      	movs	r2, #100	; 0x64
 8003460:	2102      	movs	r1, #2
 8003462:	3402      	adds	r4, #2
 8003464:	f7ff f888 	bl	8002578 <i2c_write_blocking>
for(i =0; i< (sizeof(nSetup_bytes)/2);i++)
 8003468:	42ac      	cmp	r4, r5
 800346a:	d1f6      	bne.n	800345a <TM_SSD1306_Init+0xe>
	}
}

void TM_SSD1306_Fill(SSD1306_COLOR_t color) {
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	2100      	movs	r1, #0
 8003470:	00d2      	lsls	r2, r2, #3
 8003472:	4807      	ldr	r0, [pc, #28]	; (8003490 <TM_SSD1306_Init+0x44>)
 8003474:	f000 fd9f 	bl	8003fb6 <memset>
	TM_SSD1306_UpdateScreen();
 8003478:	f7ff ffac 	bl	80033d4 <TM_SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800347c:	2200      	movs	r2, #0
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <TM_SSD1306_Init+0x48>)
}
 8003480:	2000      	movs	r0, #0
	SSD1306.CurrentX = 0;
 8003482:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003484:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8003486:	3201      	adds	r2, #1
 8003488:	715a      	strb	r2, [r3, #5]
}
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	080041c0 	.word	0x080041c0
 8003490:	200002dc 	.word	0x200002dc
 8003494:	200002d4 	.word	0x200002d4

08003498 <TM_SSD1306_Fill>:
void TM_SSD1306_Fill(SSD1306_COLOR_t color) {
 8003498:	b510      	push	{r4, lr}
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800349a:	2100      	movs	r1, #0
 800349c:	2800      	cmp	r0, #0
 800349e:	d000      	beq.n	80034a2 <TM_SSD1306_Fill+0xa>
 80034a0:	31ff      	adds	r1, #255	; 0xff
 80034a2:	2280      	movs	r2, #128	; 0x80
 80034a4:	4802      	ldr	r0, [pc, #8]	; (80034b0 <TM_SSD1306_Fill+0x18>)
 80034a6:	00d2      	lsls	r2, r2, #3
 80034a8:	f000 fd85 	bl	8003fb6 <memset>
}
 80034ac:	bd10      	pop	{r4, pc}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	200002dc 	.word	0x200002dc

080034b4 <TM_SSD1306_DrawPixel>:

void TM_SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80034b4:	b530      	push	{r4, r5, lr}
	if (
 80034b6:	287f      	cmp	r0, #127	; 0x7f
 80034b8:	d812      	bhi.n	80034e0 <TM_SSD1306_DrawPixel+0x2c>
		x >= SSD1306_WIDTH ||
 80034ba:	293f      	cmp	r1, #63	; 0x3f
 80034bc:	d810      	bhi.n	80034e0 <TM_SSD1306_DrawPixel+0x2c>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80034be:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <TM_SSD1306_DrawPixel+0x48>)
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10d      	bne.n	80034e2 <TM_SSD1306_DrawPixel+0x2e>
		color = (SSD1306_COLOR_t)!color;
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
		SSD1306_Buffer[x + ((y >> 3) * SSD1306_WIDTH)] |= 1 << (y % 8);
 80034c6:	08cb      	lsrs	r3, r1, #3
 80034c8:	01db      	lsls	r3, r3, #7
 80034ca:	1818      	adds	r0, r3, r0
 80034cc:	4c0c      	ldr	r4, [pc, #48]	; (8003500 <TM_SSD1306_DrawPixel+0x4c>)
	if (color == SSD1306_COLOR_WHITE) {
 80034ce:	2a01      	cmp	r2, #1
 80034d0:	d00b      	beq.n	80034ea <TM_SSD1306_DrawPixel+0x36>
	} else {
		SSD1306_Buffer[x + ((y >> 3) * SSD1306_WIDTH)] &= ~(1 << (y % 8));
 80034d2:	2207      	movs	r2, #7
 80034d4:	4011      	ands	r1, r2
 80034d6:	3a06      	subs	r2, #6
 80034d8:	408a      	lsls	r2, r1
 80034da:	5c23      	ldrb	r3, [r4, r0]
 80034dc:	4393      	bics	r3, r2
 80034de:	5423      	strb	r3, [r4, r0]
	}
}
 80034e0:	bd30      	pop	{r4, r5, pc}
		color = (SSD1306_COLOR_t)!color;
 80034e2:	4253      	negs	r3, r2
 80034e4:	415a      	adcs	r2, r3
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	e7ed      	b.n	80034c6 <TM_SSD1306_DrawPixel+0x12>
		SSD1306_Buffer[x + ((y >> 3) * SSD1306_WIDTH)] |= 1 << (y % 8);
 80034ea:	2307      	movs	r3, #7
 80034ec:	4019      	ands	r1, r3
 80034ee:	408a      	lsls	r2, r1
 80034f0:	5c25      	ldrb	r5, [r4, r0]
 80034f2:	432a      	orrs	r2, r5
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	5422      	strb	r2, [r4, r0]
 80034f8:	e7f2      	b.n	80034e0 <TM_SSD1306_DrawPixel+0x2c>
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	200002d4 	.word	0x200002d4
 8003500:	200002dc 	.word	0x200002dc

08003504 <TM_SSD1306_GotoXY>:

void TM_SSD1306_GotoXY(uint16_t x, uint16_t y) {
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003504:	4b01      	ldr	r3, [pc, #4]	; (800350c <TM_SSD1306_GotoXY+0x8>)
 8003506:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8003508:	8059      	strh	r1, [r3, #2]
}
 800350a:	4770      	bx	lr
 800350c:	200002d4 	.word	0x200002d4

08003510 <TM_SSD1306_Putc>:

char TM_SSD1306_Putc(char ch, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	46de      	mov	lr, fp
 8003514:	464e      	mov	r6, r9
 8003516:	4645      	mov	r5, r8
 8003518:	4657      	mov	r7, sl
 800351a:	b5e0      	push	{r5, r6, r7, lr}
	uint16_t i, b, j;
	
	/* Check available space in LCD */
	if (((SSD1306.CurrentX + Font->FontWidth) >= SSD1306_WIDTH)||((SSD1306.CurrentY + Font->FontHeight) >= SSD1306_HEIGHT))
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <TM_SSD1306_Putc+0xe8>)
char TM_SSD1306_Putc(char ch, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 800351e:	4693      	mov	fp, r2
	if (((SSD1306.CurrentX + Font->FontWidth) >= SSD1306_WIDTH)||((SSD1306.CurrentY + Font->FontHeight) >= SSD1306_HEIGHT))
 8003520:	4699      	mov	r9, r3
 8003522:	780a      	ldrb	r2, [r1, #0]
 8003524:	881b      	ldrh	r3, [r3, #0]
char TM_SSD1306_Putc(char ch, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 8003526:	b085      	sub	sp, #20
	if (((SSD1306.CurrentX + Font->FontWidth) >= SSD1306_WIDTH)||((SSD1306.CurrentY + Font->FontHeight) >= SSD1306_HEIGHT))
 8003528:	189b      	adds	r3, r3, r2
char TM_SSD1306_Putc(char ch, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 800352a:	9003      	str	r0, [sp, #12]
 800352c:	4688      	mov	r8, r1
	{
		/* Error */
		return 0;
 800352e:	2000      	movs	r0, #0
	if (((SSD1306.CurrentX + Font->FontWidth) >= SSD1306_WIDTH)||((SSD1306.CurrentY + Font->FontHeight) >= SSD1306_HEIGHT))
 8003530:	2b7f      	cmp	r3, #127	; 0x7f
 8003532:	dc05      	bgt.n	8003540 <TM_SSD1306_Putc+0x30>
 8003534:	464b      	mov	r3, r9
 8003536:	784a      	ldrb	r2, [r1, #1]
 8003538:	885b      	ldrh	r3, [r3, #2]
 800353a:	189b      	adds	r3, r3, r2
 800353c:	2b3f      	cmp	r3, #63	; 0x3f
 800353e:	dd06      	ble.n	800354e <TM_SSD1306_Putc+0x3e>
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
	
	/* Return character written */
	return ch;
}
 8003540:	b005      	add	sp, #20
 8003542:	bc3c      	pop	{r2, r3, r4, r5}
 8003544:	4690      	mov	r8, r2
 8003546:	4699      	mov	r9, r3
 8003548:	46a2      	mov	sl, r4
 800354a:	46ab      	mov	fp, r5
 800354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Fonts_getfromflash(ch,Font->nFontidx,nCharbuffer);
 800354e:	7889      	ldrb	r1, [r1, #2]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <TM_SSD1306_Putc+0xec>)
 8003552:	9803      	ldr	r0, [sp, #12]
 8003554:	f7ff ff2c 	bl	80033b0 <Fonts_getfromflash>
	for (i = 0; i < (Font->FontHeight); i++) {
 8003558:	4643      	mov	r3, r8
 800355a:	7859      	ldrb	r1, [r3, #1]
 800355c:	464b      	mov	r3, r9
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	9302      	str	r3, [sp, #8]
 8003562:	4643      	mov	r3, r8
 8003564:	2900      	cmp	r1, #0
 8003566:	d044      	beq.n	80035f2 <TM_SSD1306_Putc+0xe2>
				TM_SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003568:	465a      	mov	r2, fp
 800356a:	4250      	negs	r0, r2
 800356c:	4142      	adcs	r2, r0
	for (i = 0; i < (Font->FontHeight); i++) {
 800356e:	2700      	movs	r7, #0
				TM_SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	9201      	str	r2, [sp, #4]
		b = (nCharbuffer[2*i])|(nCharbuffer[2*i+1]<<8);
 8003576:	4821      	ldr	r0, [pc, #132]	; (80035fc <TM_SSD1306_Putc+0xec>)
 8003578:	007a      	lsls	r2, r7, #1
 800357a:	1880      	adds	r0, r0, r2
 800357c:	7846      	ldrb	r6, [r0, #1]
 800357e:	481f      	ldr	r0, [pc, #124]	; (80035fc <TM_SSD1306_Putc+0xec>)
 8003580:	0236      	lsls	r6, r6, #8
 8003582:	5c82      	ldrb	r2, [r0, r2]
 8003584:	4316      	orrs	r6, r2
		for (j = 0; j < Font->FontWidth; j++) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d031      	beq.n	80035ee <TM_SSD1306_Putc+0xde>
			if ((b << j) & 0x8000) {
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	021b      	lsls	r3, r3, #8
		for (j = 0; j < Font->FontWidth; j++) {
 800358e:	9d02      	ldr	r5, [sp, #8]
 8003590:	2400      	movs	r4, #0
			if ((b << j) & 0x8000) {
 8003592:	469a      	mov	sl, r3
 8003594:	e010      	b.n	80035b8 <TM_SSD1306_Putc+0xa8>
				TM_SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003596:	464b      	mov	r3, r9
 8003598:	8859      	ldrh	r1, [r3, #2]
 800359a:	465a      	mov	r2, fp
 800359c:	1879      	adds	r1, r7, r1
 800359e:	b289      	uxth	r1, r1
 80035a0:	0028      	movs	r0, r5
 80035a2:	f7ff ff87 	bl	80034b4 <TM_SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80035a6:	4643      	mov	r3, r8
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	3401      	adds	r4, #1
 80035ac:	3501      	adds	r5, #1
 80035ae:	b2a4      	uxth	r4, r4
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	b2ad      	uxth	r5, r5
 80035b4:	4294      	cmp	r4, r2
 80035b6:	d20d      	bcs.n	80035d4 <TM_SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 80035b8:	0033      	movs	r3, r6
 80035ba:	4652      	mov	r2, sl
 80035bc:	40a3      	lsls	r3, r4
 80035be:	4213      	tst	r3, r2
 80035c0:	d1e9      	bne.n	8003596 <TM_SSD1306_Putc+0x86>
				TM_SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80035c2:	464b      	mov	r3, r9
 80035c4:	8859      	ldrh	r1, [r3, #2]
 80035c6:	9a01      	ldr	r2, [sp, #4]
 80035c8:	1879      	adds	r1, r7, r1
 80035ca:	b289      	uxth	r1, r1
 80035cc:	0028      	movs	r0, r5
 80035ce:	f7ff ff71 	bl	80034b4 <TM_SSD1306_DrawPixel>
 80035d2:	e7e8      	b.n	80035a6 <TM_SSD1306_Putc+0x96>
 80035d4:	4641      	mov	r1, r8
 80035d6:	7849      	ldrb	r1, [r1, #1]
	for (i = 0; i < (Font->FontHeight); i++) {
 80035d8:	3701      	adds	r7, #1
 80035da:	b2bf      	uxth	r7, r7
 80035dc:	42b9      	cmp	r1, r7
 80035de:	d8ca      	bhi.n	8003576 <TM_SSD1306_Putc+0x66>
	SSD1306.CurrentX += Font->FontWidth;
 80035e0:	9b02      	ldr	r3, [sp, #8]
 80035e2:	9803      	ldr	r0, [sp, #12]
 80035e4:	469c      	mov	ip, r3
 80035e6:	464b      	mov	r3, r9
 80035e8:	4462      	add	r2, ip
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	e7a8      	b.n	8003540 <TM_SSD1306_Putc+0x30>
		for (j = 0; j < Font->FontWidth; j++) {
 80035ee:	2200      	movs	r2, #0
 80035f0:	e7f2      	b.n	80035d8 <TM_SSD1306_Putc+0xc8>
 80035f2:	781a      	ldrb	r2, [r3, #0]
 80035f4:	e7f4      	b.n	80035e0 <TM_SSD1306_Putc+0xd0>
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	200002d4 	.word	0x200002d4
 80035fc:	200006dc 	.word	0x200006dc

08003600 <TM_SSD1306_Puts>:

char TM_SSD1306_Puts(char* str, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 8003600:	b570      	push	{r4, r5, r6, lr}
 8003602:	0004      	movs	r4, r0
	/* Write characters */
	while (*str) {
 8003604:	7800      	ldrb	r0, [r0, #0]
char TM_SSD1306_Puts(char* str, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 8003606:	000e      	movs	r6, r1
 8003608:	0015      	movs	r5, r2
	while (*str) {
 800360a:	2800      	cmp	r0, #0
 800360c:	d104      	bne.n	8003618 <TM_SSD1306_Puts+0x18>
 800360e:	e00c      	b.n	800362a <TM_SSD1306_Puts+0x2a>
			/* Return error */
			return *str;
		}
		
		/* Increase string pointer */
		str++;
 8003610:	3401      	adds	r4, #1
	while (*str) {
 8003612:	7820      	ldrb	r0, [r4, #0]
 8003614:	2800      	cmp	r0, #0
 8003616:	d008      	beq.n	800362a <TM_SSD1306_Puts+0x2a>
		if (TM_SSD1306_Putc(*str, Font, color) != *str) {
 8003618:	002a      	movs	r2, r5
 800361a:	0031      	movs	r1, r6
 800361c:	f7ff ff78 	bl	8003510 <TM_SSD1306_Putc>
 8003620:	7823      	ldrb	r3, [r4, #0]
 8003622:	4298      	cmp	r0, r3
 8003624:	d0f4      	beq.n	8003610 <TM_SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
}
 8003626:	0018      	movs	r0, r3
 8003628:	bd70      	pop	{r4, r5, r6, pc}
char TM_SSD1306_Puts(char* str, TM_FontDef_t* Font, SSD1306_COLOR_t color) {
 800362a:	2300      	movs	r3, #0
 800362c:	e7fb      	b.n	8003626 <TM_SSD1306_Puts+0x26>
 800362e:	46c0      	nop			; (mov r8, r8)

08003630 <TM_SSD1306_DrawLine>:
 

void TM_SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	464e      	mov	r6, r9
 8003634:	4645      	mov	r5, r8
 8003636:	46de      	mov	lr, fp
 8003638:	4657      	mov	r7, sl
 800363a:	b5e0      	push	{r5, r6, r7, lr}
 800363c:	b085      	sub	sp, #20
 800363e:	ac0e      	add	r4, sp, #56	; 0x38
 8003640:	7824      	ldrb	r4, [r4, #0]
 8003642:	1c05      	adds	r5, r0, #0
 8003644:	46a1      	mov	r9, r4
 8003646:	287f      	cmp	r0, #127	; 0x7f
 8003648:	d900      	bls.n	800364c <TM_SSD1306_DrawLine+0x1c>
 800364a:	257f      	movs	r5, #127	; 0x7f
 800364c:	b2ad      	uxth	r5, r5
 800364e:	1c10      	adds	r0, r2, #0
 8003650:	2a7f      	cmp	r2, #127	; 0x7f
 8003652:	d900      	bls.n	8003656 <TM_SSD1306_DrawLine+0x26>
 8003654:	207f      	movs	r0, #127	; 0x7f
 8003656:	b282      	uxth	r2, r0
 8003658:	4690      	mov	r8, r2
 800365a:	1c0e      	adds	r6, r1, #0
 800365c:	293f      	cmp	r1, #63	; 0x3f
 800365e:	d900      	bls.n	8003662 <TM_SSD1306_DrawLine+0x32>
 8003660:	263f      	movs	r6, #63	; 0x3f
 8003662:	b2b6      	uxth	r6, r6
 8003664:	1c1a      	adds	r2, r3, #0
 8003666:	2b3f      	cmp	r3, #63	; 0x3f
 8003668:	d900      	bls.n	800366c <TM_SSD1306_DrawLine+0x3c>
 800366a:	223f      	movs	r2, #63	; 0x3f
 800366c:	b293      	uxth	r3, r2
 800366e:	469a      	mov	sl, r3
	}
	if (y1 >= SSD1306_HEIGHT) {
		y1 = SSD1306_HEIGHT - 1;
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003670:	4643      	mov	r3, r8
 8003672:	4545      	cmp	r5, r8
 8003674:	d245      	bcs.n	8003702 <TM_SSD1306_DrawLine+0xd2>
 8003676:	1b5b      	subs	r3, r3, r5
 8003678:	b21b      	sxth	r3, r3
 800367a:	9301      	str	r3, [sp, #4]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800367c:	45b2      	cmp	sl, r6
 800367e:	d945      	bls.n	800370c <TM_SSD1306_DrawLine+0xdc>
 8003680:	4653      	mov	r3, sl
 8003682:	1b9f      	subs	r7, r3, r6
	sx = (x0 < x1) ? 1 : -1; 
 8003684:	2301      	movs	r3, #1
	sy = (y0 < y1) ? 1 : -1; 
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003686:	9a01      	ldr	r2, [sp, #4]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003688:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 800368a:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800368c:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800368e:	42ba      	cmp	r2, r7
 8003690:	dc51      	bgt.n	8003736 <TM_SSD1306_DrawLine+0x106>
 8003692:	0ffc      	lsrs	r4, r7, #31
 8003694:	19e4      	adds	r4, r4, r7
 8003696:	1064      	asrs	r4, r4, #1

	if (dx == 0) {
 8003698:	9b01      	ldr	r3, [sp, #4]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800369a:	4264      	negs	r4, r4
 800369c:	b224      	sxth	r4, r4
	if (dx == 0) {
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d050      	beq.n	8003744 <TM_SSD1306_DrawLine+0x114>
		
		/* Return from function */
		return;
	}
	
	if (dy == 0) {
 80036a2:	2f00      	cmp	r7, #0
 80036a4:	d06d      	beq.n	8003782 <TM_SSD1306_DrawLine+0x152>
		TM_SSD1306_DrawPixel(x0, y0, c); 
		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 80036a6:	9b01      	ldr	r3, [sp, #4]
		TM_SSD1306_DrawPixel(x0, y0, c); 
 80036a8:	464a      	mov	r2, r9
		if (e2 > -dx) {
 80036aa:	425b      	negs	r3, r3
		TM_SSD1306_DrawPixel(x0, y0, c); 
 80036ac:	0031      	movs	r1, r6
 80036ae:	0028      	movs	r0, r5
		if (e2 > -dx) {
 80036b0:	469b      	mov	fp, r3
		TM_SSD1306_DrawPixel(x0, y0, c); 
 80036b2:	f7ff feff 	bl	80034b4 <TM_SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80036b6:	4545      	cmp	r5, r8
 80036b8:	d01a      	beq.n	80036f0 <TM_SSD1306_DrawLine+0xc0>
 80036ba:	0023      	movs	r3, r4
		if (e2 > -dx) {
 80036bc:	455c      	cmp	r4, fp
 80036be:	dd05      	ble.n	80036cc <TM_SSD1306_DrawLine+0x9c>
			err -= dy;
			x0 += sx;
 80036c0:	9a03      	ldr	r2, [sp, #12]
			err -= dy;
 80036c2:	1be3      	subs	r3, r4, r7
			x0 += sx;
 80036c4:	4694      	mov	ip, r2
 80036c6:	4465      	add	r5, ip
			err -= dy;
 80036c8:	b21b      	sxth	r3, r3
			x0 += sx;
 80036ca:	b2ad      	uxth	r5, r5
		} 
		if (e2 < dy) {
 80036cc:	42bc      	cmp	r4, r7
 80036ce:	da07      	bge.n	80036e0 <TM_SSD1306_DrawLine+0xb0>
			err += dx;
 80036d0:	9a01      	ldr	r2, [sp, #4]
 80036d2:	4694      	mov	ip, r2
			y0 += sy;
 80036d4:	9a02      	ldr	r2, [sp, #8]
			err += dx;
 80036d6:	4463      	add	r3, ip
			y0 += sy;
 80036d8:	4694      	mov	ip, r2
 80036da:	4466      	add	r6, ip
			err += dx;
 80036dc:	b21b      	sxth	r3, r3
			y0 += sy;
 80036de:	b2b6      	uxth	r6, r6
		TM_SSD1306_DrawPixel(x0, y0, c); 
 80036e0:	464a      	mov	r2, r9
 80036e2:	0031      	movs	r1, r6
 80036e4:	0028      	movs	r0, r5
		if (x1 < x0) {
 80036e6:	001c      	movs	r4, r3
		TM_SSD1306_DrawPixel(x0, y0, c); 
 80036e8:	f7ff fee4 	bl	80034b4 <TM_SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80036ec:	4545      	cmp	r5, r8
 80036ee:	d1e4      	bne.n	80036ba <TM_SSD1306_DrawLine+0x8a>
 80036f0:	4556      	cmp	r6, sl
 80036f2:	d1e2      	bne.n	80036ba <TM_SSD1306_DrawLine+0x8a>
		} 
	}
}
 80036f4:	b005      	add	sp, #20
 80036f6:	bc3c      	pop	{r2, r3, r4, r5}
 80036f8:	4690      	mov	r8, r2
 80036fa:	4699      	mov	r9, r3
 80036fc:	46a2      	mov	sl, r4
 80036fe:	46ab      	mov	fp, r5
 8003700:	bdf0      	pop	{r4, r5, r6, r7, pc}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8003702:	1aeb      	subs	r3, r5, r3
 8003704:	b21b      	sxth	r3, r3
 8003706:	9301      	str	r3, [sp, #4]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003708:	45b2      	cmp	sl, r6
 800370a:	d809      	bhi.n	8003720 <TM_SSD1306_DrawLine+0xf0>
 800370c:	4653      	mov	r3, sl
 800370e:	1af7      	subs	r7, r6, r3
 8003710:	b23f      	sxth	r7, r7
	sx = (x0 < x1) ? 1 : -1; 
 8003712:	2301      	movs	r3, #1
 8003714:	4545      	cmp	r5, r8
 8003716:	d230      	bcs.n	800377a <TM_SSD1306_DrawLine+0x14a>
 8003718:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800371a:	3b02      	subs	r3, #2
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	e007      	b.n	8003730 <TM_SSD1306_DrawLine+0x100>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8003720:	4653      	mov	r3, sl
 8003722:	1b9f      	subs	r7, r3, r6
	sx = (x0 < x1) ? 1 : -1; 
 8003724:	2301      	movs	r3, #1
 8003726:	425b      	negs	r3, r3
 8003728:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800372a:	3302      	adds	r3, #2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800372c:	b23f      	sxth	r7, r7
	sy = (y0 < y1) ? 1 : -1; 
 800372e:	9302      	str	r3, [sp, #8]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8003730:	9a01      	ldr	r2, [sp, #4]
 8003732:	42ba      	cmp	r2, r7
 8003734:	ddad      	ble.n	8003692 <TM_SSD1306_DrawLine+0x62>
 8003736:	4694      	mov	ip, r2
 8003738:	0fd4      	lsrs	r4, r2, #31
	if (dx == 0) {
 800373a:	9b01      	ldr	r3, [sp, #4]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800373c:	4464      	add	r4, ip
 800373e:	1064      	asrs	r4, r4, #1
	if (dx == 0) {
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ae      	bne.n	80036a2 <TM_SSD1306_DrawLine+0x72>
		if (y1 < y0) {
 8003744:	45b2      	cmp	sl, r6
 8003746:	d202      	bcs.n	800374e <TM_SSD1306_DrawLine+0x11e>
 8003748:	0033      	movs	r3, r6
 800374a:	4656      	mov	r6, sl
 800374c:	469a      	mov	sl, r3
 800374e:	1c2b      	adds	r3, r5, #0
 8003750:	4545      	cmp	r5, r8
 8003752:	d900      	bls.n	8003756 <TM_SSD1306_DrawLine+0x126>
 8003754:	4643      	mov	r3, r8
 8003756:	b29d      	uxth	r5, r3
		for (i = y0; i <= y1; i++) {
 8003758:	b231      	sxth	r1, r6
 800375a:	4556      	cmp	r6, sl
 800375c:	dcca      	bgt.n	80036f4 <TM_SSD1306_DrawLine+0xc4>
 800375e:	000c      	movs	r4, r1
 8003760:	4656      	mov	r6, sl
 8003762:	464f      	mov	r7, r9
			TM_SSD1306_DrawPixel(x0, i, c);
 8003764:	b2a4      	uxth	r4, r4
 8003766:	0021      	movs	r1, r4
 8003768:	3401      	adds	r4, #1
 800376a:	003a      	movs	r2, r7
 800376c:	0028      	movs	r0, r5
 800376e:	b224      	sxth	r4, r4
 8003770:	f7ff fea0 	bl	80034b4 <TM_SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8003774:	42b4      	cmp	r4, r6
 8003776:	ddf5      	ble.n	8003764 <TM_SSD1306_DrawLine+0x134>
 8003778:	e7bc      	b.n	80036f4 <TM_SSD1306_DrawLine+0xc4>
	sx = (x0 < x1) ? 1 : -1; 
 800377a:	425b      	negs	r3, r3
 800377c:	9303      	str	r3, [sp, #12]
	sy = (y0 < y1) ? 1 : -1; 
 800377e:	9302      	str	r3, [sp, #8]
 8003780:	e7d6      	b.n	8003730 <TM_SSD1306_DrawLine+0x100>
 8003782:	4653      	mov	r3, sl
 8003784:	45b2      	cmp	sl, r6
 8003786:	d817      	bhi.n	80037b8 <TM_SSD1306_DrawLine+0x188>
 8003788:	b29e      	uxth	r6, r3
		if (x1 < x0) {
 800378a:	4545      	cmp	r5, r8
 800378c:	d810      	bhi.n	80037b0 <TM_SSD1306_DrawLine+0x180>
		for (i = x0; i <= x1; i++) {
 800378e:	b228      	sxth	r0, r5
 8003790:	4545      	cmp	r5, r8
 8003792:	dcaf      	bgt.n	80036f4 <TM_SSD1306_DrawLine+0xc4>
 8003794:	4645      	mov	r5, r8
 8003796:	0004      	movs	r4, r0
 8003798:	464f      	mov	r7, r9
			TM_SSD1306_DrawPixel(i, y0, c);
 800379a:	b2a4      	uxth	r4, r4
 800379c:	0020      	movs	r0, r4
 800379e:	3401      	adds	r4, #1
 80037a0:	003a      	movs	r2, r7
 80037a2:	0031      	movs	r1, r6
 80037a4:	b224      	sxth	r4, r4
 80037a6:	f7ff fe85 	bl	80034b4 <TM_SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80037aa:	42ac      	cmp	r4, r5
 80037ac:	ddf5      	ble.n	800379a <TM_SSD1306_DrawLine+0x16a>
 80037ae:	e7a1      	b.n	80036f4 <TM_SSD1306_DrawLine+0xc4>
		if (x1 < x0) {
 80037b0:	002b      	movs	r3, r5
 80037b2:	4645      	mov	r5, r8
 80037b4:	4698      	mov	r8, r3
 80037b6:	e7ea      	b.n	800378e <TM_SSD1306_DrawLine+0x15e>
 80037b8:	1c33      	adds	r3, r6, #0
 80037ba:	b29e      	uxth	r6, r3
 80037bc:	4545      	cmp	r5, r8
 80037be:	d9e6      	bls.n	800378e <TM_SSD1306_DrawLine+0x15e>
 80037c0:	e7f6      	b.n	80037b0 <TM_SSD1306_DrawLine+0x180>
 80037c2:	46c0      	nop			; (mov r8, r8)

080037c4 <TM_SSD1306_DrawFilledRectangle>:
	TM_SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	TM_SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	TM_SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void TM_SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	4647      	mov	r7, r8
 80037c8:	46ce      	mov	lr, r9
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b083      	sub	sp, #12
 80037ce:	001f      	movs	r7, r3
 80037d0:	ab0a      	add	r3, sp, #40	; 0x28
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	0006      	movs	r6, r0
 80037d6:	4688      	mov	r8, r1
 80037d8:	4699      	mov	r9, r3
	uint8_t i;
	
	/* Check input parameters */
	if (
 80037da:	287f      	cmp	r0, #127	; 0x7f
 80037dc:	d81d      	bhi.n	800381a <TM_SSD1306_DrawFilledRectangle+0x56>
		x >= SSD1306_WIDTH ||
 80037de:	293f      	cmp	r1, #63	; 0x3f
 80037e0:	d81b      	bhi.n	800381a <TM_SSD1306_DrawFilledRectangle+0x56>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80037e2:	1882      	adds	r2, r0, r2
 80037e4:	2a7f      	cmp	r2, #127	; 0x7f
 80037e6:	dd03      	ble.n	80037f0 <TM_SSD1306_DrawFilledRectangle+0x2c>
		w = SSD1306_WIDTH - x;
 80037e8:	2280      	movs	r2, #128	; 0x80
 80037ea:	1a12      	subs	r2, r2, r0
 80037ec:	b292      	uxth	r2, r2
 80037ee:	1882      	adds	r2, r0, r2
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80037f0:	4643      	mov	r3, r8
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	2b3f      	cmp	r3, #63	; 0x3f
 80037f6:	dc15      	bgt.n	8003824 <TM_SSD1306_DrawFilledRectangle+0x60>
void TM_SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80037f8:	2100      	movs	r1, #0
 80037fa:	2400      	movs	r4, #0
 80037fc:	b295      	uxth	r5, r2
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
		/* Draw lines */
		TM_SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 80037fe:	464b      	mov	r3, r9
 8003800:	4441      	add	r1, r8
 8003802:	b289      	uxth	r1, r1
	for (i = 0; i <= h; i++) {
 8003804:	3401      	adds	r4, #1
		TM_SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	002a      	movs	r2, r5
 800380a:	000b      	movs	r3, r1
 800380c:	0030      	movs	r0, r6
	for (i = 0; i <= h; i++) {
 800380e:	b2e4      	uxtb	r4, r4
		TM_SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8003810:	f7ff ff0e 	bl	8003630 <TM_SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8003814:	b2a1      	uxth	r1, r4
 8003816:	428f      	cmp	r7, r1
 8003818:	d2f1      	bcs.n	80037fe <TM_SSD1306_DrawFilledRectangle+0x3a>
	}
}
 800381a:	b003      	add	sp, #12
 800381c:	bc0c      	pop	{r2, r3}
 800381e:	4690      	mov	r8, r2
 8003820:	4699      	mov	r9, r3
 8003822:	bdf0      	pop	{r4, r5, r6, r7, pc}
		h = SSD1306_HEIGHT - y;
 8003824:	2740      	movs	r7, #64	; 0x40
 8003826:	4643      	mov	r3, r8
 8003828:	1aff      	subs	r7, r7, r3
 800382a:	b2bf      	uxth	r7, r7
 800382c:	e7e4      	b.n	80037f8 <TM_SSD1306_DrawFilledRectangle+0x34>
 800382e:	46c0      	nop			; (mov r8, r8)

08003830 <TM_SSD1306_DrawFilledCircle>:
        TM_SSD1306_DrawPixel(x0 + y, y0 - x, c);
        TM_SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void TM_SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8003830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003832:	46de      	mov	lr, fp
 8003834:	4657      	mov	r7, sl
 8003836:	464e      	mov	r6, r9
 8003838:	4645      	mov	r5, r8
 800383a:	b5e0      	push	{r5, r6, r7, lr}
 800383c:	b089      	sub	sp, #36	; 0x24
 800383e:	469a      	mov	sl, r3
 8003840:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 8003842:	1c13      	adds	r3, r2, #0
void TM_SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8003844:	9203      	str	r2, [sp, #12]
	int16_t f = 1 - r;
 8003846:	466a      	mov	r2, sp
 8003848:	8213      	strh	r3, [r2, #16]
 800384a:	2301      	movs	r3, #1
 800384c:	8a17      	ldrh	r7, [r2, #16]
	int16_t ddF_x = 1;
	int16_t ddF_y = -2 * r;
	int16_t x = 0;
	int16_t y = r;

    TM_SSD1306_DrawPixel(x0, y0 + r, c);
 800384e:	b28a      	uxth	r2, r1
 8003850:	4691      	mov	r9, r2
	int16_t f = 1 - r;
 8003852:	1bdb      	subs	r3, r3, r7
 8003854:	b21b      	sxth	r3, r3
 8003856:	469b      	mov	fp, r3
	int16_t ddF_y = -2 * r;
 8003858:	03fb      	lsls	r3, r7, #15
 800385a:	1bdb      	subs	r3, r3, r7
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	b21b      	sxth	r3, r3
 8003860:	9307      	str	r3, [sp, #28]
    TM_SSD1306_DrawPixel(x0, y0 + r, c);
 8003862:	18b9      	adds	r1, r7, r2
 8003864:	b283      	uxth	r3, r0
 8003866:	0018      	movs	r0, r3
 8003868:	b289      	uxth	r1, r1
 800386a:	4652      	mov	r2, sl
 800386c:	001c      	movs	r4, r3
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	f7ff fe20 	bl	80034b4 <TM_SSD1306_DrawPixel>
    TM_SSD1306_DrawPixel(x0, y0 - r, c);
 8003874:	464a      	mov	r2, r9
    TM_SSD1306_DrawPixel(x0 + r, y0, c);
 8003876:	193d      	adds	r5, r7, r4
    TM_SSD1306_DrawPixel(x0, y0 - r, c);
 8003878:	1bd1      	subs	r1, r2, r7
 800387a:	0020      	movs	r0, r4
 800387c:	b289      	uxth	r1, r1
 800387e:	4652      	mov	r2, sl
    TM_SSD1306_DrawPixel(x0 + r, y0, c);
 8003880:	b2ad      	uxth	r5, r5
    TM_SSD1306_DrawPixel(x0 - r, y0, c);
 8003882:	1be4      	subs	r4, r4, r7
    TM_SSD1306_DrawPixel(x0, y0 - r, c);
 8003884:	f7ff fe16 	bl	80034b4 <TM_SSD1306_DrawPixel>
    TM_SSD1306_DrawPixel(x0 - r, y0, c);
 8003888:	b2a4      	uxth	r4, r4
    TM_SSD1306_DrawPixel(x0 + r, y0, c);
 800388a:	4652      	mov	r2, sl
 800388c:	4649      	mov	r1, r9
 800388e:	0028      	movs	r0, r5
 8003890:	f7ff fe10 	bl	80034b4 <TM_SSD1306_DrawPixel>
    TM_SSD1306_DrawPixel(x0 - r, y0, c);
 8003894:	4652      	mov	r2, sl
 8003896:	4649      	mov	r1, r9
 8003898:	0020      	movs	r0, r4
 800389a:	f7ff fe0b 	bl	80034b4 <TM_SSD1306_DrawPixel>
    TM_SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800389e:	4653      	mov	r3, sl
 80038a0:	002a      	movs	r2, r5
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	4649      	mov	r1, r9
 80038a6:	464b      	mov	r3, r9
 80038a8:	0020      	movs	r0, r4
 80038aa:	f7ff fec1 	bl	8003630 <TM_SSD1306_DrawLine>

    while (x < y) {
 80038ae:	4643      	mov	r3, r8
 80038b0:	2601      	movs	r6, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dd56      	ble.n	8003964 <TM_SSD1306_DrawFilledCircle+0x134>
 80038b6:	46c8      	mov	r8, r9
 80038b8:	46b9      	mov	r9, r7
        if (f >= 0) {
 80038ba:	465b      	mov	r3, fp
 80038bc:	2b00      	cmp	r3, #0
 80038be:	db0e      	blt.n	80038de <TM_SSD1306_DrawFilledCircle+0xae>
            y--;
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	001a      	movs	r2, r3
 80038c8:	9303      	str	r3, [sp, #12]
            ddF_y += 2;
 80038ca:	9b07      	ldr	r3, [sp, #28]
 80038cc:	3302      	adds	r3, #2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	b219      	sxth	r1, r3
            f += ddF_y;
 80038d2:	445b      	add	r3, fp
 80038d4:	b21b      	sxth	r3, r3
 80038d6:	469b      	mov	fp, r3
 80038d8:	b293      	uxth	r3, r2
 80038da:	4699      	mov	r9, r3
            ddF_y += 2;
 80038dc:	9107      	str	r1, [sp, #28]
        }
        x++;
        ddF_x += 2;
        f += ddF_x;

        TM_SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80038de:	4641      	mov	r1, r8
 80038e0:	4650      	mov	r0, sl
 80038e2:	0075      	lsls	r5, r6, #1
        x++;
 80038e4:	b233      	sxth	r3, r6
 80038e6:	b2ad      	uxth	r5, r5
 80038e8:	9305      	str	r3, [sp, #20]
        f += ddF_x;
 80038ea:	1c6b      	adds	r3, r5, #1
 80038ec:	445b      	add	r3, fp
 80038ee:	b21a      	sxth	r2, r3
 80038f0:	9b04      	ldr	r3, [sp, #16]
        TM_SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80038f2:	4449      	add	r1, r9
 80038f4:	1b9c      	subs	r4, r3, r6
 80038f6:	b2a4      	uxth	r4, r4
 80038f8:	1967      	adds	r7, r4, r5
 80038fa:	b289      	uxth	r1, r1
 80038fc:	b2bf      	uxth	r7, r7
 80038fe:	000b      	movs	r3, r1
 8003900:	9000      	str	r0, [sp, #0]
        f += ddF_x;
 8003902:	4693      	mov	fp, r2
        TM_SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8003904:	0020      	movs	r0, r4
 8003906:	003a      	movs	r2, r7
 8003908:	f7ff fe92 	bl	8003630 <TM_SSD1306_DrawLine>
        TM_SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800390c:	4648      	mov	r0, r9
 800390e:	4641      	mov	r1, r8
 8003910:	1a09      	subs	r1, r1, r0
 8003912:	4650      	mov	r0, sl
 8003914:	b289      	uxth	r1, r1
 8003916:	000b      	movs	r3, r1
 8003918:	0022      	movs	r2, r4
 800391a:	9000      	str	r0, [sp, #0]
 800391c:	0038      	movs	r0, r7
 800391e:	f7ff fe87 	bl	8003630 <TM_SSD1306_DrawLine>

        TM_SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8003922:	9b04      	ldr	r3, [sp, #16]
 8003924:	4649      	mov	r1, r9
 8003926:	001a      	movs	r2, r3
 8003928:	444a      	add	r2, r9
 800392a:	b297      	uxth	r7, r2
 800392c:	4642      	mov	r2, r8
 800392e:	1a5b      	subs	r3, r3, r1
 8003930:	4651      	mov	r1, sl
 8003932:	1994      	adds	r4, r2, r6
 8003934:	b2a4      	uxth	r4, r4
 8003936:	b29a      	uxth	r2, r3
 8003938:	9100      	str	r1, [sp, #0]
 800393a:	0023      	movs	r3, r4
 800393c:	0021      	movs	r1, r4
 800393e:	0038      	movs	r0, r7
 8003940:	9206      	str	r2, [sp, #24]
 8003942:	f7ff fe75 	bl	8003630 <TM_SSD1306_DrawLine>
        TM_SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8003946:	4650      	mov	r0, sl
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	b2a1      	uxth	r1, r4
 800394c:	9000      	str	r0, [sp, #0]
 800394e:	000b      	movs	r3, r1
 8003950:	9a06      	ldr	r2, [sp, #24]
 8003952:	0038      	movs	r0, r7
 8003954:	f7ff fe6c 	bl	8003630 <TM_SSD1306_DrawLine>
    while (x < y) {
 8003958:	9a03      	ldr	r2, [sp, #12]
 800395a:	9b05      	ldr	r3, [sp, #20]
 800395c:	3601      	adds	r6, #1
 800395e:	b2b6      	uxth	r6, r6
 8003960:	429a      	cmp	r2, r3
 8003962:	dcaa      	bgt.n	80038ba <TM_SSD1306_DrawFilledCircle+0x8a>
    }
}
 8003964:	b009      	add	sp, #36	; 0x24
 8003966:	bc3c      	pop	{r2, r3, r4, r5}
 8003968:	4690      	mov	r8, r2
 800396a:	4699      	mov	r9, r3
 800396c:	46a2      	mov	sl, r4
 800396e:	46ab      	mov	fp, r5
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)

08003974 <init_icd>:

extern volatile system_handler_type sSysHandler;


void init_icd()
{
 8003974:	b570      	push	{r4, r5, r6, lr}
	IcdStatus.sHeader =StatusHeader;
 8003976:	4c12      	ldr	r4, [pc, #72]	; (80039c0 <init_icd+0x4c>)
 8003978:	2208      	movs	r2, #8
 800397a:	2100      	movs	r1, #0
 800397c:	0020      	movs	r0, r4
 800397e:	f000 fb1a 	bl	8003fb6 <memset>
 8003982:	2501      	movs	r5, #1
 8003984:	2304      	movs	r3, #4
 8003986:	4e0f      	ldr	r6, [pc, #60]	; (80039c4 <init_icd+0x50>)
 8003988:	71a5      	strb	r5, [r4, #6]
 800398a:	6026      	str	r6, [r4, #0]
 800398c:	71e3      	strb	r3, [r4, #7]
	IcdGetRec.sHeader =GetRecHeader;
 800398e:	4c0e      	ldr	r4, [pc, #56]	; (80039c8 <init_icd+0x54>)
 8003990:	2208      	movs	r2, #8
 8003992:	2100      	movs	r1, #0
 8003994:	0020      	movs	r0, r4
 8003996:	f000 fb0e 	bl	8003fb6 <memset>
 800399a:	2302      	movs	r3, #2
 800399c:	71a3      	strb	r3, [r4, #6]
 800399e:	330f      	adds	r3, #15
 80039a0:	6026      	str	r6, [r4, #0]
 80039a2:	7165      	strb	r5, [r4, #5]
 80039a4:	71e3      	strb	r3, [r4, #7]
	IcdGetSam.sHeader =GetSamplesHeader;
 80039a6:	4c09      	ldr	r4, [pc, #36]	; (80039cc <init_icd+0x58>)
 80039a8:	2208      	movs	r2, #8
 80039aa:	2100      	movs	r1, #0
 80039ac:	0020      	movs	r0, r4
 80039ae:	f000 fb02 	bl	8003fb6 <memset>
 80039b2:	2306      	movs	r3, #6
 80039b4:	71a3      	strb	r3, [r4, #6]
 80039b6:	331e      	adds	r3, #30
 80039b8:	6026      	str	r6, [r4, #0]
 80039ba:	7165      	strb	r5, [r4, #5]
 80039bc:	71e3      	strb	r3, [r4, #7]
}
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	20000764 	.word	0x20000764
 80039c4:	9a5bc0dd 	.word	0x9a5bc0dd
 80039c8:	2000071c 	.word	0x2000071c
 80039cc:	20000738 	.word	0x20000738

080039d0 <BuildAndSendStatusMsg>:




void BuildAndSendStatusMsg()
{
 80039d0:	b510      	push	{r4, lr}
	IcdStatus.nTemp = sSysHandler.nCurrentTemp;
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <BuildAndSendStatusMsg+0x1c>)
 80039d4:	4806      	ldr	r0, [pc, #24]	; (80039f0 <BuildAndSendStatusMsg+0x20>)
 80039d6:	885b      	ldrh	r3, [r3, #2]
	IcdStatus.sHeader.nSequence = nTxSeq++;
 80039d8:	4a06      	ldr	r2, [pc, #24]	; (80039f4 <BuildAndSendStatusMsg+0x24>)
	IcdStatus.nTemp = sSysHandler.nCurrentTemp;
 80039da:	8143      	strh	r3, [r0, #10]
	IcdStatus.sHeader.nSequence = nTxSeq++;
 80039dc:	7813      	ldrb	r3, [r2, #0]
 80039de:	1c59      	adds	r1, r3, #1
 80039e0:	7011      	strb	r1, [r2, #0]
	CDC_Transmit_FS((uint8_t*)&(IcdStatus.sHeader),sizeof(usb_status_msg_type));
 80039e2:	210c      	movs	r1, #12
	IcdStatus.sHeader.nSequence = nTxSeq++;
 80039e4:	7103      	strb	r3, [r0, #4]
	CDC_Transmit_FS((uint8_t*)&(IcdStatus.sHeader),sizeof(usb_status_msg_type));
 80039e6:	f000 f8bd 	bl	8003b64 <CDC_Transmit_FS>
}
 80039ea:	bd10      	pop	{r4, pc}
 80039ec:	200009e0 	.word	0x200009e0
 80039f0:	20000764 	.word	0x20000764
 80039f4:	20000770 	.word	0x20000770

080039f8 <ParseIcdMsg>:
	}
}


void ParseIcdMsg()
{
 80039f8:	b570      	push	{r4, r5, r6, lr}
	switch(sRxIcdMsg.sHeader.nReq)
 80039fa:	4c21      	ldr	r4, [pc, #132]	; (8003a80 <ParseIcdMsg+0x88>)
 80039fc:	7963      	ldrb	r3, [r4, #5]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d019      	beq.n	8003a36 <ParseIcdMsg+0x3e>
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d116      	bne.n	8003a34 <ParseIcdMsg+0x3c>
		break;
		}
		case USB_REQ_MASTER_RECEIVE:
		{

			switch(sRxIcdMsg.sHeader.nMsgtype)
 8003a06:	79a3      	ldrb	r3, [r4, #6]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d021      	beq.n	8003a50 <ParseIcdMsg+0x58>
 8003a0c:	2b06      	cmp	r3, #6
 8003a0e:	d111      	bne.n	8003a34 <ParseIcdMsg+0x3c>
				//cast to message
				usb_req_samples_type* msg = (usb_req_samples_type*)(&sRxIcdMsg);


				//copy 16 samples to message.
				sst_flash_read_cmd(msg->nFlashOffset,32,&(IcdGetSam.nSamples[0]));
 8003a10:	4d1c      	ldr	r5, [pc, #112]	; (8003a84 <ParseIcdMsg+0x8c>)
 8003a12:	2120      	movs	r1, #32
 8003a14:	002a      	movs	r2, r5
 8003a16:	68a0      	ldr	r0, [r4, #8]
 8003a18:	3208      	adds	r2, #8
 8003a1a:	f7fe fc6b 	bl	80022f4 <sst_flash_read_cmd>

				IcdGetSam.nRequestedSamples = msg->nFlashOffset;
 8003a1e:	68a3      	ldr	r3, [r4, #8]
				//send to device.
				IcdGetSam.sHeader.nSequence = nTxSeq++;
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <ParseIcdMsg+0x90>)
				IcdGetSam.nRequestedSamples = msg->nFlashOffset;
 8003a22:	62ab      	str	r3, [r5, #40]	; 0x28
				IcdGetSam.sHeader.nSequence = nTxSeq++;
 8003a24:	7813      	ldrb	r3, [r2, #0]

				CDC_Transmit_FS((uint8_t*)&(IcdGetSam.sHeader),sizeof(usb_requested_samples_type));
 8003a26:	0028      	movs	r0, r5
				IcdGetSam.sHeader.nSequence = nTxSeq++;
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	7011      	strb	r1, [r2, #0]
				CDC_Transmit_FS((uint8_t*)&(IcdGetSam.sHeader),sizeof(usb_requested_samples_type));
 8003a2c:	212c      	movs	r1, #44	; 0x2c
				IcdGetSam.sHeader.nSequence = nTxSeq++;
 8003a2e:	712b      	strb	r3, [r5, #4]
				CDC_Transmit_FS((uint8_t*)&(IcdGetSam.sHeader),sizeof(usb_requested_samples_type));
 8003a30:	f000 f898 	bl	8003b64 <CDC_Transmit_FS>

	}



}
 8003a34:	bd70      	pop	{r4, r5, r6, pc}
			switch(sRxIcdMsg.sHeader.nMsgtype)
 8003a36:	79a3      	ldrb	r3, [r4, #6]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d1fb      	bne.n	8003a34 <ParseIcdMsg+0x3c>
				  FLASH_PageErase(0x08000000);
 8003a3c:	2080      	movs	r0, #128	; 0x80
				  FLASH->KEYR = 0x45670123;
 8003a3e:	4b13      	ldr	r3, [pc, #76]	; (8003a8c <ParseIcdMsg+0x94>)
 8003a40:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <ParseIcdMsg+0x98>)
				  FLASH_PageErase(0x08000000);
 8003a42:	0500      	lsls	r0, r0, #20
				  FLASH->KEYR = 0x45670123;
 8003a44:	605a      	str	r2, [r3, #4]
				  FLASH->KEYR = 0xCDEF89AB;
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <ParseIcdMsg+0x9c>)
 8003a48:	605a      	str	r2, [r3, #4]
				  FLASH_PageErase(0x08000000);
 8003a4a:	f7fc fce3 	bl	8000414 <FLASH_PageErase>
 8003a4e:	e7fe      	b.n	8003a4e <ParseIcdMsg+0x56>
				IcdGetRec.nTotalRecs = sCurrentHeader.nRecordnum + 1;
 8003a50:	4d11      	ldr	r5, [pc, #68]	; (8003a98 <ParseIcdMsg+0xa0>)
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <ParseIcdMsg+0xa4>)
				sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR+(sRxIcdMsg.nMsgdata[0]*0x1000),sizeof(flash_file_header_type),(uint8_t*)&(IcdGetRec.sRecHeader.Signature));
 8003a54:	002a      	movs	r2, r5
				IcdGetRec.nTotalRecs = sCurrentHeader.nRecordnum + 1;
 8003a56:	791b      	ldrb	r3, [r3, #4]
				sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR+(sRxIcdMsg.nMsgdata[0]*0x1000),sizeof(flash_file_header_type),(uint8_t*)&(IcdGetRec.sRecHeader.Signature));
 8003a58:	3208      	adds	r2, #8
				IcdGetRec.nTotalRecs = sCurrentHeader.nRecordnum + 1;
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	762b      	strb	r3, [r5, #24]
				sst_flash_read_cmd(FLASH_FILE_HEADERS_ADDR+(sRxIcdMsg.nMsgdata[0]*0x1000),sizeof(flash_file_header_type),(uint8_t*)&(IcdGetRec.sRecHeader.Signature));
 8003a5e:	7a20      	ldrb	r0, [r4, #8]
 8003a60:	2110      	movs	r1, #16
 8003a62:	3008      	adds	r0, #8
 8003a64:	0300      	lsls	r0, r0, #12
 8003a66:	f7fe fc45 	bl	80022f4 <sst_flash_read_cmd>
				IcdGetRec.sHeader.nSequence = nTxSeq++;
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <ParseIcdMsg+0x90>)
				CDC_Transmit_FS((uint8_t*)&(IcdGetRec.sHeader),sizeof(usb_get_recording_type));
 8003a6c:	0028      	movs	r0, r5
				IcdGetRec.sHeader.nSequence = nTxSeq++;
 8003a6e:	7813      	ldrb	r3, [r2, #0]
 8003a70:	1c59      	adds	r1, r3, #1
 8003a72:	7011      	strb	r1, [r2, #0]
				CDC_Transmit_FS((uint8_t*)&(IcdGetRec.sHeader),sizeof(usb_get_recording_type));
 8003a74:	2119      	movs	r1, #25
				IcdGetRec.sHeader.nSequence = nTxSeq++;
 8003a76:	712b      	strb	r3, [r5, #4]
				CDC_Transmit_FS((uint8_t*)&(IcdGetRec.sHeader),sizeof(usb_get_recording_type));
 8003a78:	f000 f874 	bl	8003b64 <CDC_Transmit_FS>
 8003a7c:	e7da      	b.n	8003a34 <ParseIcdMsg+0x3c>
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20000774 	.word	0x20000774
 8003a84:	20000738 	.word	0x20000738
 8003a88:	20000770 	.word	0x20000770
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	45670123 	.word	0x45670123
 8003a94:	cdef89ab 	.word	0xcdef89ab
 8003a98:	2000071c 	.word	0x2000071c
 8003a9c:	200001b0 	.word	0x200001b0

08003aa0 <process_rx_msg>:
{
 8003aa0:	b510      	push	{r4, lr}
	if((UserRxBufferFS[3] == 0x9a) && (UserRxBufferFS[2] == 0x5b) && (UserRxBufferFS[1]== 0xc0) && (UserRxBufferFS[0]==0xdd))
 8003aa2:	490b      	ldr	r1, [pc, #44]	; (8003ad0 <process_rx_msg+0x30>)
 8003aa4:	78cb      	ldrb	r3, [r1, #3]
 8003aa6:	2b9a      	cmp	r3, #154	; 0x9a
 8003aa8:	d000      	beq.n	8003aac <process_rx_msg+0xc>
}
 8003aaa:	bd10      	pop	{r4, pc}
	if((UserRxBufferFS[3] == 0x9a) && (UserRxBufferFS[2] == 0x5b) && (UserRxBufferFS[1]== 0xc0) && (UserRxBufferFS[0]==0xdd))
 8003aac:	788b      	ldrb	r3, [r1, #2]
 8003aae:	2b5b      	cmp	r3, #91	; 0x5b
 8003ab0:	d1fb      	bne.n	8003aaa <process_rx_msg+0xa>
 8003ab2:	784b      	ldrb	r3, [r1, #1]
 8003ab4:	2bc0      	cmp	r3, #192	; 0xc0
 8003ab6:	d1f8      	bne.n	8003aaa <process_rx_msg+0xa>
 8003ab8:	780b      	ldrb	r3, [r1, #0]
 8003aba:	2bdd      	cmp	r3, #221	; 0xdd
 8003abc:	d1f5      	bne.n	8003aaa <process_rx_msg+0xa>
		memcpy((uint8_t*)&(sRxIcdMsg.sHeader.nPremble),&UserRxBufferFS[0],sizeof(usb_msg_header_type)+nLen);
 8003abe:	79ca      	ldrb	r2, [r1, #7]
 8003ac0:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <process_rx_msg+0x34>)
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	f000 fa6e 	bl	8003fa4 <memcpy>
		ParseIcdMsg();
 8003ac8:	f7ff ff96 	bl	80039f8 <ParseIcdMsg>
}
 8003acc:	e7ed      	b.n	8003aaa <process_rx_msg+0xa>
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	20000c64 	.word	0x20000c64
 8003ad4:	20000774 	.word	0x20000774

08003ad8 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8003ad8:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003ada:	4c09      	ldr	r4, [pc, #36]	; (8003b00 <MX_USB_DEVICE_Init+0x28>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	4909      	ldr	r1, [pc, #36]	; (8003b04 <MX_USB_DEVICE_Init+0x2c>)
 8003ae0:	0020      	movs	r0, r4
 8003ae2:	f7fd ff85 	bl	80019f0 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003ae6:	4908      	ldr	r1, [pc, #32]	; (8003b08 <MX_USB_DEVICE_Init+0x30>)
 8003ae8:	0020      	movs	r0, r4
 8003aea:	f7fd ff9b 	bl	8001a24 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003aee:	4907      	ldr	r1, [pc, #28]	; (8003b0c <MX_USB_DEVICE_Init+0x34>)
 8003af0:	0020      	movs	r0, r4
 8003af2:	f7fd ff25 	bl	8001940 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8003af6:	0020      	movs	r0, r4
 8003af8:	f7fd ff9e 	bl	8001a38 <USBD_Start>

}
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	20000a40 	.word	0x20000a40
 8003b04:	2000015c 	.word	0x2000015c
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	2000014c 	.word	0x2000014c

08003b10 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */ 
	return (USBD_OK);
  /* USER CODE END 4 */ 
}
 8003b10:	2000      	movs	r0, #0
 8003b12:	4770      	bx	lr

08003b14 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003b14:	2000      	movs	r0, #0
 8003b16:	4770      	bx	lr

08003b18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS (uint8_t* Buf, uint32_t *Len)
{
 8003b18:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8003b1a:	4c06      	ldr	r4, [pc, #24]	; (8003b34 <CDC_Receive_FS+0x1c>)
 8003b1c:	4906      	ldr	r1, [pc, #24]	; (8003b38 <CDC_Receive_FS+0x20>)
 8003b1e:	0020      	movs	r0, r4
 8003b20:	f7fd ff24 	bl	800196c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003b24:	0020      	movs	r0, r4
 8003b26:	f7fd ff45 	bl	80019b4 <USBD_CDC_ReceivePacket>
  process_rx_msg();
 8003b2a:	f7ff ffb9 	bl	8003aa0 <process_rx_msg>
  return (USBD_OK);
  /* USER CODE END 6 */ 
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000a40 	.word	0x20000a40
 8003b38:	20000c64 	.word	0x20000c64

08003b3c <CDC_Init_FS>:
{ 
 8003b3c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003b3e:	4c06      	ldr	r4, [pc, #24]	; (8003b58 <CDC_Init_FS+0x1c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	4906      	ldr	r1, [pc, #24]	; (8003b5c <CDC_Init_FS+0x20>)
 8003b44:	0020      	movs	r0, r4
 8003b46:	f7fd ff05 	bl	8001954 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003b4a:	4905      	ldr	r1, [pc, #20]	; (8003b60 <CDC_Init_FS+0x24>)
 8003b4c:	0020      	movs	r0, r4
 8003b4e:	f7fd ff0d 	bl	800196c <USBD_CDC_SetRxBuffer>
}
 8003b52:	2000      	movs	r0, #0
 8003b54:	bd10      	pop	{r4, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	20000a40 	.word	0x20000a40
 8003b5c:	20000cac 	.word	0x20000cac
 8003b60:	20000c64 	.word	0x20000c64

08003b64 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003b64:	2386      	movs	r3, #134	; 0x86
{
 8003b66:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003b68:	4c08      	ldr	r4, [pc, #32]	; (8003b8c <CDC_Transmit_FS+0x28>)
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	58e5      	ldr	r5, [r4, r3]
  if (hcdc->TxState != 0){
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	58eb      	ldr	r3, [r5, r3]
{
 8003b72:	0006      	movs	r6, r0
    return USBD_BUSY;
 8003b74:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d107      	bne.n	8003b8a <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	0020      	movs	r0, r4
 8003b7e:	0031      	movs	r1, r6
 8003b80:	f7fd fee8 	bl	8001954 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8003b84:	0020      	movs	r0, r4
 8003b86:	f7fd fef9 	bl	800197c <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */ 
  return result;
}
 8003b8a:	bd70      	pop	{r4, r5, r6, pc}
 8003b8c:	20000a40 	.word	0x20000a40

08003b90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b90:	b500      	push	{lr}
  if(pcdHandle->Instance==USB)
 8003b92:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_PCD_MspInit+0x38>)
 8003b94:	6802      	ldr	r2, [r0, #0]
{
 8003b96:	b083      	sub	sp, #12
  if(pcdHandle->Instance==USB)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_PCD_MspInit+0x10>
    HAL_NVIC_EnableIRQ(USB_IRQn);
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003b9c:	b003      	add	sp, #12
 8003b9e:	bd00      	pop	{pc}
    __HAL_RCC_USB_CLK_ENABLE();
 8003ba0:	2080      	movs	r0, #128	; 0x80
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <HAL_PCD_MspInit+0x3c>)
 8003ba4:	0400      	lsls	r0, r0, #16
 8003ba6:	69d1      	ldr	r1, [r2, #28]
 8003ba8:	4301      	orrs	r1, r0
 8003baa:	61d1      	str	r1, [r2, #28]
 8003bac:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003bae:	2100      	movs	r1, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003bb0:	4003      	ands	r3, r0
 8003bb2:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	201f      	movs	r0, #31
    __HAL_RCC_USB_CLK_ENABLE();
 8003bb8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8003bba:	f7fc fbb1 	bl	8000320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8003bbe:	201f      	movs	r0, #31
 8003bc0:	f7fc fbe2 	bl	8000388 <HAL_NVIC_EnableIRQ>
}
 8003bc4:	e7ea      	b.n	8003b9c <HAL_PCD_MspInit+0xc>
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	40005c00 	.word	0x40005c00
 8003bcc:	40021000 	.word	0x40021000

08003bd0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bd0:	0001      	movs	r1, r0
 8003bd2:	2387      	movs	r3, #135	; 0x87
{
 8003bd4:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	31ed      	adds	r1, #237	; 0xed
 8003bda:	31ff      	adds	r1, #255	; 0xff
 8003bdc:	58c0      	ldr	r0, [r0, r3]
 8003bde:	f7fd ff45 	bl	8001a6c <USBD_LL_SetupStage>
}
 8003be2:	bd10      	pop	{r4, pc}

08003be4 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003be4:	00cb      	lsls	r3, r1, #3
 8003be6:	1a5b      	subs	r3, r3, r1
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	18c3      	adds	r3, r0, r3
 8003bec:	3319      	adds	r3, #25
 8003bee:	33ff      	adds	r3, #255	; 0xff
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	2387      	movs	r3, #135	; 0x87
{
 8003bf4:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	58c0      	ldr	r0, [r0, r3]
 8003bfa:	f7fd ff6b 	bl	8001ad4 <USBD_LL_DataOutStage>
}
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c00:	00cb      	lsls	r3, r1, #3
 8003c02:	1a5b      	subs	r3, r3, r1
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	18c3      	adds	r3, r0, r3
 8003c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c0a:	2387      	movs	r3, #135	; 0x87
{
 8003c0c:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	58c0      	ldr	r0, [r0, r3]
 8003c12:	f7fd ff9b 	bl	8001b4c <USBD_LL_DataInStage>
}
 8003c16:	bd10      	pop	{r4, pc}

08003c18 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c18:	2387      	movs	r3, #135	; 0x87
{
 8003c1a:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	58c0      	ldr	r0, [r0, r3]
 8003c20:	f7fe f82a 	bl	8001c78 <USBD_LL_SOF>
}
 8003c24:	bd10      	pop	{r4, pc}
 8003c26:	46c0      	nop			; (mov r8, r8)

08003c28 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003c28:	b570      	push	{r4, r5, r6, lr}
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003c2a:	2487      	movs	r4, #135	; 0x87
{ 
 8003c2c:	0005      	movs	r5, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003c2e:	00a4      	lsls	r4, r4, #2
 8003c30:	2101      	movs	r1, #1
 8003c32:	5900      	ldr	r0, [r0, r4]
 8003c34:	f7fe f808 	bl	8001c48 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c38:	5928      	ldr	r0, [r5, r4]
 8003c3a:	f7fd ffe1 	bl	8001c00 <USBD_LL_Reset>
}
 8003c3e:	bd70      	pop	{r4, r5, r6, pc}

08003c40 <HAL_PCD_SuspendCallback>:
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c40:	2387      	movs	r3, #135	; 0x87
{
 8003c42:	b510      	push	{r4, lr}
 8003c44:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	58c0      	ldr	r0, [r0, r3]
 8003c4a:	f7fe f801 	bl	8001c50 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003c4e:	69a3      	ldr	r3, [r4, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c54:	2106      	movs	r1, #6
 8003c56:	4a02      	ldr	r2, [pc, #8]	; (8003c60 <HAL_PCD_SuspendCallback+0x20>)
 8003c58:	6913      	ldr	r3, [r2, #16]
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003c5e:	bd10      	pop	{r4, pc}
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <HAL_PCD_ResumeCallback>:
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8003c64:	6983      	ldr	r3, [r0, #24]
{
 8003c66:	b510      	push	{r4, lr}
 8003c68:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <HAL_PCD_ResumeCallback+0x18>
  {    
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));   
 8003c6e:	2106      	movs	r1, #6
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <HAL_PCD_ResumeCallback+0x24>)
 8003c72:	6913      	ldr	r3, [r2, #16]
 8003c74:	438b      	bics	r3, r1
 8003c76:	6113      	str	r3, [r2, #16]
  * @param  None
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8003c78:	f7ff f91c 	bl	8002eb4 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c7c:	2387      	movs	r3, #135	; 0x87
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	58e0      	ldr	r0, [r4, r3]
 8003c82:	f7fd fff1 	bl	8001c68 <USBD_LL_Resume>
}
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8003c8c:	2387      	movs	r3, #135	; 0x87
{ 
 8003c8e:	b570      	push	{r4, r5, r6, lr}
 8003c90:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8003c92:	481d      	ldr	r0, [pc, #116]	; (8003d08 <USBD_LL_Init+0x7c>)
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	50c4      	str	r4, [r0, r3]
  pdev->pData = &hpcd_USB_FS;
 8003c98:	3304      	adds	r3, #4
 8003c9a:	50e0      	str	r0, [r4, r3]
  hpcd_USB_FS.Instance = USB;
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003c9e:	2202      	movs	r2, #2
  hpcd_USB_FS.Instance = USB;
 8003ca0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003ca2:	2308      	movs	r3, #8
 8003ca4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003ca6:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003ca8:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003caa:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cac:	6102      	str	r2, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cae:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cb0:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cb2:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cb4:	f7fc fbc0 	bl	8000438 <HAL_PCD_Init>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d001      	beq.n	8003cc0 <USBD_LL_Init+0x34>
    Error_Handler();
 8003cbc:	f7ff fa5a 	bl	8003174 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003cc0:	2588      	movs	r5, #136	; 0x88
 8003cc2:	00ad      	lsls	r5, r5, #2
 8003cc4:	5960      	ldr	r0, [r4, r5]
 8003cc6:	2318      	movs	r3, #24
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f7fd fd10 	bl	80016f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003cd0:	5960      	ldr	r0, [r4, r5]
 8003cd2:	2358      	movs	r3, #88	; 0x58
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2180      	movs	r1, #128	; 0x80
 8003cd8:	f7fd fd0a 	bl	80016f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);  
 8003cdc:	5960      	ldr	r0, [r4, r5]
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2181      	movs	r1, #129	; 0x81
 8003ce4:	f7fd fd04 	bl	80016f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8003ce8:	2388      	movs	r3, #136	; 0x88
 8003cea:	5960      	ldr	r0, [r4, r5]
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2200      	movs	r2, #0
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	f7fd fcfd 	bl	80016f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);  
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	5960      	ldr	r0, [r4, r5]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2182      	movs	r1, #130	; 0x82
 8003d00:	f7fd fcf6 	bl	80016f0 <HAL_PCDEx_PMAConfig>
}
 8003d04:	2000      	movs	r0, #0
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	20000cb0 	.word	0x20000cb0
 8003d0c:	40005c00 	.word	0x40005c00

08003d10 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8003d10:	2388      	movs	r3, #136	; 0x88
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	58c0      	ldr	r0, [r0, r3]
{
 8003d16:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8003d18:	f7fc fbdc 	bl	80004d4 <HAL_PCD_Start>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	2803      	cmp	r0, #3
 8003d20:	d801      	bhi.n	8003d26 <USBD_LL_Start+0x16>
 8003d22:	4b02      	ldr	r3, [pc, #8]	; (8003d2c <USBD_LL_Start+0x1c>)
 8003d24:	5c1b      	ldrb	r3, [r3, r0]
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	46c0      	nop			; (mov r8, r8)
 8003d2c:	080041fc 	.word	0x080041fc

08003d30 <USBD_LL_OpenEP>:
{
 8003d30:	b510      	push	{r4, lr}
 8003d32:	0014      	movs	r4, r2
 8003d34:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003d36:	2388      	movs	r3, #136	; 0x88
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	58c0      	ldr	r0, [r0, r3]
 8003d3c:	0023      	movs	r3, r4
 8003d3e:	f7fc fbed 	bl	800051c <HAL_PCD_EP_Open>
 8003d42:	2302      	movs	r3, #2
 8003d44:	2803      	cmp	r0, #3
 8003d46:	d801      	bhi.n	8003d4c <USBD_LL_OpenEP+0x1c>
 8003d48:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <USBD_LL_OpenEP+0x20>)
 8003d4a:	5c1b      	ldrb	r3, [r3, r0]
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	bd10      	pop	{r4, pc}
 8003d50:	080041fc 	.word	0x080041fc

08003d54 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d54:	2388      	movs	r3, #136	; 0x88
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	58c0      	ldr	r0, [r0, r3]
{
 8003d5a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d5c:	f7fc fd5a 	bl	8000814 <HAL_PCD_EP_Close>
 8003d60:	2302      	movs	r3, #2
 8003d62:	2803      	cmp	r0, #3
 8003d64:	d801      	bhi.n	8003d6a <USBD_LL_CloseEP+0x16>
 8003d66:	4b02      	ldr	r3, [pc, #8]	; (8003d70 <USBD_LL_CloseEP+0x1c>)
 8003d68:	5c1b      	ldrb	r3, [r3, r0]
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	bd10      	pop	{r4, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	080041fc 	.word	0x080041fc

08003d74 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d74:	2388      	movs	r3, #136	; 0x88
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	58c0      	ldr	r0, [r0, r3]
{
 8003d7a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d7c:	f7fd fbf2 	bl	8001564 <HAL_PCD_EP_SetStall>
 8003d80:	2302      	movs	r3, #2
 8003d82:	2803      	cmp	r0, #3
 8003d84:	d801      	bhi.n	8003d8a <USBD_LL_StallEP+0x16>
 8003d86:	4b02      	ldr	r3, [pc, #8]	; (8003d90 <USBD_LL_StallEP+0x1c>)
 8003d88:	5c1b      	ldrb	r3, [r3, r0]
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	080041fc 	.word	0x080041fc

08003d94 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d94:	2388      	movs	r3, #136	; 0x88
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	58c0      	ldr	r0, [r0, r3]
{
 8003d9a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d9c:	f7fd fc44 	bl	8001628 <HAL_PCD_EP_ClrStall>
 8003da0:	2302      	movs	r3, #2
 8003da2:	2803      	cmp	r0, #3
 8003da4:	d801      	bhi.n	8003daa <USBD_LL_ClearStallEP+0x16>
 8003da6:	4b02      	ldr	r3, [pc, #8]	; (8003db0 <USBD_LL_ClearStallEP+0x1c>)
 8003da8:	5c1b      	ldrb	r3, [r3, r0]
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	bd10      	pop	{r4, pc}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	080041fc 	.word	0x080041fc

08003db4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003db4:	2388      	movs	r3, #136	; 0x88
  if((ep_addr & 0x80) == 0x80)
 8003db6:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 8003dbc:	2a00      	cmp	r2, #0
 8003dbe:	db07      	blt.n	8003dd0 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	1a51      	subs	r1, r2, r1
 8003dc4:	0089      	lsls	r1, r1, #2
 8003dc6:	185b      	adds	r3, r3, r1
 8003dc8:	330b      	adds	r3, #11
 8003dca:	33ff      	adds	r3, #255	; 0xff
 8003dcc:	7818      	ldrb	r0, [r3, #0]
}
 8003dce:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003dd0:	227f      	movs	r2, #127	; 0x7f
 8003dd2:	4011      	ands	r1, r2
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	1a51      	subs	r1, r2, r1
 8003dd8:	0089      	lsls	r1, r1, #2
 8003dda:	185b      	adds	r3, r3, r1
 8003ddc:	332a      	adds	r3, #42	; 0x2a
 8003dde:	7818      	ldrb	r0, [r3, #0]
 8003de0:	e7f5      	b.n	8003dce <USBD_LL_IsStallEP+0x1a>
 8003de2:	46c0      	nop			; (mov r8, r8)

08003de4 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003de4:	2388      	movs	r3, #136	; 0x88
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	58c0      	ldr	r0, [r0, r3]
{
 8003dea:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003dec:	f7fc fb7c 	bl	80004e8 <HAL_PCD_SetAddress>
 8003df0:	2302      	movs	r3, #2
 8003df2:	2803      	cmp	r0, #3
 8003df4:	d801      	bhi.n	8003dfa <USBD_LL_SetUSBAddress+0x16>
 8003df6:	4b02      	ldr	r3, [pc, #8]	; (8003e00 <USBD_LL_SetUSBAddress+0x1c>)
 8003df8:	5c1b      	ldrb	r3, [r3, r0]
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	46c0      	nop			; (mov r8, r8)
 8003e00:	080041fc 	.word	0x080041fc

08003e04 <USBD_LL_Transmit>:
{
 8003e04:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e06:	2488      	movs	r4, #136	; 0x88
 8003e08:	00a4      	lsls	r4, r4, #2
 8003e0a:	5900      	ldr	r0, [r0, r4]
 8003e0c:	f7fc ff0a 	bl	8000c24 <HAL_PCD_EP_Transmit>
 8003e10:	2302      	movs	r3, #2
 8003e12:	2803      	cmp	r0, #3
 8003e14:	d801      	bhi.n	8003e1a <USBD_LL_Transmit+0x16>
 8003e16:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <USBD_LL_Transmit+0x1c>)
 8003e18:	5c1b      	ldrb	r3, [r3, r0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	46c0      	nop			; (mov r8, r8)
 8003e20:	080041fc 	.word	0x080041fc

08003e24 <USBD_LL_PrepareReceive>:
{
 8003e24:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e26:	2488      	movs	r4, #136	; 0x88
 8003e28:	00a4      	lsls	r4, r4, #2
 8003e2a:	5900      	ldr	r0, [r0, r4]
 8003e2c:	f7fc fdb8 	bl	80009a0 <HAL_PCD_EP_Receive>
 8003e30:	2302      	movs	r3, #2
 8003e32:	2803      	cmp	r0, #3
 8003e34:	d801      	bhi.n	8003e3a <USBD_LL_PrepareReceive+0x16>
 8003e36:	4b02      	ldr	r3, [pc, #8]	; (8003e40 <USBD_LL_PrepareReceive+0x1c>)
 8003e38:	5c1b      	ldrb	r3, [r3, r0]
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	080041fc 	.word	0x080041fc

08003e44 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003e44:	2388      	movs	r3, #136	; 0x88
{
 8003e46:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	58c0      	ldr	r0, [r0, r3]
 8003e4c:	f7fc fede 	bl	8000c0c <HAL_PCD_EP_GetRxCount>
}
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)

08003e54 <USBD_static_malloc>:
}
 8003e54:	4800      	ldr	r0, [pc, #0]	; (8003e58 <USBD_static_malloc+0x4>)
 8003e56:	4770      	bx	lr
 8003e58:	200007bc 	.word	0x200007bc

08003e5c <USBD_static_free>:
}
 8003e5c:	4770      	bx	lr
 8003e5e:	46c0      	nop			; (mov r8, r8)

08003e60 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e60:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003e62:	4801      	ldr	r0, [pc, #4]	; (8003e68 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e64:	800b      	strh	r3, [r1, #0]
}
 8003e66:	4770      	bx	lr
 8003e68:	20000178 	.word	0x20000178

08003e6c <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003e6c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003e6e:	4801      	ldr	r0, [pc, #4]	; (8003e74 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8003e70:	800b      	strh	r3, [r1, #0]
}
 8003e72:	4770      	bx	lr
 8003e74:	2000018c 	.word	0x2000018c

08003e78 <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e78:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e7a:	4c04      	ldr	r4, [pc, #16]	; (8003e8c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003e7c:	000a      	movs	r2, r1
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e7e:	4804      	ldr	r0, [pc, #16]	; (8003e90 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e80:	0021      	movs	r1, r4
 8003e82:	f7fe f915 	bl	80020b0 <USBD_GetString>
  return USBD_StrDesc;
}
 8003e86:	0020      	movs	r0, r4
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	20000ed0 	.word	0x20000ed0
 8003e90:	0800421c 	.word	0x0800421c

08003e94 <USBD_FS_ProductStrDescriptor>:
{
 8003e94:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e96:	4c04      	ldr	r4, [pc, #16]	; (8003ea8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003e98:	000a      	movs	r2, r1
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e9a:	4804      	ldr	r0, [pc, #16]	; (8003eac <USBD_FS_ProductStrDescriptor+0x18>)
 8003e9c:	0021      	movs	r1, r4
 8003e9e:	f7fe f907 	bl	80020b0 <USBD_GetString>
}
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	20000ed0 	.word	0x20000ed0
 8003eac:	08004230 	.word	0x08004230

08003eb0 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003eb0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003eb2:	4c04      	ldr	r4, [pc, #16]	; (8003ec4 <USBD_FS_SerialStrDescriptor+0x14>)
{
 8003eb4:	000a      	movs	r2, r1
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003eb6:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <USBD_FS_SerialStrDescriptor+0x18>)
 8003eb8:	0021      	movs	r1, r4
 8003eba:	f7fe f8f9 	bl	80020b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003ebe:	0020      	movs	r0, r4
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	20000ed0 	.word	0x20000ed0
 8003ec8:	08004248 	.word	0x08004248

08003ecc <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003ecc:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003ece:	4c04      	ldr	r4, [pc, #16]	; (8003ee0 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003ed0:	000a      	movs	r2, r1
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003ed2:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003ed4:	0021      	movs	r1, r4
 8003ed6:	f7fe f8eb 	bl	80020b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003eda:	0020      	movs	r0, r4
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	20000ed0 	.word	0x20000ed0
 8003ee4:	08004200 	.word	0x08004200

08003ee8 <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003ee8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003eea:	4c04      	ldr	r4, [pc, #16]	; (8003efc <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003eec:	000a      	movs	r2, r1
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003eee:	4804      	ldr	r0, [pc, #16]	; (8003f00 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003ef0:	0021      	movs	r1, r4
 8003ef2:	f7fe f8dd 	bl	80020b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003ef6:	0020      	movs	r0, r4
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	20000ed0 	.word	0x20000ed0
 8003f00:	0800420c 	.word	0x0800420c

08003f04 <TM_I2C_Write>:
#include "util.h"
#include <string.h>


HAL_StatusTypeDef TM_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8003f04:	b500      	push	{lr}
 8003f06:	b083      	sub	sp, #12
 8003f08:	0003      	movs	r3, r0
	uint8_t nData_to_send[2];
		HAL_StatusTypeDef res = HAL_OK;
	nData_to_send[0] = reg;
 8003f0a:	a801      	add	r0, sp, #4
 8003f0c:	7001      	strb	r1, [r0, #0]
	nData_to_send[1] = data;
 8003f0e:	7042      	strb	r2, [r0, #1]


	res = i2c_write_blocking(nData_to_send,sizeof(nData_to_send),10000,address);
 8003f10:	2102      	movs	r1, #2
 8003f12:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <TM_I2C_Write+0x1c>)
 8003f14:	f7fe fb30 	bl	8002578 <i2c_write_blocking>
	//HAL_Delay(100);
	return res;
 8003f18:	b2c0      	uxtb	r0, r0

}
 8003f1a:	b003      	add	sp, #12
 8003f1c:	bd00      	pop	{pc}
 8003f1e:	46c0      	nop			; (mov r8, r8)
 8003f20:	00002710 	.word	0x00002710

08003f24 <__libc_init_array>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	2600      	movs	r6, #0
 8003f28:	4d0c      	ldr	r5, [pc, #48]	; (8003f5c <__libc_init_array+0x38>)
 8003f2a:	4c0d      	ldr	r4, [pc, #52]	; (8003f60 <__libc_init_array+0x3c>)
 8003f2c:	1b64      	subs	r4, r4, r5
 8003f2e:	10a4      	asrs	r4, r4, #2
 8003f30:	42a6      	cmp	r6, r4
 8003f32:	d109      	bne.n	8003f48 <__libc_init_array+0x24>
 8003f34:	2600      	movs	r6, #0
 8003f36:	f000 f881 	bl	800403c <_init>
 8003f3a:	4d0a      	ldr	r5, [pc, #40]	; (8003f64 <__libc_init_array+0x40>)
 8003f3c:	4c0a      	ldr	r4, [pc, #40]	; (8003f68 <__libc_init_array+0x44>)
 8003f3e:	1b64      	subs	r4, r4, r5
 8003f40:	10a4      	asrs	r4, r4, #2
 8003f42:	42a6      	cmp	r6, r4
 8003f44:	d105      	bne.n	8003f52 <__libc_init_array+0x2e>
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
 8003f48:	00b3      	lsls	r3, r6, #2
 8003f4a:	58eb      	ldr	r3, [r5, r3]
 8003f4c:	4798      	blx	r3
 8003f4e:	3601      	adds	r6, #1
 8003f50:	e7ee      	b.n	8003f30 <__libc_init_array+0xc>
 8003f52:	00b3      	lsls	r3, r6, #2
 8003f54:	58eb      	ldr	r3, [r5, r3]
 8003f56:	4798      	blx	r3
 8003f58:	3601      	adds	r6, #1
 8003f5a:	e7f2      	b.n	8003f42 <__libc_init_array+0x1e>
 8003f5c:	08004280 	.word	0x08004280
 8003f60:	08004280 	.word	0x08004280
 8003f64:	08004280 	.word	0x08004280
 8003f68:	08004284 	.word	0x08004284

08003f6c <__itoa>:
 8003f6c:	1e93      	subs	r3, r2, #2
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	000c      	movs	r4, r1
 8003f72:	2b22      	cmp	r3, #34	; 0x22
 8003f74:	d904      	bls.n	8003f80 <__itoa+0x14>
 8003f76:	2300      	movs	r3, #0
 8003f78:	001c      	movs	r4, r3
 8003f7a:	700b      	strb	r3, [r1, #0]
 8003f7c:	0020      	movs	r0, r4
 8003f7e:	bd10      	pop	{r4, pc}
 8003f80:	2a0a      	cmp	r2, #10
 8003f82:	d109      	bne.n	8003f98 <__itoa+0x2c>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	da07      	bge.n	8003f98 <__itoa+0x2c>
 8003f88:	232d      	movs	r3, #45	; 0x2d
 8003f8a:	700b      	strb	r3, [r1, #0]
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4240      	negs	r0, r0
 8003f90:	1861      	adds	r1, r4, r1
 8003f92:	f000 f819 	bl	8003fc8 <__utoa>
 8003f96:	e7f1      	b.n	8003f7c <__itoa+0x10>
 8003f98:	2100      	movs	r1, #0
 8003f9a:	e7f9      	b.n	8003f90 <__itoa+0x24>

08003f9c <itoa>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	f7ff ffe5 	bl	8003f6c <__itoa>
 8003fa2:	bd10      	pop	{r4, pc}

08003fa4 <memcpy>:
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	b510      	push	{r4, lr}
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d100      	bne.n	8003fae <memcpy+0xa>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	5ccc      	ldrb	r4, [r1, r3]
 8003fb0:	54c4      	strb	r4, [r0, r3]
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	e7f8      	b.n	8003fa8 <memcpy+0x4>

08003fb6 <memset>:
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	1882      	adds	r2, r0, r2
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d100      	bne.n	8003fc0 <memset+0xa>
 8003fbe:	4770      	bx	lr
 8003fc0:	7019      	strb	r1, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	e7f9      	b.n	8003fba <memset+0x4>
	...

08003fc8 <__utoa>:
 8003fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fca:	0017      	movs	r7, r2
 8003fcc:	b08f      	sub	sp, #60	; 0x3c
 8003fce:	2225      	movs	r2, #37	; 0x25
 8003fd0:	0006      	movs	r6, r0
 8003fd2:	000d      	movs	r5, r1
 8003fd4:	a804      	add	r0, sp, #16
 8003fd6:	4918      	ldr	r1, [pc, #96]	; (8004038 <__utoa+0x70>)
 8003fd8:	f7ff ffe4 	bl	8003fa4 <memcpy>
 8003fdc:	aa04      	add	r2, sp, #16
 8003fde:	1ebb      	subs	r3, r7, #2
 8003fe0:	2400      	movs	r4, #0
 8003fe2:	9203      	str	r2, [sp, #12]
 8003fe4:	2b22      	cmp	r3, #34	; 0x22
 8003fe6:	d905      	bls.n	8003ff4 <__utoa+0x2c>
 8003fe8:	702c      	strb	r4, [r5, #0]
 8003fea:	0025      	movs	r5, r4
 8003fec:	0028      	movs	r0, r5
 8003fee:	b00f      	add	sp, #60	; 0x3c
 8003ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff2:	9c01      	ldr	r4, [sp, #4]
 8003ff4:	1c63      	adds	r3, r4, #1
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	18eb      	adds	r3, r5, r3
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	3b01      	subs	r3, #1
 8004000:	0039      	movs	r1, r7
 8004002:	9302      	str	r3, [sp, #8]
 8004004:	f7fc f90e 	bl	8000224 <__aeabi_uidivmod>
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	9a02      	ldr	r2, [sp, #8]
 800400c:	5c5b      	ldrb	r3, [r3, r1]
 800400e:	0030      	movs	r0, r6
 8004010:	7013      	strb	r3, [r2, #0]
 8004012:	0039      	movs	r1, r7
 8004014:	f7fc f880 	bl	8000118 <__udivsi3>
 8004018:	1e06      	subs	r6, r0, #0
 800401a:	d1ea      	bne.n	8003ff2 <__utoa+0x2a>
 800401c:	9b00      	ldr	r3, [sp, #0]
 800401e:	7018      	strb	r0, [r3, #0]
 8004020:	002b      	movs	r3, r5
 8004022:	1b5a      	subs	r2, r3, r5
 8004024:	4294      	cmp	r4, r2
 8004026:	dde1      	ble.n	8003fec <__utoa+0x24>
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	5d29      	ldrb	r1, [r5, r4]
 800402c:	7019      	strb	r1, [r3, #0]
 800402e:	552a      	strb	r2, [r5, r4]
 8004030:	3301      	adds	r3, #1
 8004032:	3c01      	subs	r4, #1
 8004034:	e7f5      	b.n	8004022 <__utoa+0x5a>
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	08004258 	.word	0x08004258

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
